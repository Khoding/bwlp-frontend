//
// Autogenerated by Thrift Compiler (0.16.0)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
if (typeof Int64 === 'undefined' && typeof require === 'function') {
  const Int64 = require('node-int64');
}


//HELPER FUNCTIONS AND STRUCTURES

SatelliteServer_getVersion_args = class {
  constructor(args) {
    this.clientVersion = null;
    if (args) {
      if (args.clientVersion !== undefined && args.clientVersion !== null) {
        this.clientVersion = args.clientVersion;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.I64) {
          this.clientVersion = input.readI64().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 0:
          input.skip(ftype);
          break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('SatelliteServer_getVersion_args');
    if (this.clientVersion !== null && this.clientVersion !== undefined) {
      output.writeFieldBegin('clientVersion', Thrift.Type.I64, 1);
      output.writeI64(this.clientVersion);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
SatelliteServer_getVersion_result = class {
  constructor(args) {
    this.success = null;
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = args.success;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.I64) {
          this.success = input.readI64().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 0:
          input.skip(ftype);
          break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('SatelliteServer_getVersion_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.I64, 0);
      output.writeI64(this.success);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
SatelliteServer_getSupportedFeatures_args = class {
  constructor(args) {
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      input.skip(ftype);
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('SatelliteServer_getSupportedFeatures_args');
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
SatelliteServer_getSupportedFeatures_result = class {
  constructor(args) {
    this.success = null;
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = args.success;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.STRING) {
          this.success = input.readString().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 0:
          input.skip(ftype);
          break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('SatelliteServer_getSupportedFeatures_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.STRING, 0);
      output.writeString(this.success);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
SatelliteServer_getConfiguration_args = class {
  constructor(args) {
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      input.skip(ftype);
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('SatelliteServer_getConfiguration_args');
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
SatelliteServer_getConfiguration_result = class {
  constructor(args) {
    this.success = null;
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = new SatelliteConfig(args.success);
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.STRUCT) {
          this.success = new SatelliteConfig();
          this.success.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 0:
          input.skip(ftype);
          break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('SatelliteServer_getConfiguration_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
      this.success.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
SatelliteServer_requestImageVersionUpload_args = class {
  constructor(args) {
    this.userToken = null;
    this.imageBaseId = null;
    this.fileSize = null;
    this.blockHashes = null;
    this.machineDescription = null;
    if (args) {
      if (args.userToken !== undefined && args.userToken !== null) {
        this.userToken = args.userToken;
      }
      if (args.imageBaseId !== undefined && args.imageBaseId !== null) {
        this.imageBaseId = args.imageBaseId;
      }
      if (args.fileSize !== undefined && args.fileSize !== null) {
        this.fileSize = args.fileSize;
      }
      if (args.blockHashes !== undefined && args.blockHashes !== null) {
        this.blockHashes = Thrift.copyList(args.blockHashes, [null]);
      }
      if (args.machineDescription !== undefined && args.machineDescription !== null) {
        this.machineDescription = args.machineDescription;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.userToken = input.readString().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRING) {
          this.imageBaseId = input.readString().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.I64) {
          this.fileSize = input.readI64().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.LIST) {
          this.blockHashes = [];
          const _rtmp3188 = input.readListBegin();
          const _size187 = _rtmp3188.size || 0;
          for (let _i189 = 0; _i189 < _size187; ++_i189) {
            let elem190 = null;
            elem190 = input.readBinary().value;
            this.blockHashes.push(elem190);
          }
          input.readListEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 5:
        if (ftype == Thrift.Type.STRING) {
          this.machineDescription = input.readBinary().value;
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('SatelliteServer_requestImageVersionUpload_args');
    if (this.userToken !== null && this.userToken !== undefined) {
      output.writeFieldBegin('userToken', Thrift.Type.STRING, 1);
      output.writeString(this.userToken);
      output.writeFieldEnd();
    }
    if (this.imageBaseId !== null && this.imageBaseId !== undefined) {
      output.writeFieldBegin('imageBaseId', Thrift.Type.STRING, 2);
      output.writeString(this.imageBaseId);
      output.writeFieldEnd();
    }
    if (this.fileSize !== null && this.fileSize !== undefined) {
      output.writeFieldBegin('fileSize', Thrift.Type.I64, 3);
      output.writeI64(this.fileSize);
      output.writeFieldEnd();
    }
    if (this.blockHashes !== null && this.blockHashes !== undefined) {
      output.writeFieldBegin('blockHashes', Thrift.Type.LIST, 4);
      output.writeListBegin(Thrift.Type.STRING, this.blockHashes.length);
      for (let iter191 in this.blockHashes) {
        if (this.blockHashes.hasOwnProperty(iter191)) {
          iter191 = this.blockHashes[iter191];
          output.writeBinary(iter191);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    if (this.machineDescription !== null && this.machineDescription !== undefined) {
      output.writeFieldBegin('machineDescription', Thrift.Type.STRING, 5);
      output.writeBinary(this.machineDescription);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
SatelliteServer_requestImageVersionUpload_result = class {
  constructor(args) {
    this.success = null;
    this.rejection = null;
    this.authError = null;
    this.ffff = null;
    this.sdf = null;
    if (args instanceof TTransferRejectedException) {
        this.rejection = args;
        return;
    }
    if (args instanceof TAuthorizationException) {
        this.authError = args;
        return;
    }
    if (args instanceof TInvocationException) {
        this.ffff = args;
        return;
    }
    if (args instanceof TNotFoundException) {
        this.sdf = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = new TransferInformation(args.success);
      }
      if (args.rejection !== undefined && args.rejection !== null) {
        this.rejection = args.rejection;
      }
      if (args.authError !== undefined && args.authError !== null) {
        this.authError = args.authError;
      }
      if (args.ffff !== undefined && args.ffff !== null) {
        this.ffff = args.ffff;
      }
      if (args.sdf !== undefined && args.sdf !== null) {
        this.sdf = args.sdf;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.STRUCT) {
          this.success = new TransferInformation();
          this.success.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.rejection = new TTransferRejectedException();
          this.rejection.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.authError = new TAuthorizationException();
          this.authError.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ffff = new TInvocationException();
          this.ffff.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.sdf = new TNotFoundException();
          this.sdf.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('SatelliteServer_requestImageVersionUpload_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
      this.success.write(output);
      output.writeFieldEnd();
    }
    if (this.rejection !== null && this.rejection !== undefined) {
      output.writeFieldBegin('rejection', Thrift.Type.STRUCT, 1);
      this.rejection.write(output);
      output.writeFieldEnd();
    }
    if (this.authError !== null && this.authError !== undefined) {
      output.writeFieldBegin('authError', Thrift.Type.STRUCT, 2);
      this.authError.write(output);
      output.writeFieldEnd();
    }
    if (this.ffff !== null && this.ffff !== undefined) {
      output.writeFieldBegin('ffff', Thrift.Type.STRUCT, 3);
      this.ffff.write(output);
      output.writeFieldEnd();
    }
    if (this.sdf !== null && this.sdf !== undefined) {
      output.writeFieldBegin('sdf', Thrift.Type.STRUCT, 4);
      this.sdf.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
SatelliteServer_updateBlockHashes_args = class {
  constructor(args) {
    this.uploadToken = null;
    this.blockHashes = null;
    this.userToken = null;
    if (args) {
      if (args.uploadToken !== undefined && args.uploadToken !== null) {
        this.uploadToken = args.uploadToken;
      }
      if (args.blockHashes !== undefined && args.blockHashes !== null) {
        this.blockHashes = Thrift.copyList(args.blockHashes, [null]);
      }
      if (args.userToken !== undefined && args.userToken !== null) {
        this.userToken = args.userToken;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.uploadToken = input.readString().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.LIST) {
          this.blockHashes = [];
          const _rtmp3193 = input.readListBegin();
          const _size192 = _rtmp3193.size || 0;
          for (let _i194 = 0; _i194 < _size192; ++_i194) {
            let elem195 = null;
            elem195 = input.readBinary().value;
            this.blockHashes.push(elem195);
          }
          input.readListEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRING) {
          this.userToken = input.readString().value;
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('SatelliteServer_updateBlockHashes_args');
    if (this.uploadToken !== null && this.uploadToken !== undefined) {
      output.writeFieldBegin('uploadToken', Thrift.Type.STRING, 1);
      output.writeString(this.uploadToken);
      output.writeFieldEnd();
    }
    if (this.blockHashes !== null && this.blockHashes !== undefined) {
      output.writeFieldBegin('blockHashes', Thrift.Type.LIST, 2);
      output.writeListBegin(Thrift.Type.STRING, this.blockHashes.length);
      for (let iter196 in this.blockHashes) {
        if (this.blockHashes.hasOwnProperty(iter196)) {
          iter196 = this.blockHashes[iter196];
          output.writeBinary(iter196);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    if (this.userToken !== null && this.userToken !== undefined) {
      output.writeFieldBegin('userToken', Thrift.Type.STRING, 3);
      output.writeString(this.userToken);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
SatelliteServer_updateBlockHashes_result = class {
  constructor(args) {
    this.ex1 = null;
    if (args instanceof TInvalidTokenException) {
        this.ex1 = args;
        return;
    }
    if (args) {
      if (args.ex1 !== undefined && args.ex1 !== null) {
        this.ex1 = args.ex1;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex1 = new TInvalidTokenException();
          this.ex1.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 0:
          input.skip(ftype);
          break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('SatelliteServer_updateBlockHashes_result');
    if (this.ex1 !== null && this.ex1 !== undefined) {
      output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
      this.ex1.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
SatelliteServer_setUploadOptions_args = class {
  constructor(args) {
    this.userToken = null;
    this.uploadToken = null;
    this.options = null;
    if (args) {
      if (args.userToken !== undefined && args.userToken !== null) {
        this.userToken = args.userToken;
      }
      if (args.uploadToken !== undefined && args.uploadToken !== null) {
        this.uploadToken = args.uploadToken;
      }
      if (args.options !== undefined && args.options !== null) {
        this.options = new UploadOptions(args.options);
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.userToken = input.readString().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRING) {
          this.uploadToken = input.readString().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.options = new UploadOptions();
          this.options.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('SatelliteServer_setUploadOptions_args');
    if (this.userToken !== null && this.userToken !== undefined) {
      output.writeFieldBegin('userToken', Thrift.Type.STRING, 1);
      output.writeString(this.userToken);
      output.writeFieldEnd();
    }
    if (this.uploadToken !== null && this.uploadToken !== undefined) {
      output.writeFieldBegin('uploadToken', Thrift.Type.STRING, 2);
      output.writeString(this.uploadToken);
      output.writeFieldEnd();
    }
    if (this.options !== null && this.options !== undefined) {
      output.writeFieldBegin('options', Thrift.Type.STRUCT, 3);
      this.options.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
SatelliteServer_setUploadOptions_result = class {
  constructor(args) {
    this.success = null;
    this.frootloops = null;
    this.imcyborgbutthatsok = null;
    if (args instanceof TAuthorizationException) {
        this.frootloops = args;
        return;
    }
    if (args instanceof TInvalidTokenException) {
        this.imcyborgbutthatsok = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = new UploadOptions(args.success);
      }
      if (args.frootloops !== undefined && args.frootloops !== null) {
        this.frootloops = args.frootloops;
      }
      if (args.imcyborgbutthatsok !== undefined && args.imcyborgbutthatsok !== null) {
        this.imcyborgbutthatsok = args.imcyborgbutthatsok;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.STRUCT) {
          this.success = new UploadOptions();
          this.success.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.frootloops = new TAuthorizationException();
          this.frootloops.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.imcyborgbutthatsok = new TInvalidTokenException();
          this.imcyborgbutthatsok.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('SatelliteServer_setUploadOptions_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
      this.success.write(output);
      output.writeFieldEnd();
    }
    if (this.frootloops !== null && this.frootloops !== undefined) {
      output.writeFieldBegin('frootloops', Thrift.Type.STRUCT, 1);
      this.frootloops.write(output);
      output.writeFieldEnd();
    }
    if (this.imcyborgbutthatsok !== null && this.imcyborgbutthatsok !== undefined) {
      output.writeFieldBegin('imcyborgbutthatsok', Thrift.Type.STRUCT, 2);
      this.imcyborgbutthatsok.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
SatelliteServer_cancelUpload_args = class {
  constructor(args) {
    this.uploadToken = null;
    if (args) {
      if (args.uploadToken !== undefined && args.uploadToken !== null) {
        this.uploadToken = args.uploadToken;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.uploadToken = input.readString().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 0:
          input.skip(ftype);
          break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('SatelliteServer_cancelUpload_args');
    if (this.uploadToken !== null && this.uploadToken !== undefined) {
      output.writeFieldBegin('uploadToken', Thrift.Type.STRING, 1);
      output.writeString(this.uploadToken);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
SatelliteServer_cancelUpload_result = class {
  constructor(args) {
    this.ex1 = null;
    if (args instanceof TInvalidTokenException) {
        this.ex1 = args;
        return;
    }
    if (args) {
      if (args.ex1 !== undefined && args.ex1 !== null) {
        this.ex1 = args.ex1;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex1 = new TInvalidTokenException();
          this.ex1.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 0:
          input.skip(ftype);
          break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('SatelliteServer_cancelUpload_result');
    if (this.ex1 !== null && this.ex1 !== undefined) {
      output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
      this.ex1.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
SatelliteServer_queryUploadStatus_args = class {
  constructor(args) {
    this.uploadToken = null;
    if (args) {
      if (args.uploadToken !== undefined && args.uploadToken !== null) {
        this.uploadToken = args.uploadToken;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.uploadToken = input.readString().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 0:
          input.skip(ftype);
          break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('SatelliteServer_queryUploadStatus_args');
    if (this.uploadToken !== null && this.uploadToken !== undefined) {
      output.writeFieldBegin('uploadToken', Thrift.Type.STRING, 1);
      output.writeString(this.uploadToken);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
SatelliteServer_queryUploadStatus_result = class {
  constructor(args) {
    this.success = null;
    this.ex1 = null;
    if (args instanceof TInvalidTokenException) {
        this.ex1 = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = new TransferStatus(args.success);
      }
      if (args.ex1 !== undefined && args.ex1 !== null) {
        this.ex1 = args.ex1;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.STRUCT) {
          this.success = new TransferStatus();
          this.success.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex1 = new TInvalidTokenException();
          this.ex1.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('SatelliteServer_queryUploadStatus_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
      this.success.write(output);
      output.writeFieldEnd();
    }
    if (this.ex1 !== null && this.ex1 !== undefined) {
      output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
      this.ex1.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
SatelliteServer_requestDownload_args = class {
  constructor(args) {
    this.userToken = null;
    this.imageVersionId = null;
    if (args) {
      if (args.userToken !== undefined && args.userToken !== null) {
        this.userToken = args.userToken;
      }
      if (args.imageVersionId !== undefined && args.imageVersionId !== null) {
        this.imageVersionId = args.imageVersionId;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.userToken = input.readString().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRING) {
          this.imageVersionId = input.readString().value;
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('SatelliteServer_requestDownload_args');
    if (this.userToken !== null && this.userToken !== undefined) {
      output.writeFieldBegin('userToken', Thrift.Type.STRING, 1);
      output.writeString(this.userToken);
      output.writeFieldEnd();
    }
    if (this.imageVersionId !== null && this.imageVersionId !== undefined) {
      output.writeFieldBegin('imageVersionId', Thrift.Type.STRING, 2);
      output.writeString(this.imageVersionId);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
SatelliteServer_requestDownload_result = class {
  constructor(args) {
    this.success = null;
    this.rejection = null;
    this.authError = null;
    this.ffff = null;
    this.sdf = null;
    if (args instanceof TTransferRejectedException) {
        this.rejection = args;
        return;
    }
    if (args instanceof TAuthorizationException) {
        this.authError = args;
        return;
    }
    if (args instanceof TInvocationException) {
        this.ffff = args;
        return;
    }
    if (args instanceof TNotFoundException) {
        this.sdf = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = new TransferInformation(args.success);
      }
      if (args.rejection !== undefined && args.rejection !== null) {
        this.rejection = args.rejection;
      }
      if (args.authError !== undefined && args.authError !== null) {
        this.authError = args.authError;
      }
      if (args.ffff !== undefined && args.ffff !== null) {
        this.ffff = args.ffff;
      }
      if (args.sdf !== undefined && args.sdf !== null) {
        this.sdf = args.sdf;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.STRUCT) {
          this.success = new TransferInformation();
          this.success.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.rejection = new TTransferRejectedException();
          this.rejection.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.authError = new TAuthorizationException();
          this.authError.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ffff = new TInvocationException();
          this.ffff.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.sdf = new TNotFoundException();
          this.sdf.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('SatelliteServer_requestDownload_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
      this.success.write(output);
      output.writeFieldEnd();
    }
    if (this.rejection !== null && this.rejection !== undefined) {
      output.writeFieldBegin('rejection', Thrift.Type.STRUCT, 1);
      this.rejection.write(output);
      output.writeFieldEnd();
    }
    if (this.authError !== null && this.authError !== undefined) {
      output.writeFieldBegin('authError', Thrift.Type.STRUCT, 2);
      this.authError.write(output);
      output.writeFieldEnd();
    }
    if (this.ffff !== null && this.ffff !== undefined) {
      output.writeFieldBegin('ffff', Thrift.Type.STRUCT, 3);
      this.ffff.write(output);
      output.writeFieldEnd();
    }
    if (this.sdf !== null && this.sdf !== undefined) {
      output.writeFieldBegin('sdf', Thrift.Type.STRUCT, 4);
      this.sdf.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
SatelliteServer_cancelDownload_args = class {
  constructor(args) {
    this.downloadToken = null;
    if (args) {
      if (args.downloadToken !== undefined && args.downloadToken !== null) {
        this.downloadToken = args.downloadToken;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.downloadToken = input.readString().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 0:
          input.skip(ftype);
          break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('SatelliteServer_cancelDownload_args');
    if (this.downloadToken !== null && this.downloadToken !== undefined) {
      output.writeFieldBegin('downloadToken', Thrift.Type.STRING, 1);
      output.writeString(this.downloadToken);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
SatelliteServer_cancelDownload_result = class {
  constructor(args) {
    this.ex1 = null;
    if (args instanceof TInvalidTokenException) {
        this.ex1 = args;
        return;
    }
    if (args) {
      if (args.ex1 !== undefined && args.ex1 !== null) {
        this.ex1 = args.ex1;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex1 = new TInvalidTokenException();
          this.ex1.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 0:
          input.skip(ftype);
          break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('SatelliteServer_cancelDownload_result');
    if (this.ex1 !== null && this.ex1 !== undefined) {
      output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
      this.ex1.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
SatelliteServer_isAuthenticated_args = class {
  constructor(args) {
    this.userToken = null;
    if (args) {
      if (args.userToken !== undefined && args.userToken !== null) {
        this.userToken = args.userToken;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.userToken = input.readString().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 0:
          input.skip(ftype);
          break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('SatelliteServer_isAuthenticated_args');
    if (this.userToken !== null && this.userToken !== undefined) {
      output.writeFieldBegin('userToken', Thrift.Type.STRING, 1);
      output.writeString(this.userToken);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
SatelliteServer_isAuthenticated_result = class {
  constructor(args) {
    this.authError = null;
    this.serverError = null;
    if (args instanceof TAuthorizationException) {
        this.authError = args;
        return;
    }
    if (args instanceof TInvocationException) {
        this.serverError = args;
        return;
    }
    if (args) {
      if (args.authError !== undefined && args.authError !== null) {
        this.authError = args.authError;
      }
      if (args.serverError !== undefined && args.serverError !== null) {
        this.serverError = args.serverError;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.authError = new TAuthorizationException();
          this.authError.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.serverError = new TInvocationException();
          this.serverError.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('SatelliteServer_isAuthenticated_result');
    if (this.authError !== null && this.authError !== undefined) {
      output.writeFieldBegin('authError', Thrift.Type.STRUCT, 1);
      this.authError.write(output);
      output.writeFieldEnd();
    }
    if (this.serverError !== null && this.serverError !== undefined) {
      output.writeFieldBegin('serverError', Thrift.Type.STRUCT, 2);
      this.serverError.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
SatelliteServer_whoami_args = class {
  constructor(args) {
    this.userToken = null;
    if (args) {
      if (args.userToken !== undefined && args.userToken !== null) {
        this.userToken = args.userToken;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.userToken = input.readString().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 0:
          input.skip(ftype);
          break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('SatelliteServer_whoami_args');
    if (this.userToken !== null && this.userToken !== undefined) {
      output.writeFieldBegin('userToken', Thrift.Type.STRING, 1);
      output.writeString(this.userToken);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
SatelliteServer_whoami_result = class {
  constructor(args) {
    this.success = null;
    this.authError = null;
    this.serverError = null;
    if (args instanceof TAuthorizationException) {
        this.authError = args;
        return;
    }
    if (args instanceof TInvocationException) {
        this.serverError = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = new WhoamiInfo(args.success);
      }
      if (args.authError !== undefined && args.authError !== null) {
        this.authError = args.authError;
      }
      if (args.serverError !== undefined && args.serverError !== null) {
        this.serverError = args.serverError;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.STRUCT) {
          this.success = new WhoamiInfo();
          this.success.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.authError = new TAuthorizationException();
          this.authError.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.serverError = new TInvocationException();
          this.serverError.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('SatelliteServer_whoami_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
      this.success.write(output);
      output.writeFieldEnd();
    }
    if (this.authError !== null && this.authError !== undefined) {
      output.writeFieldBegin('authError', Thrift.Type.STRUCT, 1);
      this.authError.write(output);
      output.writeFieldEnd();
    }
    if (this.serverError !== null && this.serverError !== undefined) {
      output.writeFieldBegin('serverError', Thrift.Type.STRUCT, 2);
      this.serverError.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
SatelliteServer_invalidateSession_args = class {
  constructor(args) {
    this.userToken = null;
    if (args) {
      if (args.userToken !== undefined && args.userToken !== null) {
        this.userToken = args.userToken;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.userToken = input.readString().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 0:
          input.skip(ftype);
          break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('SatelliteServer_invalidateSession_args');
    if (this.userToken !== null && this.userToken !== undefined) {
      output.writeFieldBegin('userToken', Thrift.Type.STRING, 1);
      output.writeString(this.userToken);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
SatelliteServer_invalidateSession_result = class {
  constructor(args) {
    this.ex = null;
    if (args instanceof TInvalidTokenException) {
        this.ex = args;
        return;
    }
    if (args) {
      if (args.ex !== undefined && args.ex !== null) {
        this.ex = args.ex;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new TInvalidTokenException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 0:
          input.skip(ftype);
          break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('SatelliteServer_invalidateSession_result');
    if (this.ex !== null && this.ex !== undefined) {
      output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
      this.ex.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
SatelliteServer_getUserList_args = class {
  constructor(args) {
    this.userToken = null;
    this.page = null;
    if (args) {
      if (args.userToken !== undefined && args.userToken !== null) {
        this.userToken = args.userToken;
      }
      if (args.page !== undefined && args.page !== null) {
        this.page = args.page;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.userToken = input.readString().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.I32) {
          this.page = input.readI32().value;
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('SatelliteServer_getUserList_args');
    if (this.userToken !== null && this.userToken !== undefined) {
      output.writeFieldBegin('userToken', Thrift.Type.STRING, 1);
      output.writeString(this.userToken);
      output.writeFieldEnd();
    }
    if (this.page !== null && this.page !== undefined) {
      output.writeFieldBegin('page', Thrift.Type.I32, 2);
      output.writeI32(this.page);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
SatelliteServer_getUserList_result = class {
  constructor(args) {
    this.success = null;
    this.failure = null;
    this.serverError = null;
    if (args instanceof TAuthorizationException) {
        this.failure = args;
        return;
    }
    if (args instanceof TInvocationException) {
        this.serverError = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = Thrift.copyList(args.success, [UserInfo]);
      }
      if (args.failure !== undefined && args.failure !== null) {
        this.failure = args.failure;
      }
      if (args.serverError !== undefined && args.serverError !== null) {
        this.serverError = args.serverError;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.LIST) {
          this.success = [];
          const _rtmp3198 = input.readListBegin();
          const _size197 = _rtmp3198.size || 0;
          for (let _i199 = 0; _i199 < _size197; ++_i199) {
            let elem200 = null;
            elem200 = new UserInfo();
            elem200.read(input);
            this.success.push(elem200);
          }
          input.readListEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.failure = new TAuthorizationException();
          this.failure.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.serverError = new TInvocationException();
          this.serverError.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('SatelliteServer_getUserList_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.LIST, 0);
      output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
      for (let iter201 in this.success) {
        if (this.success.hasOwnProperty(iter201)) {
          iter201 = this.success[iter201];
          iter201.write(output);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    if (this.failure !== null && this.failure !== undefined) {
      output.writeFieldBegin('failure', Thrift.Type.STRUCT, 1);
      this.failure.write(output);
      output.writeFieldEnd();
    }
    if (this.serverError !== null && this.serverError !== undefined) {
      output.writeFieldBegin('serverError', Thrift.Type.STRUCT, 2);
      this.serverError.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
SatelliteServer_getUserConfig_args = class {
  constructor(args) {
    this.userToken = null;
    if (args) {
      if (args.userToken !== undefined && args.userToken !== null) {
        this.userToken = args.userToken;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.userToken = input.readString().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 0:
          input.skip(ftype);
          break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('SatelliteServer_getUserConfig_args');
    if (this.userToken !== null && this.userToken !== undefined) {
      output.writeFieldBegin('userToken', Thrift.Type.STRING, 1);
      output.writeString(this.userToken);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
SatelliteServer_getUserConfig_result = class {
  constructor(args) {
    this.success = null;
    this.failure = null;
    this.serverError = null;
    if (args instanceof TAuthorizationException) {
        this.failure = args;
        return;
    }
    if (args instanceof TInvocationException) {
        this.serverError = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = new SatelliteUserConfig(args.success);
      }
      if (args.failure !== undefined && args.failure !== null) {
        this.failure = args.failure;
      }
      if (args.serverError !== undefined && args.serverError !== null) {
        this.serverError = args.serverError;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.STRUCT) {
          this.success = new SatelliteUserConfig();
          this.success.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.failure = new TAuthorizationException();
          this.failure.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.serverError = new TInvocationException();
          this.serverError.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('SatelliteServer_getUserConfig_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
      this.success.write(output);
      output.writeFieldEnd();
    }
    if (this.failure !== null && this.failure !== undefined) {
      output.writeFieldBegin('failure', Thrift.Type.STRUCT, 1);
      this.failure.write(output);
      output.writeFieldEnd();
    }
    if (this.serverError !== null && this.serverError !== undefined) {
      output.writeFieldBegin('serverError', Thrift.Type.STRUCT, 2);
      this.serverError.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
SatelliteServer_setUserConfig_args = class {
  constructor(args) {
    this.userToken = null;
    this.config = null;
    if (args) {
      if (args.userToken !== undefined && args.userToken !== null) {
        this.userToken = args.userToken;
      }
      if (args.config !== undefined && args.config !== null) {
        this.config = new SatelliteUserConfig(args.config);
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.userToken = input.readString().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.config = new SatelliteUserConfig();
          this.config.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('SatelliteServer_setUserConfig_args');
    if (this.userToken !== null && this.userToken !== undefined) {
      output.writeFieldBegin('userToken', Thrift.Type.STRING, 1);
      output.writeString(this.userToken);
      output.writeFieldEnd();
    }
    if (this.config !== null && this.config !== undefined) {
      output.writeFieldBegin('config', Thrift.Type.STRUCT, 2);
      this.config.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
SatelliteServer_setUserConfig_result = class {
  constructor(args) {
    this.failure = null;
    this.serverError = null;
    if (args instanceof TAuthorizationException) {
        this.failure = args;
        return;
    }
    if (args instanceof TInvocationException) {
        this.serverError = args;
        return;
    }
    if (args) {
      if (args.failure !== undefined && args.failure !== null) {
        this.failure = args.failure;
      }
      if (args.serverError !== undefined && args.serverError !== null) {
        this.serverError = args.serverError;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.failure = new TAuthorizationException();
          this.failure.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.serverError = new TInvocationException();
          this.serverError.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('SatelliteServer_setUserConfig_result');
    if (this.failure !== null && this.failure !== undefined) {
      output.writeFieldBegin('failure', Thrift.Type.STRUCT, 1);
      this.failure.write(output);
      output.writeFieldEnd();
    }
    if (this.serverError !== null && this.serverError !== undefined) {
      output.writeFieldBegin('serverError', Thrift.Type.STRUCT, 2);
      this.serverError.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
SatelliteServer_getOperatingSystems_args = class {
  constructor(args) {
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      input.skip(ftype);
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('SatelliteServer_getOperatingSystems_args');
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
SatelliteServer_getOperatingSystems_result = class {
  constructor(args) {
    this.success = null;
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = Thrift.copyList(args.success, [OperatingSystem]);
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.LIST) {
          this.success = [];
          const _rtmp3203 = input.readListBegin();
          const _size202 = _rtmp3203.size || 0;
          for (let _i204 = 0; _i204 < _size202; ++_i204) {
            let elem205 = null;
            elem205 = new OperatingSystem();
            elem205.read(input);
            this.success.push(elem205);
          }
          input.readListEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 0:
          input.skip(ftype);
          break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('SatelliteServer_getOperatingSystems_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.LIST, 0);
      output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
      for (let iter206 in this.success) {
        if (this.success.hasOwnProperty(iter206)) {
          iter206 = this.success[iter206];
          iter206.write(output);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
SatelliteServer_getVirtualizers_args = class {
  constructor(args) {
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      input.skip(ftype);
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('SatelliteServer_getVirtualizers_args');
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
SatelliteServer_getVirtualizers_result = class {
  constructor(args) {
    this.success = null;
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = Thrift.copyList(args.success, [Virtualizer]);
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.LIST) {
          this.success = [];
          const _rtmp3208 = input.readListBegin();
          const _size207 = _rtmp3208.size || 0;
          for (let _i209 = 0; _i209 < _size207; ++_i209) {
            let elem210 = null;
            elem210 = new Virtualizer();
            elem210.read(input);
            this.success.push(elem210);
          }
          input.readListEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 0:
          input.skip(ftype);
          break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('SatelliteServer_getVirtualizers_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.LIST, 0);
      output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
      for (let iter211 in this.success) {
        if (this.success.hasOwnProperty(iter211)) {
          iter211 = this.success[iter211];
          iter211.write(output);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
SatelliteServer_getAllOrganizations_args = class {
  constructor(args) {
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      input.skip(ftype);
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('SatelliteServer_getAllOrganizations_args');
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
SatelliteServer_getAllOrganizations_result = class {
  constructor(args) {
    this.success = null;
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = Thrift.copyList(args.success, [Organization]);
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.LIST) {
          this.success = [];
          const _rtmp3213 = input.readListBegin();
          const _size212 = _rtmp3213.size || 0;
          for (let _i214 = 0; _i214 < _size212; ++_i214) {
            let elem215 = null;
            elem215 = new Organization();
            elem215.read(input);
            this.success.push(elem215);
          }
          input.readListEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 0:
          input.skip(ftype);
          break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('SatelliteServer_getAllOrganizations_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.LIST, 0);
      output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
      for (let iter216 in this.success) {
        if (this.success.hasOwnProperty(iter216)) {
          iter216 = this.success[iter216];
          iter216.write(output);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
SatelliteServer_getLocations_args = class {
  constructor(args) {
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      input.skip(ftype);
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('SatelliteServer_getLocations_args');
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
SatelliteServer_getLocations_result = class {
  constructor(args) {
    this.success = null;
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = Thrift.copyList(args.success, [Location]);
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.LIST) {
          this.success = [];
          const _rtmp3218 = input.readListBegin();
          const _size217 = _rtmp3218.size || 0;
          for (let _i219 = 0; _i219 < _size217; ++_i219) {
            let elem220 = null;
            elem220 = new Location();
            elem220.read(input);
            this.success.push(elem220);
          }
          input.readListEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 0:
          input.skip(ftype);
          break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('SatelliteServer_getLocations_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.LIST, 0);
      output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
      for (let iter221 in this.success) {
        if (this.success.hasOwnProperty(iter221)) {
          iter221 = this.success[iter221];
          iter221.write(output);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
SatelliteServer_getStatus_args = class {
  constructor(args) {
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      input.skip(ftype);
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('SatelliteServer_getStatus_args');
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
SatelliteServer_getStatus_result = class {
  constructor(args) {
    this.success = null;
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = new SatelliteStatus(args.success);
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.STRUCT) {
          this.success = new SatelliteStatus();
          this.success.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 0:
          input.skip(ftype);
          break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('SatelliteServer_getStatus_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
      this.success.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
SatelliteServer_getImageList_args = class {
  constructor(args) {
    this.userToken = null;
    this.tagSearch = null;
    this.page = null;
    if (args) {
      if (args.userToken !== undefined && args.userToken !== null) {
        this.userToken = args.userToken;
      }
      if (args.tagSearch !== undefined && args.tagSearch !== null) {
        this.tagSearch = Thrift.copyList(args.tagSearch, [null]);
      }
      if (args.page !== undefined && args.page !== null) {
        this.page = args.page;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.userToken = input.readString().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.LIST) {
          this.tagSearch = [];
          const _rtmp3223 = input.readListBegin();
          const _size222 = _rtmp3223.size || 0;
          for (let _i224 = 0; _i224 < _size222; ++_i224) {
            let elem225 = null;
            elem225 = input.readString().value;
            this.tagSearch.push(elem225);
          }
          input.readListEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.I32) {
          this.page = input.readI32().value;
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('SatelliteServer_getImageList_args');
    if (this.userToken !== null && this.userToken !== undefined) {
      output.writeFieldBegin('userToken', Thrift.Type.STRING, 1);
      output.writeString(this.userToken);
      output.writeFieldEnd();
    }
    if (this.tagSearch !== null && this.tagSearch !== undefined) {
      output.writeFieldBegin('tagSearch', Thrift.Type.LIST, 2);
      output.writeListBegin(Thrift.Type.STRING, this.tagSearch.length);
      for (let iter226 in this.tagSearch) {
        if (this.tagSearch.hasOwnProperty(iter226)) {
          iter226 = this.tagSearch[iter226];
          output.writeString(iter226);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    if (this.page !== null && this.page !== undefined) {
      output.writeFieldBegin('page', Thrift.Type.I32, 3);
      output.writeI32(this.page);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
SatelliteServer_getImageList_result = class {
  constructor(args) {
    this.success = null;
    this.authError = null;
    this.serverError = null;
    if (args instanceof TAuthorizationException) {
        this.authError = args;
        return;
    }
    if (args instanceof TInvocationException) {
        this.serverError = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = Thrift.copyList(args.success, [ImageSummaryRead]);
      }
      if (args.authError !== undefined && args.authError !== null) {
        this.authError = args.authError;
      }
      if (args.serverError !== undefined && args.serverError !== null) {
        this.serverError = args.serverError;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.LIST) {
          this.success = [];
          const _rtmp3228 = input.readListBegin();
          const _size227 = _rtmp3228.size || 0;
          for (let _i229 = 0; _i229 < _size227; ++_i229) {
            let elem230 = null;
            elem230 = new ImageSummaryRead();
            elem230.read(input);
            this.success.push(elem230);
          }
          input.readListEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.authError = new TAuthorizationException();
          this.authError.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.serverError = new TInvocationException();
          this.serverError.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('SatelliteServer_getImageList_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.LIST, 0);
      output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
      for (let iter231 in this.success) {
        if (this.success.hasOwnProperty(iter231)) {
          iter231 = this.success[iter231];
          iter231.write(output);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    if (this.authError !== null && this.authError !== undefined) {
      output.writeFieldBegin('authError', Thrift.Type.STRUCT, 1);
      this.authError.write(output);
      output.writeFieldEnd();
    }
    if (this.serverError !== null && this.serverError !== undefined) {
      output.writeFieldBegin('serverError', Thrift.Type.STRUCT, 2);
      this.serverError.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
SatelliteServer_getImageDetails_args = class {
  constructor(args) {
    this.userToken = null;
    this.imageBaseId = null;
    if (args) {
      if (args.userToken !== undefined && args.userToken !== null) {
        this.userToken = args.userToken;
      }
      if (args.imageBaseId !== undefined && args.imageBaseId !== null) {
        this.imageBaseId = args.imageBaseId;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.userToken = input.readString().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRING) {
          this.imageBaseId = input.readString().value;
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('SatelliteServer_getImageDetails_args');
    if (this.userToken !== null && this.userToken !== undefined) {
      output.writeFieldBegin('userToken', Thrift.Type.STRING, 1);
      output.writeString(this.userToken);
      output.writeFieldEnd();
    }
    if (this.imageBaseId !== null && this.imageBaseId !== undefined) {
      output.writeFieldBegin('imageBaseId', Thrift.Type.STRING, 2);
      output.writeString(this.imageBaseId);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
SatelliteServer_getImageDetails_result = class {
  constructor(args) {
    this.success = null;
    this.authError = null;
    this.notFound = null;
    this.serverError = null;
    if (args instanceof TAuthorizationException) {
        this.authError = args;
        return;
    }
    if (args instanceof TNotFoundException) {
        this.notFound = args;
        return;
    }
    if (args instanceof TInvocationException) {
        this.serverError = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = new ImageDetailsRead(args.success);
      }
      if (args.authError !== undefined && args.authError !== null) {
        this.authError = args.authError;
      }
      if (args.notFound !== undefined && args.notFound !== null) {
        this.notFound = args.notFound;
      }
      if (args.serverError !== undefined && args.serverError !== null) {
        this.serverError = args.serverError;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.STRUCT) {
          this.success = new ImageDetailsRead();
          this.success.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.authError = new TAuthorizationException();
          this.authError.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.notFound = new TNotFoundException();
          this.notFound.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.serverError = new TInvocationException();
          this.serverError.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('SatelliteServer_getImageDetails_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
      this.success.write(output);
      output.writeFieldEnd();
    }
    if (this.authError !== null && this.authError !== undefined) {
      output.writeFieldBegin('authError', Thrift.Type.STRUCT, 1);
      this.authError.write(output);
      output.writeFieldEnd();
    }
    if (this.notFound !== null && this.notFound !== undefined) {
      output.writeFieldBegin('notFound', Thrift.Type.STRUCT, 2);
      this.notFound.write(output);
      output.writeFieldEnd();
    }
    if (this.serverError !== null && this.serverError !== undefined) {
      output.writeFieldBegin('serverError', Thrift.Type.STRUCT, 3);
      this.serverError.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
SatelliteServer_createImage_args = class {
  constructor(args) {
    this.userToken = null;
    this.imageName = null;
    if (args) {
      if (args.userToken !== undefined && args.userToken !== null) {
        this.userToken = args.userToken;
      }
      if (args.imageName !== undefined && args.imageName !== null) {
        this.imageName = args.imageName;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.userToken = input.readString().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRING) {
          this.imageName = input.readString().value;
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('SatelliteServer_createImage_args');
    if (this.userToken !== null && this.userToken !== undefined) {
      output.writeFieldBegin('userToken', Thrift.Type.STRING, 1);
      output.writeString(this.userToken);
      output.writeFieldEnd();
    }
    if (this.imageName !== null && this.imageName !== undefined) {
      output.writeFieldBegin('imageName', Thrift.Type.STRING, 2);
      output.writeString(this.imageName);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
SatelliteServer_createImage_result = class {
  constructor(args) {
    this.success = null;
    this.authError = null;
    this.error = null;
    if (args instanceof TAuthorizationException) {
        this.authError = args;
        return;
    }
    if (args instanceof TInvocationException) {
        this.error = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = args.success;
      }
      if (args.authError !== undefined && args.authError !== null) {
        this.authError = args.authError;
      }
      if (args.error !== undefined && args.error !== null) {
        this.error = args.error;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.STRING) {
          this.success = input.readString().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.authError = new TAuthorizationException();
          this.authError.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.error = new TInvocationException();
          this.error.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('SatelliteServer_createImage_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.STRING, 0);
      output.writeString(this.success);
      output.writeFieldEnd();
    }
    if (this.authError !== null && this.authError !== undefined) {
      output.writeFieldBegin('authError', Thrift.Type.STRUCT, 1);
      this.authError.write(output);
      output.writeFieldEnd();
    }
    if (this.error !== null && this.error !== undefined) {
      output.writeFieldBegin('error', Thrift.Type.STRUCT, 2);
      this.error.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
SatelliteServer_updateImageBase_args = class {
  constructor(args) {
    this.userToken = null;
    this.imageBaseId = null;
    this.image = null;
    if (args) {
      if (args.userToken !== undefined && args.userToken !== null) {
        this.userToken = args.userToken;
      }
      if (args.imageBaseId !== undefined && args.imageBaseId !== null) {
        this.imageBaseId = args.imageBaseId;
      }
      if (args.image !== undefined && args.image !== null) {
        this.image = new ImageBaseWrite(args.image);
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.userToken = input.readString().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRING) {
          this.imageBaseId = input.readString().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.image = new ImageBaseWrite();
          this.image.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('SatelliteServer_updateImageBase_args');
    if (this.userToken !== null && this.userToken !== undefined) {
      output.writeFieldBegin('userToken', Thrift.Type.STRING, 1);
      output.writeString(this.userToken);
      output.writeFieldEnd();
    }
    if (this.imageBaseId !== null && this.imageBaseId !== undefined) {
      output.writeFieldBegin('imageBaseId', Thrift.Type.STRING, 2);
      output.writeString(this.imageBaseId);
      output.writeFieldEnd();
    }
    if (this.image !== null && this.image !== undefined) {
      output.writeFieldBegin('image', Thrift.Type.STRUCT, 3);
      this.image.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
SatelliteServer_updateImageBase_result = class {
  constructor(args) {
    this.authError = null;
    this.notFound = null;
    this.imgError = null;
    if (args instanceof TAuthorizationException) {
        this.authError = args;
        return;
    }
    if (args instanceof TNotFoundException) {
        this.notFound = args;
        return;
    }
    if (args instanceof TInvocationException) {
        this.imgError = args;
        return;
    }
    if (args) {
      if (args.authError !== undefined && args.authError !== null) {
        this.authError = args.authError;
      }
      if (args.notFound !== undefined && args.notFound !== null) {
        this.notFound = args.notFound;
      }
      if (args.imgError !== undefined && args.imgError !== null) {
        this.imgError = args.imgError;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.authError = new TAuthorizationException();
          this.authError.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.notFound = new TNotFoundException();
          this.notFound.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.imgError = new TInvocationException();
          this.imgError.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('SatelliteServer_updateImageBase_result');
    if (this.authError !== null && this.authError !== undefined) {
      output.writeFieldBegin('authError', Thrift.Type.STRUCT, 1);
      this.authError.write(output);
      output.writeFieldEnd();
    }
    if (this.notFound !== null && this.notFound !== undefined) {
      output.writeFieldBegin('notFound', Thrift.Type.STRUCT, 2);
      this.notFound.write(output);
      output.writeFieldEnd();
    }
    if (this.imgError !== null && this.imgError !== undefined) {
      output.writeFieldBegin('imgError', Thrift.Type.STRUCT, 3);
      this.imgError.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
SatelliteServer_updateImageVersion_args = class {
  constructor(args) {
    this.userToken = null;
    this.imageVersionId = null;
    this.image = null;
    if (args) {
      if (args.userToken !== undefined && args.userToken !== null) {
        this.userToken = args.userToken;
      }
      if (args.imageVersionId !== undefined && args.imageVersionId !== null) {
        this.imageVersionId = args.imageVersionId;
      }
      if (args.image !== undefined && args.image !== null) {
        this.image = new ImageVersionWrite(args.image);
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.userToken = input.readString().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRING) {
          this.imageVersionId = input.readString().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.image = new ImageVersionWrite();
          this.image.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('SatelliteServer_updateImageVersion_args');
    if (this.userToken !== null && this.userToken !== undefined) {
      output.writeFieldBegin('userToken', Thrift.Type.STRING, 1);
      output.writeString(this.userToken);
      output.writeFieldEnd();
    }
    if (this.imageVersionId !== null && this.imageVersionId !== undefined) {
      output.writeFieldBegin('imageVersionId', Thrift.Type.STRING, 2);
      output.writeString(this.imageVersionId);
      output.writeFieldEnd();
    }
    if (this.image !== null && this.image !== undefined) {
      output.writeFieldBegin('image', Thrift.Type.STRUCT, 3);
      this.image.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
SatelliteServer_updateImageVersion_result = class {
  constructor(args) {
    this.authError = null;
    this.notFound = null;
    this.imgError = null;
    if (args instanceof TAuthorizationException) {
        this.authError = args;
        return;
    }
    if (args instanceof TNotFoundException) {
        this.notFound = args;
        return;
    }
    if (args instanceof TInvocationException) {
        this.imgError = args;
        return;
    }
    if (args) {
      if (args.authError !== undefined && args.authError !== null) {
        this.authError = args.authError;
      }
      if (args.notFound !== undefined && args.notFound !== null) {
        this.notFound = args.notFound;
      }
      if (args.imgError !== undefined && args.imgError !== null) {
        this.imgError = args.imgError;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.authError = new TAuthorizationException();
          this.authError.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.notFound = new TNotFoundException();
          this.notFound.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.imgError = new TInvocationException();
          this.imgError.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('SatelliteServer_updateImageVersion_result');
    if (this.authError !== null && this.authError !== undefined) {
      output.writeFieldBegin('authError', Thrift.Type.STRUCT, 1);
      this.authError.write(output);
      output.writeFieldEnd();
    }
    if (this.notFound !== null && this.notFound !== undefined) {
      output.writeFieldBegin('notFound', Thrift.Type.STRUCT, 2);
      this.notFound.write(output);
      output.writeFieldEnd();
    }
    if (this.imgError !== null && this.imgError !== undefined) {
      output.writeFieldBegin('imgError', Thrift.Type.STRUCT, 3);
      this.imgError.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
SatelliteServer_deleteImageVersion_args = class {
  constructor(args) {
    this.userToken = null;
    this.imageVersionId = null;
    if (args) {
      if (args.userToken !== undefined && args.userToken !== null) {
        this.userToken = args.userToken;
      }
      if (args.imageVersionId !== undefined && args.imageVersionId !== null) {
        this.imageVersionId = args.imageVersionId;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.userToken = input.readString().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRING) {
          this.imageVersionId = input.readString().value;
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('SatelliteServer_deleteImageVersion_args');
    if (this.userToken !== null && this.userToken !== undefined) {
      output.writeFieldBegin('userToken', Thrift.Type.STRING, 1);
      output.writeString(this.userToken);
      output.writeFieldEnd();
    }
    if (this.imageVersionId !== null && this.imageVersionId !== undefined) {
      output.writeFieldBegin('imageVersionId', Thrift.Type.STRING, 2);
      output.writeString(this.imageVersionId);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
SatelliteServer_deleteImageVersion_result = class {
  constructor(args) {
    this.authError = null;
    this.notFound = null;
    this.serverError = null;
    if (args instanceof TAuthorizationException) {
        this.authError = args;
        return;
    }
    if (args instanceof TNotFoundException) {
        this.notFound = args;
        return;
    }
    if (args instanceof TInvocationException) {
        this.serverError = args;
        return;
    }
    if (args) {
      if (args.authError !== undefined && args.authError !== null) {
        this.authError = args.authError;
      }
      if (args.notFound !== undefined && args.notFound !== null) {
        this.notFound = args.notFound;
      }
      if (args.serverError !== undefined && args.serverError !== null) {
        this.serverError = args.serverError;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.authError = new TAuthorizationException();
          this.authError.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.notFound = new TNotFoundException();
          this.notFound.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.serverError = new TInvocationException();
          this.serverError.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('SatelliteServer_deleteImageVersion_result');
    if (this.authError !== null && this.authError !== undefined) {
      output.writeFieldBegin('authError', Thrift.Type.STRUCT, 1);
      this.authError.write(output);
      output.writeFieldEnd();
    }
    if (this.notFound !== null && this.notFound !== undefined) {
      output.writeFieldBegin('notFound', Thrift.Type.STRUCT, 2);
      this.notFound.write(output);
      output.writeFieldEnd();
    }
    if (this.serverError !== null && this.serverError !== undefined) {
      output.writeFieldBegin('serverError', Thrift.Type.STRUCT, 3);
      this.serverError.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
SatelliteServer_deleteImageBase_args = class {
  constructor(args) {
    this.userToken = null;
    this.imageBaseId = null;
    if (args) {
      if (args.userToken !== undefined && args.userToken !== null) {
        this.userToken = args.userToken;
      }
      if (args.imageBaseId !== undefined && args.imageBaseId !== null) {
        this.imageBaseId = args.imageBaseId;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.userToken = input.readString().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRING) {
          this.imageBaseId = input.readString().value;
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('SatelliteServer_deleteImageBase_args');
    if (this.userToken !== null && this.userToken !== undefined) {
      output.writeFieldBegin('userToken', Thrift.Type.STRING, 1);
      output.writeString(this.userToken);
      output.writeFieldEnd();
    }
    if (this.imageBaseId !== null && this.imageBaseId !== undefined) {
      output.writeFieldBegin('imageBaseId', Thrift.Type.STRING, 2);
      output.writeString(this.imageBaseId);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
SatelliteServer_deleteImageBase_result = class {
  constructor(args) {
    this.authError = null;
    this.notFound = null;
    this.serverError = null;
    if (args instanceof TAuthorizationException) {
        this.authError = args;
        return;
    }
    if (args instanceof TNotFoundException) {
        this.notFound = args;
        return;
    }
    if (args instanceof TInvocationException) {
        this.serverError = args;
        return;
    }
    if (args) {
      if (args.authError !== undefined && args.authError !== null) {
        this.authError = args.authError;
      }
      if (args.notFound !== undefined && args.notFound !== null) {
        this.notFound = args.notFound;
      }
      if (args.serverError !== undefined && args.serverError !== null) {
        this.serverError = args.serverError;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.authError = new TAuthorizationException();
          this.authError.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.notFound = new TNotFoundException();
          this.notFound.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.serverError = new TInvocationException();
          this.serverError.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('SatelliteServer_deleteImageBase_result');
    if (this.authError !== null && this.authError !== undefined) {
      output.writeFieldBegin('authError', Thrift.Type.STRUCT, 1);
      this.authError.write(output);
      output.writeFieldEnd();
    }
    if (this.notFound !== null && this.notFound !== undefined) {
      output.writeFieldBegin('notFound', Thrift.Type.STRUCT, 2);
      this.notFound.write(output);
      output.writeFieldEnd();
    }
    if (this.serverError !== null && this.serverError !== undefined) {
      output.writeFieldBegin('serverError', Thrift.Type.STRUCT, 3);
      this.serverError.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
SatelliteServer_writeImagePermissions_args = class {
  constructor(args) {
    this.userToken = null;
    this.imageBaseId = null;
    this.permissions = null;
    if (args) {
      if (args.userToken !== undefined && args.userToken !== null) {
        this.userToken = args.userToken;
      }
      if (args.imageBaseId !== undefined && args.imageBaseId !== null) {
        this.imageBaseId = args.imageBaseId;
      }
      if (args.permissions !== undefined && args.permissions !== null) {
        this.permissions = Thrift.copyMap(args.permissions, [ImagePermissions]);
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.userToken = input.readString().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRING) {
          this.imageBaseId = input.readString().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.MAP) {
          this.permissions = {};
          const _rtmp3233 = input.readMapBegin();
          const _size232 = _rtmp3233.size || 0;
          for (let _i234 = 0; _i234 < _size232; ++_i234) {
            if (_i234 > 0 ) {
              if (input.rstack.length > input.rpos[input.rpos.length -1] + 1) {
                input.rstack.pop();
              }
            }
            let key235 = null;
            let val236 = null;
            key235 = input.readString().value;
            val236 = new ImagePermissions();
            val236.read(input);
            this.permissions[key235] = val236;
          }
          input.readMapEnd();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('SatelliteServer_writeImagePermissions_args');
    if (this.userToken !== null && this.userToken !== undefined) {
      output.writeFieldBegin('userToken', Thrift.Type.STRING, 1);
      output.writeString(this.userToken);
      output.writeFieldEnd();
    }
    if (this.imageBaseId !== null && this.imageBaseId !== undefined) {
      output.writeFieldBegin('imageBaseId', Thrift.Type.STRING, 2);
      output.writeString(this.imageBaseId);
      output.writeFieldEnd();
    }
    if (this.permissions !== null && this.permissions !== undefined) {
      output.writeFieldBegin('permissions', Thrift.Type.MAP, 3);
      output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRUCT, Thrift.objectLength(this.permissions));
      for (let kiter237 in this.permissions) {
        if (this.permissions.hasOwnProperty(kiter237)) {
          let viter238 = this.permissions[kiter237];
          output.writeString(kiter237);
          viter238.write(output);
        }
      }
      output.writeMapEnd();
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
SatelliteServer_writeImagePermissions_result = class {
  constructor(args) {
    this.authError = null;
    this.notFound = null;
    this.serverError = null;
    if (args instanceof TAuthorizationException) {
        this.authError = args;
        return;
    }
    if (args instanceof TNotFoundException) {
        this.notFound = args;
        return;
    }
    if (args instanceof TInvocationException) {
        this.serverError = args;
        return;
    }
    if (args) {
      if (args.authError !== undefined && args.authError !== null) {
        this.authError = args.authError;
      }
      if (args.notFound !== undefined && args.notFound !== null) {
        this.notFound = args.notFound;
      }
      if (args.serverError !== undefined && args.serverError !== null) {
        this.serverError = args.serverError;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.authError = new TAuthorizationException();
          this.authError.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.notFound = new TNotFoundException();
          this.notFound.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.serverError = new TInvocationException();
          this.serverError.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('SatelliteServer_writeImagePermissions_result');
    if (this.authError !== null && this.authError !== undefined) {
      output.writeFieldBegin('authError', Thrift.Type.STRUCT, 1);
      this.authError.write(output);
      output.writeFieldEnd();
    }
    if (this.notFound !== null && this.notFound !== undefined) {
      output.writeFieldBegin('notFound', Thrift.Type.STRUCT, 2);
      this.notFound.write(output);
      output.writeFieldEnd();
    }
    if (this.serverError !== null && this.serverError !== undefined) {
      output.writeFieldBegin('serverError', Thrift.Type.STRUCT, 3);
      this.serverError.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
SatelliteServer_getImagePermissions_args = class {
  constructor(args) {
    this.userToken = null;
    this.imageBaseId = null;
    if (args) {
      if (args.userToken !== undefined && args.userToken !== null) {
        this.userToken = args.userToken;
      }
      if (args.imageBaseId !== undefined && args.imageBaseId !== null) {
        this.imageBaseId = args.imageBaseId;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.userToken = input.readString().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRING) {
          this.imageBaseId = input.readString().value;
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('SatelliteServer_getImagePermissions_args');
    if (this.userToken !== null && this.userToken !== undefined) {
      output.writeFieldBegin('userToken', Thrift.Type.STRING, 1);
      output.writeString(this.userToken);
      output.writeFieldEnd();
    }
    if (this.imageBaseId !== null && this.imageBaseId !== undefined) {
      output.writeFieldBegin('imageBaseId', Thrift.Type.STRING, 2);
      output.writeString(this.imageBaseId);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
SatelliteServer_getImagePermissions_result = class {
  constructor(args) {
    this.success = null;
    this.authError = null;
    this.notFound = null;
    this.serverError = null;
    if (args instanceof TAuthorizationException) {
        this.authError = args;
        return;
    }
    if (args instanceof TNotFoundException) {
        this.notFound = args;
        return;
    }
    if (args instanceof TInvocationException) {
        this.serverError = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = Thrift.copyMap(args.success, [ImagePermissions]);
      }
      if (args.authError !== undefined && args.authError !== null) {
        this.authError = args.authError;
      }
      if (args.notFound !== undefined && args.notFound !== null) {
        this.notFound = args.notFound;
      }
      if (args.serverError !== undefined && args.serverError !== null) {
        this.serverError = args.serverError;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.MAP) {
          this.success = {};
          const _rtmp3240 = input.readMapBegin();
          const _size239 = _rtmp3240.size || 0;
          for (let _i241 = 0; _i241 < _size239; ++_i241) {
            if (_i241 > 0 ) {
              if (input.rstack.length > input.rpos[input.rpos.length -1] + 1) {
                input.rstack.pop();
              }
            }
            let key242 = null;
            let val243 = null;
            key242 = input.readString().value;
            val243 = new ImagePermissions();
            val243.read(input);
            this.success[key242] = val243;
          }
          input.readMapEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.authError = new TAuthorizationException();
          this.authError.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.notFound = new TNotFoundException();
          this.notFound.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.serverError = new TInvocationException();
          this.serverError.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('SatelliteServer_getImagePermissions_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.MAP, 0);
      output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRUCT, Thrift.objectLength(this.success));
      for (let kiter244 in this.success) {
        if (this.success.hasOwnProperty(kiter244)) {
          let viter245 = this.success[kiter244];
          output.writeString(kiter244);
          viter245.write(output);
        }
      }
      output.writeMapEnd();
      output.writeFieldEnd();
    }
    if (this.authError !== null && this.authError !== undefined) {
      output.writeFieldBegin('authError', Thrift.Type.STRUCT, 1);
      this.authError.write(output);
      output.writeFieldEnd();
    }
    if (this.notFound !== null && this.notFound !== undefined) {
      output.writeFieldBegin('notFound', Thrift.Type.STRUCT, 2);
      this.notFound.write(output);
      output.writeFieldEnd();
    }
    if (this.serverError !== null && this.serverError !== undefined) {
      output.writeFieldBegin('serverError', Thrift.Type.STRUCT, 3);
      this.serverError.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
SatelliteServer_setImageOwner_args = class {
  constructor(args) {
    this.userToken = null;
    this.imageBaseId = null;
    this.newOwnerId = null;
    if (args) {
      if (args.userToken !== undefined && args.userToken !== null) {
        this.userToken = args.userToken;
      }
      if (args.imageBaseId !== undefined && args.imageBaseId !== null) {
        this.imageBaseId = args.imageBaseId;
      }
      if (args.newOwnerId !== undefined && args.newOwnerId !== null) {
        this.newOwnerId = args.newOwnerId;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.userToken = input.readString().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRING) {
          this.imageBaseId = input.readString().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRING) {
          this.newOwnerId = input.readString().value;
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('SatelliteServer_setImageOwner_args');
    if (this.userToken !== null && this.userToken !== undefined) {
      output.writeFieldBegin('userToken', Thrift.Type.STRING, 1);
      output.writeString(this.userToken);
      output.writeFieldEnd();
    }
    if (this.imageBaseId !== null && this.imageBaseId !== undefined) {
      output.writeFieldBegin('imageBaseId', Thrift.Type.STRING, 2);
      output.writeString(this.imageBaseId);
      output.writeFieldEnd();
    }
    if (this.newOwnerId !== null && this.newOwnerId !== undefined) {
      output.writeFieldBegin('newOwnerId', Thrift.Type.STRING, 3);
      output.writeString(this.newOwnerId);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
SatelliteServer_setImageOwner_result = class {
  constructor(args) {
    this.authError = null;
    this.notFound = null;
    this.serverError = null;
    if (args instanceof TAuthorizationException) {
        this.authError = args;
        return;
    }
    if (args instanceof TNotFoundException) {
        this.notFound = args;
        return;
    }
    if (args instanceof TInvocationException) {
        this.serverError = args;
        return;
    }
    if (args) {
      if (args.authError !== undefined && args.authError !== null) {
        this.authError = args.authError;
      }
      if (args.notFound !== undefined && args.notFound !== null) {
        this.notFound = args.notFound;
      }
      if (args.serverError !== undefined && args.serverError !== null) {
        this.serverError = args.serverError;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.authError = new TAuthorizationException();
          this.authError.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.notFound = new TNotFoundException();
          this.notFound.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.serverError = new TInvocationException();
          this.serverError.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('SatelliteServer_setImageOwner_result');
    if (this.authError !== null && this.authError !== undefined) {
      output.writeFieldBegin('authError', Thrift.Type.STRUCT, 1);
      this.authError.write(output);
      output.writeFieldEnd();
    }
    if (this.notFound !== null && this.notFound !== undefined) {
      output.writeFieldBegin('notFound', Thrift.Type.STRUCT, 2);
      this.notFound.write(output);
      output.writeFieldEnd();
    }
    if (this.serverError !== null && this.serverError !== undefined) {
      output.writeFieldBegin('serverError', Thrift.Type.STRUCT, 3);
      this.serverError.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
SatelliteServer_setImageVersionExpiry_args = class {
  constructor(args) {
    this.userToken = null;
    this.imageBaseId = null;
    this.expireTime = null;
    if (args) {
      if (args.userToken !== undefined && args.userToken !== null) {
        this.userToken = args.userToken;
      }
      if (args.imageBaseId !== undefined && args.imageBaseId !== null) {
        this.imageBaseId = args.imageBaseId;
      }
      if (args.expireTime !== undefined && args.expireTime !== null) {
        this.expireTime = args.expireTime;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.userToken = input.readString().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRING) {
          this.imageBaseId = input.readString().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.I64) {
          this.expireTime = input.readI64().value;
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('SatelliteServer_setImageVersionExpiry_args');
    if (this.userToken !== null && this.userToken !== undefined) {
      output.writeFieldBegin('userToken', Thrift.Type.STRING, 1);
      output.writeString(this.userToken);
      output.writeFieldEnd();
    }
    if (this.imageBaseId !== null && this.imageBaseId !== undefined) {
      output.writeFieldBegin('imageBaseId', Thrift.Type.STRING, 2);
      output.writeString(this.imageBaseId);
      output.writeFieldEnd();
    }
    if (this.expireTime !== null && this.expireTime !== undefined) {
      output.writeFieldBegin('expireTime', Thrift.Type.I64, 3);
      output.writeI64(this.expireTime);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
SatelliteServer_setImageVersionExpiry_result = class {
  constructor(args) {
    this.authError = null;
    this.notFound = null;
    this.serverError = null;
    this.dateError = null;
    if (args instanceof TAuthorizationException) {
        this.authError = args;
        return;
    }
    if (args instanceof TNotFoundException) {
        this.notFound = args;
        return;
    }
    if (args instanceof TInvocationException) {
        this.serverError = args;
        return;
    }
    if (args instanceof TInvalidDateParam) {
        this.dateError = args;
        return;
    }
    if (args) {
      if (args.authError !== undefined && args.authError !== null) {
        this.authError = args.authError;
      }
      if (args.notFound !== undefined && args.notFound !== null) {
        this.notFound = args.notFound;
      }
      if (args.serverError !== undefined && args.serverError !== null) {
        this.serverError = args.serverError;
      }
      if (args.dateError !== undefined && args.dateError !== null) {
        this.dateError = args.dateError;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.authError = new TAuthorizationException();
          this.authError.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.notFound = new TNotFoundException();
          this.notFound.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.serverError = new TInvocationException();
          this.serverError.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.dateError = new TInvalidDateParam();
          this.dateError.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('SatelliteServer_setImageVersionExpiry_result');
    if (this.authError !== null && this.authError !== undefined) {
      output.writeFieldBegin('authError', Thrift.Type.STRUCT, 1);
      this.authError.write(output);
      output.writeFieldEnd();
    }
    if (this.notFound !== null && this.notFound !== undefined) {
      output.writeFieldBegin('notFound', Thrift.Type.STRUCT, 2);
      this.notFound.write(output);
      output.writeFieldEnd();
    }
    if (this.serverError !== null && this.serverError !== undefined) {
      output.writeFieldBegin('serverError', Thrift.Type.STRUCT, 3);
      this.serverError.write(output);
      output.writeFieldEnd();
    }
    if (this.dateError !== null && this.dateError !== undefined) {
      output.writeFieldBegin('dateError', Thrift.Type.STRUCT, 4);
      this.dateError.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
SatelliteServer_getImageVersionVirtConfig_args = class {
  constructor(args) {
    this.userToken = null;
    this.imageVersionId = null;
    if (args) {
      if (args.userToken !== undefined && args.userToken !== null) {
        this.userToken = args.userToken;
      }
      if (args.imageVersionId !== undefined && args.imageVersionId !== null) {
        this.imageVersionId = args.imageVersionId;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.userToken = input.readString().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRING) {
          this.imageVersionId = input.readString().value;
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('SatelliteServer_getImageVersionVirtConfig_args');
    if (this.userToken !== null && this.userToken !== undefined) {
      output.writeFieldBegin('userToken', Thrift.Type.STRING, 1);
      output.writeString(this.userToken);
      output.writeFieldEnd();
    }
    if (this.imageVersionId !== null && this.imageVersionId !== undefined) {
      output.writeFieldBegin('imageVersionId', Thrift.Type.STRING, 2);
      output.writeString(this.imageVersionId);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
SatelliteServer_getImageVersionVirtConfig_result = class {
  constructor(args) {
    this.success = null;
    this.authError = null;
    this.notFound = null;
    this.serverError = null;
    if (args instanceof TAuthorizationException) {
        this.authError = args;
        return;
    }
    if (args instanceof TNotFoundException) {
        this.notFound = args;
        return;
    }
    if (args instanceof TInvocationException) {
        this.serverError = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = args.success;
      }
      if (args.authError !== undefined && args.authError !== null) {
        this.authError = args.authError;
      }
      if (args.notFound !== undefined && args.notFound !== null) {
        this.notFound = args.notFound;
      }
      if (args.serverError !== undefined && args.serverError !== null) {
        this.serverError = args.serverError;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.STRING) {
          this.success = input.readBinary().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.authError = new TAuthorizationException();
          this.authError.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.notFound = new TNotFoundException();
          this.notFound.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.serverError = new TInvocationException();
          this.serverError.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('SatelliteServer_getImageVersionVirtConfig_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.STRING, 0);
      output.writeBinary(this.success);
      output.writeFieldEnd();
    }
    if (this.authError !== null && this.authError !== undefined) {
      output.writeFieldBegin('authError', Thrift.Type.STRUCT, 1);
      this.authError.write(output);
      output.writeFieldEnd();
    }
    if (this.notFound !== null && this.notFound !== undefined) {
      output.writeFieldBegin('notFound', Thrift.Type.STRUCT, 2);
      this.notFound.write(output);
      output.writeFieldEnd();
    }
    if (this.serverError !== null && this.serverError !== undefined) {
      output.writeFieldBegin('serverError', Thrift.Type.STRUCT, 3);
      this.serverError.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
SatelliteServer_setImageVersionVirtConfig_args = class {
  constructor(args) {
    this.userToken = null;
    this.imageVersionId = null;
    this.meta = null;
    if (args) {
      if (args.userToken !== undefined && args.userToken !== null) {
        this.userToken = args.userToken;
      }
      if (args.imageVersionId !== undefined && args.imageVersionId !== null) {
        this.imageVersionId = args.imageVersionId;
      }
      if (args.meta !== undefined && args.meta !== null) {
        this.meta = args.meta;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.userToken = input.readString().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRING) {
          this.imageVersionId = input.readString().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRING) {
          this.meta = input.readBinary().value;
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('SatelliteServer_setImageVersionVirtConfig_args');
    if (this.userToken !== null && this.userToken !== undefined) {
      output.writeFieldBegin('userToken', Thrift.Type.STRING, 1);
      output.writeString(this.userToken);
      output.writeFieldEnd();
    }
    if (this.imageVersionId !== null && this.imageVersionId !== undefined) {
      output.writeFieldBegin('imageVersionId', Thrift.Type.STRING, 2);
      output.writeString(this.imageVersionId);
      output.writeFieldEnd();
    }
    if (this.meta !== null && this.meta !== undefined) {
      output.writeFieldBegin('meta', Thrift.Type.STRING, 3);
      output.writeBinary(this.meta);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
SatelliteServer_setImageVersionVirtConfig_result = class {
  constructor(args) {
    this.authError = null;
    this.notFound = null;
    this.serverError = null;
    if (args instanceof TAuthorizationException) {
        this.authError = args;
        return;
    }
    if (args instanceof TNotFoundException) {
        this.notFound = args;
        return;
    }
    if (args instanceof TInvocationException) {
        this.serverError = args;
        return;
    }
    if (args) {
      if (args.authError !== undefined && args.authError !== null) {
        this.authError = args.authError;
      }
      if (args.notFound !== undefined && args.notFound !== null) {
        this.notFound = args.notFound;
      }
      if (args.serverError !== undefined && args.serverError !== null) {
        this.serverError = args.serverError;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.authError = new TAuthorizationException();
          this.authError.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.notFound = new TNotFoundException();
          this.notFound.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.serverError = new TInvocationException();
          this.serverError.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('SatelliteServer_setImageVersionVirtConfig_result');
    if (this.authError !== null && this.authError !== undefined) {
      output.writeFieldBegin('authError', Thrift.Type.STRUCT, 1);
      this.authError.write(output);
      output.writeFieldEnd();
    }
    if (this.notFound !== null && this.notFound !== undefined) {
      output.writeFieldBegin('notFound', Thrift.Type.STRUCT, 2);
      this.notFound.write(output);
      output.writeFieldEnd();
    }
    if (this.serverError !== null && this.serverError !== undefined) {
      output.writeFieldBegin('serverError', Thrift.Type.STRUCT, 3);
      this.serverError.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
SatelliteServer_requestImageReplication_args = class {
  constructor(args) {
    this.userToken = null;
    this.imageVersionId = null;
    if (args) {
      if (args.userToken !== undefined && args.userToken !== null) {
        this.userToken = args.userToken;
      }
      if (args.imageVersionId !== undefined && args.imageVersionId !== null) {
        this.imageVersionId = args.imageVersionId;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.userToken = input.readString().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRING) {
          this.imageVersionId = input.readString().value;
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('SatelliteServer_requestImageReplication_args');
    if (this.userToken !== null && this.userToken !== undefined) {
      output.writeFieldBegin('userToken', Thrift.Type.STRING, 1);
      output.writeString(this.userToken);
      output.writeFieldEnd();
    }
    if (this.imageVersionId !== null && this.imageVersionId !== undefined) {
      output.writeFieldBegin('imageVersionId', Thrift.Type.STRING, 2);
      output.writeString(this.imageVersionId);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
SatelliteServer_requestImageReplication_result = class {
  constructor(args) {
    this.success = null;
    this.authError = null;
    this.notFound = null;
    this.serverError = null;
    if (args instanceof TAuthorizationException) {
        this.authError = args;
        return;
    }
    if (args instanceof TNotFoundException) {
        this.notFound = args;
        return;
    }
    if (args instanceof TInvocationException) {
        this.serverError = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = args.success;
      }
      if (args.authError !== undefined && args.authError !== null) {
        this.authError = args.authError;
      }
      if (args.notFound !== undefined && args.notFound !== null) {
        this.notFound = args.notFound;
      }
      if (args.serverError !== undefined && args.serverError !== null) {
        this.serverError = args.serverError;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.STRING) {
          this.success = input.readString().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.authError = new TAuthorizationException();
          this.authError.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.notFound = new TNotFoundException();
          this.notFound.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.serverError = new TInvocationException();
          this.serverError.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('SatelliteServer_requestImageReplication_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.STRING, 0);
      output.writeString(this.success);
      output.writeFieldEnd();
    }
    if (this.authError !== null && this.authError !== undefined) {
      output.writeFieldBegin('authError', Thrift.Type.STRUCT, 1);
      this.authError.write(output);
      output.writeFieldEnd();
    }
    if (this.notFound !== null && this.notFound !== undefined) {
      output.writeFieldBegin('notFound', Thrift.Type.STRUCT, 2);
      this.notFound.write(output);
      output.writeFieldEnd();
    }
    if (this.serverError !== null && this.serverError !== undefined) {
      output.writeFieldBegin('serverError', Thrift.Type.STRUCT, 3);
      this.serverError.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
SatelliteServer_publishImageVersion_args = class {
  constructor(args) {
    this.userToken = null;
    this.imageVersionId = null;
    if (args) {
      if (args.userToken !== undefined && args.userToken !== null) {
        this.userToken = args.userToken;
      }
      if (args.imageVersionId !== undefined && args.imageVersionId !== null) {
        this.imageVersionId = args.imageVersionId;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.userToken = input.readString().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRING) {
          this.imageVersionId = input.readString().value;
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('SatelliteServer_publishImageVersion_args');
    if (this.userToken !== null && this.userToken !== undefined) {
      output.writeFieldBegin('userToken', Thrift.Type.STRING, 1);
      output.writeString(this.userToken);
      output.writeFieldEnd();
    }
    if (this.imageVersionId !== null && this.imageVersionId !== undefined) {
      output.writeFieldBegin('imageVersionId', Thrift.Type.STRING, 2);
      output.writeString(this.imageVersionId);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
SatelliteServer_publishImageVersion_result = class {
  constructor(args) {
    this.success = null;
    this.authError = null;
    this.notFound = null;
    this.serverError = null;
    this.tre = null;
    if (args instanceof TAuthorizationException) {
        this.authError = args;
        return;
    }
    if (args instanceof TNotFoundException) {
        this.notFound = args;
        return;
    }
    if (args instanceof TInvocationException) {
        this.serverError = args;
        return;
    }
    if (args instanceof TTransferRejectedException) {
        this.tre = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = args.success;
      }
      if (args.authError !== undefined && args.authError !== null) {
        this.authError = args.authError;
      }
      if (args.notFound !== undefined && args.notFound !== null) {
        this.notFound = args.notFound;
      }
      if (args.serverError !== undefined && args.serverError !== null) {
        this.serverError = args.serverError;
      }
      if (args.tre !== undefined && args.tre !== null) {
        this.tre = args.tre;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.STRING) {
          this.success = input.readString().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.authError = new TAuthorizationException();
          this.authError.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.notFound = new TNotFoundException();
          this.notFound.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.serverError = new TInvocationException();
          this.serverError.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.tre = new TTransferRejectedException();
          this.tre.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('SatelliteServer_publishImageVersion_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.STRING, 0);
      output.writeString(this.success);
      output.writeFieldEnd();
    }
    if (this.authError !== null && this.authError !== undefined) {
      output.writeFieldBegin('authError', Thrift.Type.STRUCT, 1);
      this.authError.write(output);
      output.writeFieldEnd();
    }
    if (this.notFound !== null && this.notFound !== undefined) {
      output.writeFieldBegin('notFound', Thrift.Type.STRUCT, 2);
      this.notFound.write(output);
      output.writeFieldEnd();
    }
    if (this.serverError !== null && this.serverError !== undefined) {
      output.writeFieldBegin('serverError', Thrift.Type.STRUCT, 3);
      this.serverError.write(output);
      output.writeFieldEnd();
    }
    if (this.tre !== null && this.tre !== undefined) {
      output.writeFieldBegin('tre', Thrift.Type.STRUCT, 4);
      this.tre.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
SatelliteServer_createLecture_args = class {
  constructor(args) {
    this.userToken = null;
    this.lecture = null;
    if (args) {
      if (args.userToken !== undefined && args.userToken !== null) {
        this.userToken = args.userToken;
      }
      if (args.lecture !== undefined && args.lecture !== null) {
        this.lecture = new LectureWrite(args.lecture);
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.userToken = input.readString().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.lecture = new LectureWrite();
          this.lecture.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('SatelliteServer_createLecture_args');
    if (this.userToken !== null && this.userToken !== undefined) {
      output.writeFieldBegin('userToken', Thrift.Type.STRING, 1);
      output.writeString(this.userToken);
      output.writeFieldEnd();
    }
    if (this.lecture !== null && this.lecture !== undefined) {
      output.writeFieldBegin('lecture', Thrift.Type.STRUCT, 2);
      this.lecture.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
SatelliteServer_createLecture_result = class {
  constructor(args) {
    this.success = null;
    this.authError = null;
    this.serverError = null;
    this.dateError = null;
    this.notFound = null;
    if (args instanceof TAuthorizationException) {
        this.authError = args;
        return;
    }
    if (args instanceof TInvocationException) {
        this.serverError = args;
        return;
    }
    if (args instanceof TInvalidDateParam) {
        this.dateError = args;
        return;
    }
    if (args instanceof TNotFoundException) {
        this.notFound = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = args.success;
      }
      if (args.authError !== undefined && args.authError !== null) {
        this.authError = args.authError;
      }
      if (args.serverError !== undefined && args.serverError !== null) {
        this.serverError = args.serverError;
      }
      if (args.dateError !== undefined && args.dateError !== null) {
        this.dateError = args.dateError;
      }
      if (args.notFound !== undefined && args.notFound !== null) {
        this.notFound = args.notFound;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.STRING) {
          this.success = input.readString().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.authError = new TAuthorizationException();
          this.authError.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.serverError = new TInvocationException();
          this.serverError.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.dateError = new TInvalidDateParam();
          this.dateError.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.notFound = new TNotFoundException();
          this.notFound.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('SatelliteServer_createLecture_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.STRING, 0);
      output.writeString(this.success);
      output.writeFieldEnd();
    }
    if (this.authError !== null && this.authError !== undefined) {
      output.writeFieldBegin('authError', Thrift.Type.STRUCT, 1);
      this.authError.write(output);
      output.writeFieldEnd();
    }
    if (this.serverError !== null && this.serverError !== undefined) {
      output.writeFieldBegin('serverError', Thrift.Type.STRUCT, 2);
      this.serverError.write(output);
      output.writeFieldEnd();
    }
    if (this.dateError !== null && this.dateError !== undefined) {
      output.writeFieldBegin('dateError', Thrift.Type.STRUCT, 3);
      this.dateError.write(output);
      output.writeFieldEnd();
    }
    if (this.notFound !== null && this.notFound !== undefined) {
      output.writeFieldBegin('notFound', Thrift.Type.STRUCT, 4);
      this.notFound.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
SatelliteServer_updateLecture_args = class {
  constructor(args) {
    this.userToken = null;
    this.lectureId = null;
    this.lecture = null;
    if (args) {
      if (args.userToken !== undefined && args.userToken !== null) {
        this.userToken = args.userToken;
      }
      if (args.lectureId !== undefined && args.lectureId !== null) {
        this.lectureId = args.lectureId;
      }
      if (args.lecture !== undefined && args.lecture !== null) {
        this.lecture = new LectureWrite(args.lecture);
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.userToken = input.readString().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRING) {
          this.lectureId = input.readString().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.lecture = new LectureWrite();
          this.lecture.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('SatelliteServer_updateLecture_args');
    if (this.userToken !== null && this.userToken !== undefined) {
      output.writeFieldBegin('userToken', Thrift.Type.STRING, 1);
      output.writeString(this.userToken);
      output.writeFieldEnd();
    }
    if (this.lectureId !== null && this.lectureId !== undefined) {
      output.writeFieldBegin('lectureId', Thrift.Type.STRING, 2);
      output.writeString(this.lectureId);
      output.writeFieldEnd();
    }
    if (this.lecture !== null && this.lecture !== undefined) {
      output.writeFieldBegin('lecture', Thrift.Type.STRUCT, 3);
      this.lecture.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
SatelliteServer_updateLecture_result = class {
  constructor(args) {
    this.authError = null;
    this.notFound = null;
    this.serverError = null;
    this.dateError = null;
    if (args instanceof TAuthorizationException) {
        this.authError = args;
        return;
    }
    if (args instanceof TNotFoundException) {
        this.notFound = args;
        return;
    }
    if (args instanceof TInvocationException) {
        this.serverError = args;
        return;
    }
    if (args instanceof TInvalidDateParam) {
        this.dateError = args;
        return;
    }
    if (args) {
      if (args.authError !== undefined && args.authError !== null) {
        this.authError = args.authError;
      }
      if (args.notFound !== undefined && args.notFound !== null) {
        this.notFound = args.notFound;
      }
      if (args.serverError !== undefined && args.serverError !== null) {
        this.serverError = args.serverError;
      }
      if (args.dateError !== undefined && args.dateError !== null) {
        this.dateError = args.dateError;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.authError = new TAuthorizationException();
          this.authError.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.notFound = new TNotFoundException();
          this.notFound.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.serverError = new TInvocationException();
          this.serverError.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.dateError = new TInvalidDateParam();
          this.dateError.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('SatelliteServer_updateLecture_result');
    if (this.authError !== null && this.authError !== undefined) {
      output.writeFieldBegin('authError', Thrift.Type.STRUCT, 1);
      this.authError.write(output);
      output.writeFieldEnd();
    }
    if (this.notFound !== null && this.notFound !== undefined) {
      output.writeFieldBegin('notFound', Thrift.Type.STRUCT, 2);
      this.notFound.write(output);
      output.writeFieldEnd();
    }
    if (this.serverError !== null && this.serverError !== undefined) {
      output.writeFieldBegin('serverError', Thrift.Type.STRUCT, 3);
      this.serverError.write(output);
      output.writeFieldEnd();
    }
    if (this.dateError !== null && this.dateError !== undefined) {
      output.writeFieldBegin('dateError', Thrift.Type.STRUCT, 4);
      this.dateError.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
SatelliteServer_getLectureList_args = class {
  constructor(args) {
    this.userToken = null;
    this.page = null;
    if (args) {
      if (args.userToken !== undefined && args.userToken !== null) {
        this.userToken = args.userToken;
      }
      if (args.page !== undefined && args.page !== null) {
        this.page = args.page;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.userToken = input.readString().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.I32) {
          this.page = input.readI32().value;
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('SatelliteServer_getLectureList_args');
    if (this.userToken !== null && this.userToken !== undefined) {
      output.writeFieldBegin('userToken', Thrift.Type.STRING, 1);
      output.writeString(this.userToken);
      output.writeFieldEnd();
    }
    if (this.page !== null && this.page !== undefined) {
      output.writeFieldBegin('page', Thrift.Type.I32, 2);
      output.writeI32(this.page);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
SatelliteServer_getLectureList_result = class {
  constructor(args) {
    this.success = null;
    this.authError = null;
    this.serverError = null;
    if (args instanceof TAuthorizationException) {
        this.authError = args;
        return;
    }
    if (args instanceof TInvocationException) {
        this.serverError = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = Thrift.copyList(args.success, [LectureSummary]);
      }
      if (args.authError !== undefined && args.authError !== null) {
        this.authError = args.authError;
      }
      if (args.serverError !== undefined && args.serverError !== null) {
        this.serverError = args.serverError;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.LIST) {
          this.success = [];
          const _rtmp3247 = input.readListBegin();
          const _size246 = _rtmp3247.size || 0;
          for (let _i248 = 0; _i248 < _size246; ++_i248) {
            let elem249 = null;
            elem249 = new LectureSummary();
            elem249.read(input);
            this.success.push(elem249);
          }
          input.readListEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.authError = new TAuthorizationException();
          this.authError.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.serverError = new TInvocationException();
          this.serverError.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('SatelliteServer_getLectureList_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.LIST, 0);
      output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
      for (let iter250 in this.success) {
        if (this.success.hasOwnProperty(iter250)) {
          iter250 = this.success[iter250];
          iter250.write(output);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    if (this.authError !== null && this.authError !== undefined) {
      output.writeFieldBegin('authError', Thrift.Type.STRUCT, 1);
      this.authError.write(output);
      output.writeFieldEnd();
    }
    if (this.serverError !== null && this.serverError !== undefined) {
      output.writeFieldBegin('serverError', Thrift.Type.STRUCT, 2);
      this.serverError.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
SatelliteServer_getLectureDetails_args = class {
  constructor(args) {
    this.userToken = null;
    this.lectureId = null;
    if (args) {
      if (args.userToken !== undefined && args.userToken !== null) {
        this.userToken = args.userToken;
      }
      if (args.lectureId !== undefined && args.lectureId !== null) {
        this.lectureId = args.lectureId;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.userToken = input.readString().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRING) {
          this.lectureId = input.readString().value;
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('SatelliteServer_getLectureDetails_args');
    if (this.userToken !== null && this.userToken !== undefined) {
      output.writeFieldBegin('userToken', Thrift.Type.STRING, 1);
      output.writeString(this.userToken);
      output.writeFieldEnd();
    }
    if (this.lectureId !== null && this.lectureId !== undefined) {
      output.writeFieldBegin('lectureId', Thrift.Type.STRING, 2);
      output.writeString(this.lectureId);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
SatelliteServer_getLectureDetails_result = class {
  constructor(args) {
    this.success = null;
    this.authError = null;
    this.notFound = null;
    this.serverError = null;
    if (args instanceof TAuthorizationException) {
        this.authError = args;
        return;
    }
    if (args instanceof TNotFoundException) {
        this.notFound = args;
        return;
    }
    if (args instanceof TInvocationException) {
        this.serverError = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = new LectureRead(args.success);
      }
      if (args.authError !== undefined && args.authError !== null) {
        this.authError = args.authError;
      }
      if (args.notFound !== undefined && args.notFound !== null) {
        this.notFound = args.notFound;
      }
      if (args.serverError !== undefined && args.serverError !== null) {
        this.serverError = args.serverError;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.STRUCT) {
          this.success = new LectureRead();
          this.success.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.authError = new TAuthorizationException();
          this.authError.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.notFound = new TNotFoundException();
          this.notFound.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.serverError = new TInvocationException();
          this.serverError.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('SatelliteServer_getLectureDetails_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
      this.success.write(output);
      output.writeFieldEnd();
    }
    if (this.authError !== null && this.authError !== undefined) {
      output.writeFieldBegin('authError', Thrift.Type.STRUCT, 1);
      this.authError.write(output);
      output.writeFieldEnd();
    }
    if (this.notFound !== null && this.notFound !== undefined) {
      output.writeFieldBegin('notFound', Thrift.Type.STRUCT, 2);
      this.notFound.write(output);
      output.writeFieldEnd();
    }
    if (this.serverError !== null && this.serverError !== undefined) {
      output.writeFieldBegin('serverError', Thrift.Type.STRUCT, 3);
      this.serverError.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
SatelliteServer_deleteLecture_args = class {
  constructor(args) {
    this.userToken = null;
    this.lectureId = null;
    if (args) {
      if (args.userToken !== undefined && args.userToken !== null) {
        this.userToken = args.userToken;
      }
      if (args.lectureId !== undefined && args.lectureId !== null) {
        this.lectureId = args.lectureId;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.userToken = input.readString().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRING) {
          this.lectureId = input.readString().value;
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('SatelliteServer_deleteLecture_args');
    if (this.userToken !== null && this.userToken !== undefined) {
      output.writeFieldBegin('userToken', Thrift.Type.STRING, 1);
      output.writeString(this.userToken);
      output.writeFieldEnd();
    }
    if (this.lectureId !== null && this.lectureId !== undefined) {
      output.writeFieldBegin('lectureId', Thrift.Type.STRING, 2);
      output.writeString(this.lectureId);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
SatelliteServer_deleteLecture_result = class {
  constructor(args) {
    this.authError = null;
    this.notFound = null;
    this.serverError = null;
    if (args instanceof TAuthorizationException) {
        this.authError = args;
        return;
    }
    if (args instanceof TNotFoundException) {
        this.notFound = args;
        return;
    }
    if (args instanceof TInvocationException) {
        this.serverError = args;
        return;
    }
    if (args) {
      if (args.authError !== undefined && args.authError !== null) {
        this.authError = args.authError;
      }
      if (args.notFound !== undefined && args.notFound !== null) {
        this.notFound = args.notFound;
      }
      if (args.serverError !== undefined && args.serverError !== null) {
        this.serverError = args.serverError;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.authError = new TAuthorizationException();
          this.authError.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.notFound = new TNotFoundException();
          this.notFound.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.serverError = new TInvocationException();
          this.serverError.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('SatelliteServer_deleteLecture_result');
    if (this.authError !== null && this.authError !== undefined) {
      output.writeFieldBegin('authError', Thrift.Type.STRUCT, 1);
      this.authError.write(output);
      output.writeFieldEnd();
    }
    if (this.notFound !== null && this.notFound !== undefined) {
      output.writeFieldBegin('notFound', Thrift.Type.STRUCT, 2);
      this.notFound.write(output);
      output.writeFieldEnd();
    }
    if (this.serverError !== null && this.serverError !== undefined) {
      output.writeFieldBegin('serverError', Thrift.Type.STRUCT, 3);
      this.serverError.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
SatelliteServer_writeLecturePermissions_args = class {
  constructor(args) {
    this.userToken = null;
    this.lectureId = null;
    this.permissions = null;
    if (args) {
      if (args.userToken !== undefined && args.userToken !== null) {
        this.userToken = args.userToken;
      }
      if (args.lectureId !== undefined && args.lectureId !== null) {
        this.lectureId = args.lectureId;
      }
      if (args.permissions !== undefined && args.permissions !== null) {
        this.permissions = Thrift.copyMap(args.permissions, [LecturePermissions]);
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.userToken = input.readString().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRING) {
          this.lectureId = input.readString().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.MAP) {
          this.permissions = {};
          const _rtmp3252 = input.readMapBegin();
          const _size251 = _rtmp3252.size || 0;
          for (let _i253 = 0; _i253 < _size251; ++_i253) {
            if (_i253 > 0 ) {
              if (input.rstack.length > input.rpos[input.rpos.length -1] + 1) {
                input.rstack.pop();
              }
            }
            let key254 = null;
            let val255 = null;
            key254 = input.readString().value;
            val255 = new LecturePermissions();
            val255.read(input);
            this.permissions[key254] = val255;
          }
          input.readMapEnd();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('SatelliteServer_writeLecturePermissions_args');
    if (this.userToken !== null && this.userToken !== undefined) {
      output.writeFieldBegin('userToken', Thrift.Type.STRING, 1);
      output.writeString(this.userToken);
      output.writeFieldEnd();
    }
    if (this.lectureId !== null && this.lectureId !== undefined) {
      output.writeFieldBegin('lectureId', Thrift.Type.STRING, 2);
      output.writeString(this.lectureId);
      output.writeFieldEnd();
    }
    if (this.permissions !== null && this.permissions !== undefined) {
      output.writeFieldBegin('permissions', Thrift.Type.MAP, 3);
      output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRUCT, Thrift.objectLength(this.permissions));
      for (let kiter256 in this.permissions) {
        if (this.permissions.hasOwnProperty(kiter256)) {
          let viter257 = this.permissions[kiter256];
          output.writeString(kiter256);
          viter257.write(output);
        }
      }
      output.writeMapEnd();
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
SatelliteServer_writeLecturePermissions_result = class {
  constructor(args) {
    this.authError = null;
    this.notFound = null;
    this.serverError = null;
    if (args instanceof TAuthorizationException) {
        this.authError = args;
        return;
    }
    if (args instanceof TNotFoundException) {
        this.notFound = args;
        return;
    }
    if (args instanceof TInvocationException) {
        this.serverError = args;
        return;
    }
    if (args) {
      if (args.authError !== undefined && args.authError !== null) {
        this.authError = args.authError;
      }
      if (args.notFound !== undefined && args.notFound !== null) {
        this.notFound = args.notFound;
      }
      if (args.serverError !== undefined && args.serverError !== null) {
        this.serverError = args.serverError;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.authError = new TAuthorizationException();
          this.authError.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.notFound = new TNotFoundException();
          this.notFound.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.serverError = new TInvocationException();
          this.serverError.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('SatelliteServer_writeLecturePermissions_result');
    if (this.authError !== null && this.authError !== undefined) {
      output.writeFieldBegin('authError', Thrift.Type.STRUCT, 1);
      this.authError.write(output);
      output.writeFieldEnd();
    }
    if (this.notFound !== null && this.notFound !== undefined) {
      output.writeFieldBegin('notFound', Thrift.Type.STRUCT, 2);
      this.notFound.write(output);
      output.writeFieldEnd();
    }
    if (this.serverError !== null && this.serverError !== undefined) {
      output.writeFieldBegin('serverError', Thrift.Type.STRUCT, 3);
      this.serverError.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
SatelliteServer_getLecturePermissions_args = class {
  constructor(args) {
    this.userToken = null;
    this.lectureId = null;
    if (args) {
      if (args.userToken !== undefined && args.userToken !== null) {
        this.userToken = args.userToken;
      }
      if (args.lectureId !== undefined && args.lectureId !== null) {
        this.lectureId = args.lectureId;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.userToken = input.readString().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRING) {
          this.lectureId = input.readString().value;
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('SatelliteServer_getLecturePermissions_args');
    if (this.userToken !== null && this.userToken !== undefined) {
      output.writeFieldBegin('userToken', Thrift.Type.STRING, 1);
      output.writeString(this.userToken);
      output.writeFieldEnd();
    }
    if (this.lectureId !== null && this.lectureId !== undefined) {
      output.writeFieldBegin('lectureId', Thrift.Type.STRING, 2);
      output.writeString(this.lectureId);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
SatelliteServer_getLecturePermissions_result = class {
  constructor(args) {
    this.success = null;
    this.authError = null;
    this.notFound = null;
    this.serverError = null;
    if (args instanceof TAuthorizationException) {
        this.authError = args;
        return;
    }
    if (args instanceof TNotFoundException) {
        this.notFound = args;
        return;
    }
    if (args instanceof TInvocationException) {
        this.serverError = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = Thrift.copyMap(args.success, [LecturePermissions]);
      }
      if (args.authError !== undefined && args.authError !== null) {
        this.authError = args.authError;
      }
      if (args.notFound !== undefined && args.notFound !== null) {
        this.notFound = args.notFound;
      }
      if (args.serverError !== undefined && args.serverError !== null) {
        this.serverError = args.serverError;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.MAP) {
          this.success = {};
          const _rtmp3259 = input.readMapBegin();
          const _size258 = _rtmp3259.size || 0;
          for (let _i260 = 0; _i260 < _size258; ++_i260) {
            if (_i260 > 0 ) {
              if (input.rstack.length > input.rpos[input.rpos.length -1] + 1) {
                input.rstack.pop();
              }
            }
            let key261 = null;
            let val262 = null;
            key261 = input.readString().value;
            val262 = new LecturePermissions();
            val262.read(input);
            this.success[key261] = val262;
          }
          input.readMapEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.authError = new TAuthorizationException();
          this.authError.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.notFound = new TNotFoundException();
          this.notFound.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.serverError = new TInvocationException();
          this.serverError.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('SatelliteServer_getLecturePermissions_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.MAP, 0);
      output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRUCT, Thrift.objectLength(this.success));
      for (let kiter263 in this.success) {
        if (this.success.hasOwnProperty(kiter263)) {
          let viter264 = this.success[kiter263];
          output.writeString(kiter263);
          viter264.write(output);
        }
      }
      output.writeMapEnd();
      output.writeFieldEnd();
    }
    if (this.authError !== null && this.authError !== undefined) {
      output.writeFieldBegin('authError', Thrift.Type.STRUCT, 1);
      this.authError.write(output);
      output.writeFieldEnd();
    }
    if (this.notFound !== null && this.notFound !== undefined) {
      output.writeFieldBegin('notFound', Thrift.Type.STRUCT, 2);
      this.notFound.write(output);
      output.writeFieldEnd();
    }
    if (this.serverError !== null && this.serverError !== undefined) {
      output.writeFieldBegin('serverError', Thrift.Type.STRUCT, 3);
      this.serverError.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
SatelliteServer_setLectureOwner_args = class {
  constructor(args) {
    this.userToken = null;
    this.lectureId = null;
    this.newOwnerId = null;
    if (args) {
      if (args.userToken !== undefined && args.userToken !== null) {
        this.userToken = args.userToken;
      }
      if (args.lectureId !== undefined && args.lectureId !== null) {
        this.lectureId = args.lectureId;
      }
      if (args.newOwnerId !== undefined && args.newOwnerId !== null) {
        this.newOwnerId = args.newOwnerId;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.userToken = input.readString().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRING) {
          this.lectureId = input.readString().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRING) {
          this.newOwnerId = input.readString().value;
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('SatelliteServer_setLectureOwner_args');
    if (this.userToken !== null && this.userToken !== undefined) {
      output.writeFieldBegin('userToken', Thrift.Type.STRING, 1);
      output.writeString(this.userToken);
      output.writeFieldEnd();
    }
    if (this.lectureId !== null && this.lectureId !== undefined) {
      output.writeFieldBegin('lectureId', Thrift.Type.STRING, 2);
      output.writeString(this.lectureId);
      output.writeFieldEnd();
    }
    if (this.newOwnerId !== null && this.newOwnerId !== undefined) {
      output.writeFieldBegin('newOwnerId', Thrift.Type.STRING, 3);
      output.writeString(this.newOwnerId);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
SatelliteServer_setLectureOwner_result = class {
  constructor(args) {
    this.authError = null;
    this.notFound = null;
    this.serverError = null;
    if (args instanceof TAuthorizationException) {
        this.authError = args;
        return;
    }
    if (args instanceof TNotFoundException) {
        this.notFound = args;
        return;
    }
    if (args instanceof TInvocationException) {
        this.serverError = args;
        return;
    }
    if (args) {
      if (args.authError !== undefined && args.authError !== null) {
        this.authError = args.authError;
      }
      if (args.notFound !== undefined && args.notFound !== null) {
        this.notFound = args.notFound;
      }
      if (args.serverError !== undefined && args.serverError !== null) {
        this.serverError = args.serverError;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.authError = new TAuthorizationException();
          this.authError.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.notFound = new TNotFoundException();
          this.notFound.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.serverError = new TInvocationException();
          this.serverError.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('SatelliteServer_setLectureOwner_result');
    if (this.authError !== null && this.authError !== undefined) {
      output.writeFieldBegin('authError', Thrift.Type.STRUCT, 1);
      this.authError.write(output);
      output.writeFieldEnd();
    }
    if (this.notFound !== null && this.notFound !== undefined) {
      output.writeFieldBegin('notFound', Thrift.Type.STRUCT, 2);
      this.notFound.write(output);
      output.writeFieldEnd();
    }
    if (this.serverError !== null && this.serverError !== undefined) {
      output.writeFieldBegin('serverError', Thrift.Type.STRUCT, 3);
      this.serverError.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
SatelliteServer_getPredefinedData_args = class {
  constructor(args) {
    this.userToken = null;
    if (args) {
      if (args.userToken !== undefined && args.userToken !== null) {
        this.userToken = args.userToken;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.userToken = input.readString().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 0:
          input.skip(ftype);
          break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('SatelliteServer_getPredefinedData_args');
    if (this.userToken !== null && this.userToken !== undefined) {
      output.writeFieldBegin('userToken', Thrift.Type.STRING, 1);
      output.writeString(this.userToken);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
SatelliteServer_getPredefinedData_result = class {
  constructor(args) {
    this.success = null;
    this.authError = null;
    this.serverError = null;
    if (args instanceof TAuthorizationException) {
        this.authError = args;
        return;
    }
    if (args instanceof TInvocationException) {
        this.serverError = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = new PredefinedData(args.success);
      }
      if (args.authError !== undefined && args.authError !== null) {
        this.authError = args.authError;
      }
      if (args.serverError !== undefined && args.serverError !== null) {
        this.serverError = args.serverError;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.STRUCT) {
          this.success = new PredefinedData();
          this.success.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.authError = new TAuthorizationException();
          this.authError.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.serverError = new TInvocationException();
          this.serverError.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('SatelliteServer_getPredefinedData_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
      this.success.write(output);
      output.writeFieldEnd();
    }
    if (this.authError !== null && this.authError !== undefined) {
      output.writeFieldBegin('authError', Thrift.Type.STRUCT, 1);
      this.authError.write(output);
      output.writeFieldEnd();
    }
    if (this.serverError !== null && this.serverError !== undefined) {
      output.writeFieldBegin('serverError', Thrift.Type.STRUCT, 2);
      this.serverError.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
SatelliteServerClient = class SatelliteServerClient {
  constructor(input, output) {
    this.input = input;
    this.output = (!output) ? input : output;
    this.seqid = 0;
  }

  getVersion (clientVersion) {
    const self = this;
    return new Promise((resolve, reject) => {
      self.send_getVersion(clientVersion, (error, result) => {
        return error ? reject(error) : resolve(result);
      });
    });
  }

  send_getVersion (clientVersion, callback) {
    const params = {
      clientVersion: clientVersion
    };
    const args = new SatelliteServer_getVersion_args(params);
    try {
      this.output.writeMessageBegin('getVersion', Thrift.MessageType.CALL, this.seqid);
      args.write(this.output);
      this.output.writeMessageEnd();
      const self = this;
      this.output.getTransport().flush(true, () => {
        let error = null, result = null;
        try {
          result = self.recv_getVersion();
        } catch (e) {
          error = e;
        }
        callback(error, result);
      });
    }
    catch (e) {
      if (typeof this.output.getTransport().reset === 'function') {
        this.output.getTransport().reset();
      }
      throw e;
    }
  }

  recv_getVersion () {
    const ret = this.input.readMessageBegin();
    const mtype = ret.mtype;
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(this.input);
      this.input.readMessageEnd();
      throw x;
    }
    const result = new SatelliteServer_getVersion_result();
    result.read(this.input);
    this.input.readMessageEnd();

    if (null !== result.success) {
      return result.success;
    }
    throw 'getVersion failed: unknown result';
  }

  getSupportedFeatures () {
    const self = this;
    return new Promise((resolve, reject) => {
      self.send_getSupportedFeatures((error, result) => {
        return error ? reject(error) : resolve(result);
      });
    });
  }

  send_getSupportedFeatures (callback) {
    const args = new SatelliteServer_getSupportedFeatures_args();
    try {
      this.output.writeMessageBegin('getSupportedFeatures', Thrift.MessageType.CALL, this.seqid);
      args.write(this.output);
      this.output.writeMessageEnd();
      const self = this;
      this.output.getTransport().flush(true, () => {
        let error = null, result = null;
        try {
          result = self.recv_getSupportedFeatures();
        } catch (e) {
          error = e;
        }
        callback(error, result);
      });
    }
    catch (e) {
      if (typeof this.output.getTransport().reset === 'function') {
        this.output.getTransport().reset();
      }
      throw e;
    }
  }

  recv_getSupportedFeatures () {
    const ret = this.input.readMessageBegin();
    const mtype = ret.mtype;
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(this.input);
      this.input.readMessageEnd();
      throw x;
    }
    const result = new SatelliteServer_getSupportedFeatures_result();
    result.read(this.input);
    this.input.readMessageEnd();

    if (null !== result.success) {
      return result.success;
    }
    throw 'getSupportedFeatures failed: unknown result';
  }

  getConfiguration () {
    const self = this;
    return new Promise((resolve, reject) => {
      self.send_getConfiguration((error, result) => {
        return error ? reject(error) : resolve(result);
      });
    });
  }

  send_getConfiguration (callback) {
    const args = new SatelliteServer_getConfiguration_args();
    try {
      this.output.writeMessageBegin('getConfiguration', Thrift.MessageType.CALL, this.seqid);
      args.write(this.output);
      this.output.writeMessageEnd();
      const self = this;
      this.output.getTransport().flush(true, () => {
        let error = null, result = null;
        try {
          result = self.recv_getConfiguration();
        } catch (e) {
          error = e;
        }
        callback(error, result);
      });
    }
    catch (e) {
      if (typeof this.output.getTransport().reset === 'function') {
        this.output.getTransport().reset();
      }
      throw e;
    }
  }

  recv_getConfiguration () {
    const ret = this.input.readMessageBegin();
    const mtype = ret.mtype;
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(this.input);
      this.input.readMessageEnd();
      throw x;
    }
    const result = new SatelliteServer_getConfiguration_result();
    result.read(this.input);
    this.input.readMessageEnd();

    if (null !== result.success) {
      return result.success;
    }
    throw 'getConfiguration failed: unknown result';
  }

  requestImageVersionUpload (userToken, imageBaseId, fileSize, blockHashes, machineDescription) {
    const self = this;
    return new Promise((resolve, reject) => {
      self.send_requestImageVersionUpload(userToken, imageBaseId, fileSize, blockHashes, machineDescription, (error, result) => {
        return error ? reject(error) : resolve(result);
      });
    });
  }

  send_requestImageVersionUpload (userToken, imageBaseId, fileSize, blockHashes, machineDescription, callback) {
    const params = {
      userToken: userToken,
      imageBaseId: imageBaseId,
      fileSize: fileSize,
      blockHashes: blockHashes,
      machineDescription: machineDescription
    };
    const args = new SatelliteServer_requestImageVersionUpload_args(params);
    try {
      this.output.writeMessageBegin('requestImageVersionUpload', Thrift.MessageType.CALL, this.seqid);
      args.write(this.output);
      this.output.writeMessageEnd();
      const self = this;
      this.output.getTransport().flush(true, () => {
        let error = null, result = null;
        try {
          result = self.recv_requestImageVersionUpload();
        } catch (e) {
          error = e;
        }
        callback(error, result);
      });
    }
    catch (e) {
      if (typeof this.output.getTransport().reset === 'function') {
        this.output.getTransport().reset();
      }
      throw e;
    }
  }

  recv_requestImageVersionUpload () {
    const ret = this.input.readMessageBegin();
    const mtype = ret.mtype;
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(this.input);
      this.input.readMessageEnd();
      throw x;
    }
    const result = new SatelliteServer_requestImageVersionUpload_result();
    result.read(this.input);
    this.input.readMessageEnd();

    if (null !== result.rejection) {
      throw result.rejection;
    }
    if (null !== result.authError) {
      throw result.authError;
    }
    if (null !== result.ffff) {
      throw result.ffff;
    }
    if (null !== result.sdf) {
      throw result.sdf;
    }
    if (null !== result.success) {
      return result.success;
    }
    throw 'requestImageVersionUpload failed: unknown result';
  }

  updateBlockHashes (uploadToken, blockHashes, userToken) {
    const self = this;
    return new Promise((resolve, reject) => {
      self.send_updateBlockHashes(uploadToken, blockHashes, userToken, (error, result) => {
        return error ? reject(error) : resolve(result);
      });
    });
  }

  send_updateBlockHashes (uploadToken, blockHashes, userToken, callback) {
    const params = {
      uploadToken: uploadToken,
      blockHashes: blockHashes,
      userToken: userToken
    };
    const args = new SatelliteServer_updateBlockHashes_args(params);
    try {
      this.output.writeMessageBegin('updateBlockHashes', Thrift.MessageType.CALL, this.seqid);
      args.write(this.output);
      this.output.writeMessageEnd();
      const self = this;
      this.output.getTransport().flush(true, () => {
        let error = null, result = null;
        try {
          result = self.recv_updateBlockHashes();
        } catch (e) {
          error = e;
        }
        callback(error, result);
      });
    }
    catch (e) {
      if (typeof this.output.getTransport().reset === 'function') {
        this.output.getTransport().reset();
      }
      throw e;
    }
  }

  recv_updateBlockHashes () {
    const ret = this.input.readMessageBegin();
    const mtype = ret.mtype;
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(this.input);
      this.input.readMessageEnd();
      throw x;
    }
    const result = new SatelliteServer_updateBlockHashes_result();
    result.read(this.input);
    this.input.readMessageEnd();

    if (null !== result.ex1) {
      throw result.ex1;
    }
    return;
  }

  setUploadOptions (userToken, uploadToken, options) {
    const self = this;
    return new Promise((resolve, reject) => {
      self.send_setUploadOptions(userToken, uploadToken, options, (error, result) => {
        return error ? reject(error) : resolve(result);
      });
    });
  }

  send_setUploadOptions (userToken, uploadToken, options, callback) {
    const params = {
      userToken: userToken,
      uploadToken: uploadToken,
      options: options
    };
    const args = new SatelliteServer_setUploadOptions_args(params);
    try {
      this.output.writeMessageBegin('setUploadOptions', Thrift.MessageType.CALL, this.seqid);
      args.write(this.output);
      this.output.writeMessageEnd();
      const self = this;
      this.output.getTransport().flush(true, () => {
        let error = null, result = null;
        try {
          result = self.recv_setUploadOptions();
        } catch (e) {
          error = e;
        }
        callback(error, result);
      });
    }
    catch (e) {
      if (typeof this.output.getTransport().reset === 'function') {
        this.output.getTransport().reset();
      }
      throw e;
    }
  }

  recv_setUploadOptions () {
    const ret = this.input.readMessageBegin();
    const mtype = ret.mtype;
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(this.input);
      this.input.readMessageEnd();
      throw x;
    }
    const result = new SatelliteServer_setUploadOptions_result();
    result.read(this.input);
    this.input.readMessageEnd();

    if (null !== result.frootloops) {
      throw result.frootloops;
    }
    if (null !== result.imcyborgbutthatsok) {
      throw result.imcyborgbutthatsok;
    }
    if (null !== result.success) {
      return result.success;
    }
    throw 'setUploadOptions failed: unknown result';
  }

  cancelUpload (uploadToken) {
    const self = this;
    return new Promise((resolve, reject) => {
      self.send_cancelUpload(uploadToken, (error, result) => {
        return error ? reject(error) : resolve(result);
      });
    });
  }

  send_cancelUpload (uploadToken, callback) {
    const params = {
      uploadToken: uploadToken
    };
    const args = new SatelliteServer_cancelUpload_args(params);
    try {
      this.output.writeMessageBegin('cancelUpload', Thrift.MessageType.CALL, this.seqid);
      args.write(this.output);
      this.output.writeMessageEnd();
      const self = this;
      this.output.getTransport().flush(true, () => {
        let error = null, result = null;
        try {
          result = self.recv_cancelUpload();
        } catch (e) {
          error = e;
        }
        callback(error, result);
      });
    }
    catch (e) {
      if (typeof this.output.getTransport().reset === 'function') {
        this.output.getTransport().reset();
      }
      throw e;
    }
  }

  recv_cancelUpload () {
    const ret = this.input.readMessageBegin();
    const mtype = ret.mtype;
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(this.input);
      this.input.readMessageEnd();
      throw x;
    }
    const result = new SatelliteServer_cancelUpload_result();
    result.read(this.input);
    this.input.readMessageEnd();

    if (null !== result.ex1) {
      throw result.ex1;
    }
    return;
  }

  queryUploadStatus (uploadToken) {
    const self = this;
    return new Promise((resolve, reject) => {
      self.send_queryUploadStatus(uploadToken, (error, result) => {
        return error ? reject(error) : resolve(result);
      });
    });
  }

  send_queryUploadStatus (uploadToken, callback) {
    const params = {
      uploadToken: uploadToken
    };
    const args = new SatelliteServer_queryUploadStatus_args(params);
    try {
      this.output.writeMessageBegin('queryUploadStatus', Thrift.MessageType.CALL, this.seqid);
      args.write(this.output);
      this.output.writeMessageEnd();
      const self = this;
      this.output.getTransport().flush(true, () => {
        let error = null, result = null;
        try {
          result = self.recv_queryUploadStatus();
        } catch (e) {
          error = e;
        }
        callback(error, result);
      });
    }
    catch (e) {
      if (typeof this.output.getTransport().reset === 'function') {
        this.output.getTransport().reset();
      }
      throw e;
    }
  }

  recv_queryUploadStatus () {
    const ret = this.input.readMessageBegin();
    const mtype = ret.mtype;
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(this.input);
      this.input.readMessageEnd();
      throw x;
    }
    const result = new SatelliteServer_queryUploadStatus_result();
    result.read(this.input);
    this.input.readMessageEnd();

    if (null !== result.ex1) {
      throw result.ex1;
    }
    if (null !== result.success) {
      return result.success;
    }
    throw 'queryUploadStatus failed: unknown result';
  }

  requestDownload (userToken, imageVersionId) {
    const self = this;
    return new Promise((resolve, reject) => {
      self.send_requestDownload(userToken, imageVersionId, (error, result) => {
        return error ? reject(error) : resolve(result);
      });
    });
  }

  send_requestDownload (userToken, imageVersionId, callback) {
    const params = {
      userToken: userToken,
      imageVersionId: imageVersionId
    };
    const args = new SatelliteServer_requestDownload_args(params);
    try {
      this.output.writeMessageBegin('requestDownload', Thrift.MessageType.CALL, this.seqid);
      args.write(this.output);
      this.output.writeMessageEnd();
      const self = this;
      this.output.getTransport().flush(true, () => {
        let error = null, result = null;
        try {
          result = self.recv_requestDownload();
        } catch (e) {
          error = e;
        }
        callback(error, result);
      });
    }
    catch (e) {
      if (typeof this.output.getTransport().reset === 'function') {
        this.output.getTransport().reset();
      }
      throw e;
    }
  }

  recv_requestDownload () {
    const ret = this.input.readMessageBegin();
    const mtype = ret.mtype;
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(this.input);
      this.input.readMessageEnd();
      throw x;
    }
    const result = new SatelliteServer_requestDownload_result();
    result.read(this.input);
    this.input.readMessageEnd();

    if (null !== result.rejection) {
      throw result.rejection;
    }
    if (null !== result.authError) {
      throw result.authError;
    }
    if (null !== result.ffff) {
      throw result.ffff;
    }
    if (null !== result.sdf) {
      throw result.sdf;
    }
    if (null !== result.success) {
      return result.success;
    }
    throw 'requestDownload failed: unknown result';
  }

  cancelDownload (downloadToken) {
    const self = this;
    return new Promise((resolve, reject) => {
      self.send_cancelDownload(downloadToken, (error, result) => {
        return error ? reject(error) : resolve(result);
      });
    });
  }

  send_cancelDownload (downloadToken, callback) {
    const params = {
      downloadToken: downloadToken
    };
    const args = new SatelliteServer_cancelDownload_args(params);
    try {
      this.output.writeMessageBegin('cancelDownload', Thrift.MessageType.CALL, this.seqid);
      args.write(this.output);
      this.output.writeMessageEnd();
      const self = this;
      this.output.getTransport().flush(true, () => {
        let error = null, result = null;
        try {
          result = self.recv_cancelDownload();
        } catch (e) {
          error = e;
        }
        callback(error, result);
      });
    }
    catch (e) {
      if (typeof this.output.getTransport().reset === 'function') {
        this.output.getTransport().reset();
      }
      throw e;
    }
  }

  recv_cancelDownload () {
    const ret = this.input.readMessageBegin();
    const mtype = ret.mtype;
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(this.input);
      this.input.readMessageEnd();
      throw x;
    }
    const result = new SatelliteServer_cancelDownload_result();
    result.read(this.input);
    this.input.readMessageEnd();

    if (null !== result.ex1) {
      throw result.ex1;
    }
    return;
  }

  isAuthenticated (userToken) {
    const self = this;
    return new Promise((resolve, reject) => {
      self.send_isAuthenticated(userToken, (error, result) => {
        return error ? reject(error) : resolve(result);
      });
    });
  }

  send_isAuthenticated (userToken, callback) {
    const params = {
      userToken: userToken
    };
    const args = new SatelliteServer_isAuthenticated_args(params);
    try {
      this.output.writeMessageBegin('isAuthenticated', Thrift.MessageType.CALL, this.seqid);
      args.write(this.output);
      this.output.writeMessageEnd();
      const self = this;
      this.output.getTransport().flush(true, () => {
        let error = null, result = null;
        try {
          result = self.recv_isAuthenticated();
        } catch (e) {
          error = e;
        }
        callback(error, result);
      });
    }
    catch (e) {
      if (typeof this.output.getTransport().reset === 'function') {
        this.output.getTransport().reset();
      }
      throw e;
    }
  }

  recv_isAuthenticated () {
    const ret = this.input.readMessageBegin();
    const mtype = ret.mtype;
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(this.input);
      this.input.readMessageEnd();
      throw x;
    }
    const result = new SatelliteServer_isAuthenticated_result();
    result.read(this.input);
    this.input.readMessageEnd();

    if (null !== result.authError) {
      throw result.authError;
    }
    if (null !== result.serverError) {
      throw result.serverError;
    }
    return;
  }

  whoami (userToken) {
    const self = this;
    return new Promise((resolve, reject) => {
      self.send_whoami(userToken, (error, result) => {
        return error ? reject(error) : resolve(result);
      });
    });
  }

  send_whoami (userToken, callback) {
    const params = {
      userToken: userToken
    };
    const args = new SatelliteServer_whoami_args(params);
    try {
      this.output.writeMessageBegin('whoami', Thrift.MessageType.CALL, this.seqid);
      args.write(this.output);
      this.output.writeMessageEnd();
      const self = this;
      this.output.getTransport().flush(true, () => {
        let error = null, result = null;
        try {
          result = self.recv_whoami();
        } catch (e) {
          error = e;
        }
        callback(error, result);
      });
    }
    catch (e) {
      if (typeof this.output.getTransport().reset === 'function') {
        this.output.getTransport().reset();
      }
      throw e;
    }
  }

  recv_whoami () {
    const ret = this.input.readMessageBegin();
    const mtype = ret.mtype;
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(this.input);
      this.input.readMessageEnd();
      throw x;
    }
    const result = new SatelliteServer_whoami_result();
    result.read(this.input);
    this.input.readMessageEnd();

    if (null !== result.authError) {
      throw result.authError;
    }
    if (null !== result.serverError) {
      throw result.serverError;
    }
    if (null !== result.success) {
      return result.success;
    }
    throw 'whoami failed: unknown result';
  }

  invalidateSession (userToken) {
    const self = this;
    return new Promise((resolve, reject) => {
      self.send_invalidateSession(userToken, (error, result) => {
        return error ? reject(error) : resolve(result);
      });
    });
  }

  send_invalidateSession (userToken, callback) {
    const params = {
      userToken: userToken
    };
    const args = new SatelliteServer_invalidateSession_args(params);
    try {
      this.output.writeMessageBegin('invalidateSession', Thrift.MessageType.CALL, this.seqid);
      args.write(this.output);
      this.output.writeMessageEnd();
      const self = this;
      this.output.getTransport().flush(true, () => {
        let error = null, result = null;
        try {
          result = self.recv_invalidateSession();
        } catch (e) {
          error = e;
        }
        callback(error, result);
      });
    }
    catch (e) {
      if (typeof this.output.getTransport().reset === 'function') {
        this.output.getTransport().reset();
      }
      throw e;
    }
  }

  recv_invalidateSession () {
    const ret = this.input.readMessageBegin();
    const mtype = ret.mtype;
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(this.input);
      this.input.readMessageEnd();
      throw x;
    }
    const result = new SatelliteServer_invalidateSession_result();
    result.read(this.input);
    this.input.readMessageEnd();

    if (null !== result.ex) {
      throw result.ex;
    }
    return;
  }

  getUserList (userToken, page) {
    const self = this;
    return new Promise((resolve, reject) => {
      self.send_getUserList(userToken, page, (error, result) => {
        return error ? reject(error) : resolve(result);
      });
    });
  }

  send_getUserList (userToken, page, callback) {
    const params = {
      userToken: userToken,
      page: page
    };
    const args = new SatelliteServer_getUserList_args(params);
    try {
      this.output.writeMessageBegin('getUserList', Thrift.MessageType.CALL, this.seqid);
      args.write(this.output);
      this.output.writeMessageEnd();
      const self = this;
      this.output.getTransport().flush(true, () => {
        let error = null, result = null;
        try {
          result = self.recv_getUserList();
        } catch (e) {
          error = e;
        }
        callback(error, result);
      });
    }
    catch (e) {
      if (typeof this.output.getTransport().reset === 'function') {
        this.output.getTransport().reset();
      }
      throw e;
    }
  }

  recv_getUserList () {
    const ret = this.input.readMessageBegin();
    const mtype = ret.mtype;
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(this.input);
      this.input.readMessageEnd();
      throw x;
    }
    const result = new SatelliteServer_getUserList_result();
    result.read(this.input);
    this.input.readMessageEnd();

    if (null !== result.failure) {
      throw result.failure;
    }
    if (null !== result.serverError) {
      throw result.serverError;
    }
    if (null !== result.success) {
      return result.success;
    }
    throw 'getUserList failed: unknown result';
  }

  getUserConfig (userToken) {
    const self = this;
    return new Promise((resolve, reject) => {
      self.send_getUserConfig(userToken, (error, result) => {
        return error ? reject(error) : resolve(result);
      });
    });
  }

  send_getUserConfig (userToken, callback) {
    const params = {
      userToken: userToken
    };
    const args = new SatelliteServer_getUserConfig_args(params);
    try {
      this.output.writeMessageBegin('getUserConfig', Thrift.MessageType.CALL, this.seqid);
      args.write(this.output);
      this.output.writeMessageEnd();
      const self = this;
      this.output.getTransport().flush(true, () => {
        let error = null, result = null;
        try {
          result = self.recv_getUserConfig();
        } catch (e) {
          error = e;
        }
        callback(error, result);
      });
    }
    catch (e) {
      if (typeof this.output.getTransport().reset === 'function') {
        this.output.getTransport().reset();
      }
      throw e;
    }
  }

  recv_getUserConfig () {
    const ret = this.input.readMessageBegin();
    const mtype = ret.mtype;
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(this.input);
      this.input.readMessageEnd();
      throw x;
    }
    const result = new SatelliteServer_getUserConfig_result();
    result.read(this.input);
    this.input.readMessageEnd();

    if (null !== result.failure) {
      throw result.failure;
    }
    if (null !== result.serverError) {
      throw result.serverError;
    }
    if (null !== result.success) {
      return result.success;
    }
    throw 'getUserConfig failed: unknown result';
  }

  setUserConfig (userToken, config) {
    const self = this;
    return new Promise((resolve, reject) => {
      self.send_setUserConfig(userToken, config, (error, result) => {
        return error ? reject(error) : resolve(result);
      });
    });
  }

  send_setUserConfig (userToken, config, callback) {
    const params = {
      userToken: userToken,
      config: config
    };
    const args = new SatelliteServer_setUserConfig_args(params);
    try {
      this.output.writeMessageBegin('setUserConfig', Thrift.MessageType.CALL, this.seqid);
      args.write(this.output);
      this.output.writeMessageEnd();
      const self = this;
      this.output.getTransport().flush(true, () => {
        let error = null, result = null;
        try {
          result = self.recv_setUserConfig();
        } catch (e) {
          error = e;
        }
        callback(error, result);
      });
    }
    catch (e) {
      if (typeof this.output.getTransport().reset === 'function') {
        this.output.getTransport().reset();
      }
      throw e;
    }
  }

  recv_setUserConfig () {
    const ret = this.input.readMessageBegin();
    const mtype = ret.mtype;
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(this.input);
      this.input.readMessageEnd();
      throw x;
    }
    const result = new SatelliteServer_setUserConfig_result();
    result.read(this.input);
    this.input.readMessageEnd();

    if (null !== result.failure) {
      throw result.failure;
    }
    if (null !== result.serverError) {
      throw result.serverError;
    }
    return;
  }

  getOperatingSystems () {
    const self = this;
    return new Promise((resolve, reject) => {
      self.send_getOperatingSystems((error, result) => {
        return error ? reject(error) : resolve(result);
      });
    });
  }

  send_getOperatingSystems (callback) {
    const args = new SatelliteServer_getOperatingSystems_args();
    try {
      this.output.writeMessageBegin('getOperatingSystems', Thrift.MessageType.CALL, this.seqid);
      args.write(this.output);
      this.output.writeMessageEnd();
      const self = this;
      this.output.getTransport().flush(true, () => {
        let error = null, result = null;
        try {
          result = self.recv_getOperatingSystems();
        } catch (e) {
          error = e;
        }
        callback(error, result);
      });
    }
    catch (e) {
      if (typeof this.output.getTransport().reset === 'function') {
        this.output.getTransport().reset();
      }
      throw e;
    }
  }

  recv_getOperatingSystems () {
    const ret = this.input.readMessageBegin();
    const mtype = ret.mtype;
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(this.input);
      this.input.readMessageEnd();
      throw x;
    }
    const result = new SatelliteServer_getOperatingSystems_result();
    result.read(this.input);
    this.input.readMessageEnd();

    if (null !== result.success) {
      return result.success;
    }
    throw 'getOperatingSystems failed: unknown result';
  }

  getVirtualizers () {
    const self = this;
    return new Promise((resolve, reject) => {
      self.send_getVirtualizers((error, result) => {
        return error ? reject(error) : resolve(result);
      });
    });
  }

  send_getVirtualizers (callback) {
    const args = new SatelliteServer_getVirtualizers_args();
    try {
      this.output.writeMessageBegin('getVirtualizers', Thrift.MessageType.CALL, this.seqid);
      args.write(this.output);
      this.output.writeMessageEnd();
      const self = this;
      this.output.getTransport().flush(true, () => {
        let error = null, result = null;
        try {
          result = self.recv_getVirtualizers();
        } catch (e) {
          error = e;
        }
        callback(error, result);
      });
    }
    catch (e) {
      if (typeof this.output.getTransport().reset === 'function') {
        this.output.getTransport().reset();
      }
      throw e;
    }
  }

  recv_getVirtualizers () {
    const ret = this.input.readMessageBegin();
    const mtype = ret.mtype;
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(this.input);
      this.input.readMessageEnd();
      throw x;
    }
    const result = new SatelliteServer_getVirtualizers_result();
    result.read(this.input);
    this.input.readMessageEnd();

    if (null !== result.success) {
      return result.success;
    }
    throw 'getVirtualizers failed: unknown result';
  }

  getAllOrganizations () {
    const self = this;
    return new Promise((resolve, reject) => {
      self.send_getAllOrganizations((error, result) => {
        return error ? reject(error) : resolve(result);
      });
    });
  }

  send_getAllOrganizations (callback) {
    const args = new SatelliteServer_getAllOrganizations_args();
    try {
      this.output.writeMessageBegin('getAllOrganizations', Thrift.MessageType.CALL, this.seqid);
      args.write(this.output);
      this.output.writeMessageEnd();
      const self = this;
      this.output.getTransport().flush(true, () => {
        let error = null, result = null;
        try {
          result = self.recv_getAllOrganizations();
        } catch (e) {
          error = e;
        }
        callback(error, result);
      });
    }
    catch (e) {
      if (typeof this.output.getTransport().reset === 'function') {
        this.output.getTransport().reset();
      }
      throw e;
    }
  }

  recv_getAllOrganizations () {
    const ret = this.input.readMessageBegin();
    const mtype = ret.mtype;
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(this.input);
      this.input.readMessageEnd();
      throw x;
    }
    const result = new SatelliteServer_getAllOrganizations_result();
    result.read(this.input);
    this.input.readMessageEnd();

    if (null !== result.success) {
      return result.success;
    }
    throw 'getAllOrganizations failed: unknown result';
  }

  getLocations () {
    const self = this;
    return new Promise((resolve, reject) => {
      self.send_getLocations((error, result) => {
        return error ? reject(error) : resolve(result);
      });
    });
  }

  send_getLocations (callback) {
    const args = new SatelliteServer_getLocations_args();
    try {
      this.output.writeMessageBegin('getLocations', Thrift.MessageType.CALL, this.seqid);
      args.write(this.output);
      this.output.writeMessageEnd();
      const self = this;
      this.output.getTransport().flush(true, () => {
        let error = null, result = null;
        try {
          result = self.recv_getLocations();
        } catch (e) {
          error = e;
        }
        callback(error, result);
      });
    }
    catch (e) {
      if (typeof this.output.getTransport().reset === 'function') {
        this.output.getTransport().reset();
      }
      throw e;
    }
  }

  recv_getLocations () {
    const ret = this.input.readMessageBegin();
    const mtype = ret.mtype;
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(this.input);
      this.input.readMessageEnd();
      throw x;
    }
    const result = new SatelliteServer_getLocations_result();
    result.read(this.input);
    this.input.readMessageEnd();

    if (null !== result.success) {
      return result.success;
    }
    throw 'getLocations failed: unknown result';
  }

  getStatus () {
    const self = this;
    return new Promise((resolve, reject) => {
      self.send_getStatus((error, result) => {
        return error ? reject(error) : resolve(result);
      });
    });
  }

  send_getStatus (callback) {
    const args = new SatelliteServer_getStatus_args();
    try {
      this.output.writeMessageBegin('getStatus', Thrift.MessageType.CALL, this.seqid);
      args.write(this.output);
      this.output.writeMessageEnd();
      const self = this;
      this.output.getTransport().flush(true, () => {
        let error = null, result = null;
        try {
          result = self.recv_getStatus();
        } catch (e) {
          error = e;
        }
        callback(error, result);
      });
    }
    catch (e) {
      if (typeof this.output.getTransport().reset === 'function') {
        this.output.getTransport().reset();
      }
      throw e;
    }
  }

  recv_getStatus () {
    const ret = this.input.readMessageBegin();
    const mtype = ret.mtype;
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(this.input);
      this.input.readMessageEnd();
      throw x;
    }
    const result = new SatelliteServer_getStatus_result();
    result.read(this.input);
    this.input.readMessageEnd();

    if (null !== result.success) {
      return result.success;
    }
    throw 'getStatus failed: unknown result';
  }

  getImageList (userToken, tagSearch, page) {
    const self = this;
    return new Promise((resolve, reject) => {
      self.send_getImageList(userToken, tagSearch, page, (error, result) => {
        return error ? reject(error) : resolve(result);
      });
    });
  }

  send_getImageList (userToken, tagSearch, page, callback) {
    const params = {
      userToken: userToken,
      tagSearch: tagSearch,
      page: page
    };
    const args = new SatelliteServer_getImageList_args(params);
    try {
      this.output.writeMessageBegin('getImageList', Thrift.MessageType.CALL, this.seqid);
      args.write(this.output);
      this.output.writeMessageEnd();
      const self = this;
      this.output.getTransport().flush(true, () => {
        let error = null, result = null;
        try {
          result = self.recv_getImageList();
        } catch (e) {
          error = e;
        }
        callback(error, result);
      });
    }
    catch (e) {
      if (typeof this.output.getTransport().reset === 'function') {
        this.output.getTransport().reset();
      }
      throw e;
    }
  }

  recv_getImageList () {
    const ret = this.input.readMessageBegin();
    const mtype = ret.mtype;
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(this.input);
      this.input.readMessageEnd();
      throw x;
    }
    const result = new SatelliteServer_getImageList_result();
    result.read(this.input);
    this.input.readMessageEnd();

    if (null !== result.authError) {
      throw result.authError;
    }
    if (null !== result.serverError) {
      throw result.serverError;
    }
    if (null !== result.success) {
      return result.success;
    }
    throw 'getImageList failed: unknown result';
  }

  getImageDetails (userToken, imageBaseId) {
    const self = this;
    return new Promise((resolve, reject) => {
      self.send_getImageDetails(userToken, imageBaseId, (error, result) => {
        return error ? reject(error) : resolve(result);
      });
    });
  }

  send_getImageDetails (userToken, imageBaseId, callback) {
    const params = {
      userToken: userToken,
      imageBaseId: imageBaseId
    };
    const args = new SatelliteServer_getImageDetails_args(params);
    try {
      this.output.writeMessageBegin('getImageDetails', Thrift.MessageType.CALL, this.seqid);
      args.write(this.output);
      this.output.writeMessageEnd();
      const self = this;
      this.output.getTransport().flush(true, () => {
        let error = null, result = null;
        try {
          result = self.recv_getImageDetails();
        } catch (e) {
          error = e;
        }
        callback(error, result);
      });
    }
    catch (e) {
      if (typeof this.output.getTransport().reset === 'function') {
        this.output.getTransport().reset();
      }
      throw e;
    }
  }

  recv_getImageDetails () {
    const ret = this.input.readMessageBegin();
    const mtype = ret.mtype;
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(this.input);
      this.input.readMessageEnd();
      throw x;
    }
    const result = new SatelliteServer_getImageDetails_result();
    result.read(this.input);
    this.input.readMessageEnd();

    if (null !== result.authError) {
      throw result.authError;
    }
    if (null !== result.notFound) {
      throw result.notFound;
    }
    if (null !== result.serverError) {
      throw result.serverError;
    }
    if (null !== result.success) {
      return result.success;
    }
    throw 'getImageDetails failed: unknown result';
  }

  createImage (userToken, imageName) {
    const self = this;
    return new Promise((resolve, reject) => {
      self.send_createImage(userToken, imageName, (error, result) => {
        return error ? reject(error) : resolve(result);
      });
    });
  }

  send_createImage (userToken, imageName, callback) {
    const params = {
      userToken: userToken,
      imageName: imageName
    };
    const args = new SatelliteServer_createImage_args(params);
    try {
      this.output.writeMessageBegin('createImage', Thrift.MessageType.CALL, this.seqid);
      args.write(this.output);
      this.output.writeMessageEnd();
      const self = this;
      this.output.getTransport().flush(true, () => {
        let error = null, result = null;
        try {
          result = self.recv_createImage();
        } catch (e) {
          error = e;
        }
        callback(error, result);
      });
    }
    catch (e) {
      if (typeof this.output.getTransport().reset === 'function') {
        this.output.getTransport().reset();
      }
      throw e;
    }
  }

  recv_createImage () {
    const ret = this.input.readMessageBegin();
    const mtype = ret.mtype;
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(this.input);
      this.input.readMessageEnd();
      throw x;
    }
    const result = new SatelliteServer_createImage_result();
    result.read(this.input);
    this.input.readMessageEnd();

    if (null !== result.authError) {
      throw result.authError;
    }
    if (null !== result.error) {
      throw result.error;
    }
    if (null !== result.success) {
      return result.success;
    }
    throw 'createImage failed: unknown result';
  }

  updateImageBase (userToken, imageBaseId, image) {
    const self = this;
    return new Promise((resolve, reject) => {
      self.send_updateImageBase(userToken, imageBaseId, image, (error, result) => {
        return error ? reject(error) : resolve(result);
      });
    });
  }

  send_updateImageBase (userToken, imageBaseId, image, callback) {
    const params = {
      userToken: userToken,
      imageBaseId: imageBaseId,
      image: image
    };
    const args = new SatelliteServer_updateImageBase_args(params);
    try {
      this.output.writeMessageBegin('updateImageBase', Thrift.MessageType.CALL, this.seqid);
      args.write(this.output);
      this.output.writeMessageEnd();
      const self = this;
      this.output.getTransport().flush(true, () => {
        let error = null, result = null;
        try {
          result = self.recv_updateImageBase();
        } catch (e) {
          error = e;
        }
        callback(error, result);
      });
    }
    catch (e) {
      if (typeof this.output.getTransport().reset === 'function') {
        this.output.getTransport().reset();
      }
      throw e;
    }
  }

  recv_updateImageBase () {
    const ret = this.input.readMessageBegin();
    const mtype = ret.mtype;
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(this.input);
      this.input.readMessageEnd();
      throw x;
    }
    const result = new SatelliteServer_updateImageBase_result();
    result.read(this.input);
    this.input.readMessageEnd();

    if (null !== result.authError) {
      throw result.authError;
    }
    if (null !== result.notFound) {
      throw result.notFound;
    }
    if (null !== result.imgError) {
      throw result.imgError;
    }
    return;
  }

  updateImageVersion (userToken, imageVersionId, image) {
    const self = this;
    return new Promise((resolve, reject) => {
      self.send_updateImageVersion(userToken, imageVersionId, image, (error, result) => {
        return error ? reject(error) : resolve(result);
      });
    });
  }

  send_updateImageVersion (userToken, imageVersionId, image, callback) {
    const params = {
      userToken: userToken,
      imageVersionId: imageVersionId,
      image: image
    };
    const args = new SatelliteServer_updateImageVersion_args(params);
    try {
      this.output.writeMessageBegin('updateImageVersion', Thrift.MessageType.CALL, this.seqid);
      args.write(this.output);
      this.output.writeMessageEnd();
      const self = this;
      this.output.getTransport().flush(true, () => {
        let error = null, result = null;
        try {
          result = self.recv_updateImageVersion();
        } catch (e) {
          error = e;
        }
        callback(error, result);
      });
    }
    catch (e) {
      if (typeof this.output.getTransport().reset === 'function') {
        this.output.getTransport().reset();
      }
      throw e;
    }
  }

  recv_updateImageVersion () {
    const ret = this.input.readMessageBegin();
    const mtype = ret.mtype;
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(this.input);
      this.input.readMessageEnd();
      throw x;
    }
    const result = new SatelliteServer_updateImageVersion_result();
    result.read(this.input);
    this.input.readMessageEnd();

    if (null !== result.authError) {
      throw result.authError;
    }
    if (null !== result.notFound) {
      throw result.notFound;
    }
    if (null !== result.imgError) {
      throw result.imgError;
    }
    return;
  }

  deleteImageVersion (userToken, imageVersionId) {
    const self = this;
    return new Promise((resolve, reject) => {
      self.send_deleteImageVersion(userToken, imageVersionId, (error, result) => {
        return error ? reject(error) : resolve(result);
      });
    });
  }

  send_deleteImageVersion (userToken, imageVersionId, callback) {
    const params = {
      userToken: userToken,
      imageVersionId: imageVersionId
    };
    const args = new SatelliteServer_deleteImageVersion_args(params);
    try {
      this.output.writeMessageBegin('deleteImageVersion', Thrift.MessageType.CALL, this.seqid);
      args.write(this.output);
      this.output.writeMessageEnd();
      const self = this;
      this.output.getTransport().flush(true, () => {
        let error = null, result = null;
        try {
          result = self.recv_deleteImageVersion();
        } catch (e) {
          error = e;
        }
        callback(error, result);
      });
    }
    catch (e) {
      if (typeof this.output.getTransport().reset === 'function') {
        this.output.getTransport().reset();
      }
      throw e;
    }
  }

  recv_deleteImageVersion () {
    const ret = this.input.readMessageBegin();
    const mtype = ret.mtype;
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(this.input);
      this.input.readMessageEnd();
      throw x;
    }
    const result = new SatelliteServer_deleteImageVersion_result();
    result.read(this.input);
    this.input.readMessageEnd();

    if (null !== result.authError) {
      throw result.authError;
    }
    if (null !== result.notFound) {
      throw result.notFound;
    }
    if (null !== result.serverError) {
      throw result.serverError;
    }
    return;
  }

  deleteImageBase (userToken, imageBaseId) {
    const self = this;
    return new Promise((resolve, reject) => {
      self.send_deleteImageBase(userToken, imageBaseId, (error, result) => {
        return error ? reject(error) : resolve(result);
      });
    });
  }

  send_deleteImageBase (userToken, imageBaseId, callback) {
    const params = {
      userToken: userToken,
      imageBaseId: imageBaseId
    };
    const args = new SatelliteServer_deleteImageBase_args(params);
    try {
      this.output.writeMessageBegin('deleteImageBase', Thrift.MessageType.CALL, this.seqid);
      args.write(this.output);
      this.output.writeMessageEnd();
      const self = this;
      this.output.getTransport().flush(true, () => {
        let error = null, result = null;
        try {
          result = self.recv_deleteImageBase();
        } catch (e) {
          error = e;
        }
        callback(error, result);
      });
    }
    catch (e) {
      if (typeof this.output.getTransport().reset === 'function') {
        this.output.getTransport().reset();
      }
      throw e;
    }
  }

  recv_deleteImageBase () {
    const ret = this.input.readMessageBegin();
    const mtype = ret.mtype;
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(this.input);
      this.input.readMessageEnd();
      throw x;
    }
    const result = new SatelliteServer_deleteImageBase_result();
    result.read(this.input);
    this.input.readMessageEnd();

    if (null !== result.authError) {
      throw result.authError;
    }
    if (null !== result.notFound) {
      throw result.notFound;
    }
    if (null !== result.serverError) {
      throw result.serverError;
    }
    return;
  }

  writeImagePermissions (userToken, imageBaseId, permissions) {
    const self = this;
    return new Promise((resolve, reject) => {
      self.send_writeImagePermissions(userToken, imageBaseId, permissions, (error, result) => {
        return error ? reject(error) : resolve(result);
      });
    });
  }

  send_writeImagePermissions (userToken, imageBaseId, permissions, callback) {
    const params = {
      userToken: userToken,
      imageBaseId: imageBaseId,
      permissions: permissions
    };
    const args = new SatelliteServer_writeImagePermissions_args(params);
    try {
      this.output.writeMessageBegin('writeImagePermissions', Thrift.MessageType.CALL, this.seqid);
      args.write(this.output);
      this.output.writeMessageEnd();
      const self = this;
      this.output.getTransport().flush(true, () => {
        let error = null, result = null;
        try {
          result = self.recv_writeImagePermissions();
        } catch (e) {
          error = e;
        }
        callback(error, result);
      });
    }
    catch (e) {
      if (typeof this.output.getTransport().reset === 'function') {
        this.output.getTransport().reset();
      }
      throw e;
    }
  }

  recv_writeImagePermissions () {
    const ret = this.input.readMessageBegin();
    const mtype = ret.mtype;
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(this.input);
      this.input.readMessageEnd();
      throw x;
    }
    const result = new SatelliteServer_writeImagePermissions_result();
    result.read(this.input);
    this.input.readMessageEnd();

    if (null !== result.authError) {
      throw result.authError;
    }
    if (null !== result.notFound) {
      throw result.notFound;
    }
    if (null !== result.serverError) {
      throw result.serverError;
    }
    return;
  }

  getImagePermissions (userToken, imageBaseId) {
    const self = this;
    return new Promise((resolve, reject) => {
      self.send_getImagePermissions(userToken, imageBaseId, (error, result) => {
        return error ? reject(error) : resolve(result);
      });
    });
  }

  send_getImagePermissions (userToken, imageBaseId, callback) {
    const params = {
      userToken: userToken,
      imageBaseId: imageBaseId
    };
    const args = new SatelliteServer_getImagePermissions_args(params);
    try {
      this.output.writeMessageBegin('getImagePermissions', Thrift.MessageType.CALL, this.seqid);
      args.write(this.output);
      this.output.writeMessageEnd();
      const self = this;
      this.output.getTransport().flush(true, () => {
        let error = null, result = null;
        try {
          result = self.recv_getImagePermissions();
        } catch (e) {
          error = e;
        }
        callback(error, result);
      });
    }
    catch (e) {
      if (typeof this.output.getTransport().reset === 'function') {
        this.output.getTransport().reset();
      }
      throw e;
    }
  }

  recv_getImagePermissions () {
    const ret = this.input.readMessageBegin();
    const mtype = ret.mtype;
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(this.input);
      this.input.readMessageEnd();
      throw x;
    }
    const result = new SatelliteServer_getImagePermissions_result();
    result.read(this.input);
    this.input.readMessageEnd();

    if (null !== result.authError) {
      throw result.authError;
    }
    if (null !== result.notFound) {
      throw result.notFound;
    }
    if (null !== result.serverError) {
      throw result.serverError;
    }
    if (null !== result.success) {
      return result.success;
    }
    throw 'getImagePermissions failed: unknown result';
  }

  setImageOwner (userToken, imageBaseId, newOwnerId) {
    const self = this;
    return new Promise((resolve, reject) => {
      self.send_setImageOwner(userToken, imageBaseId, newOwnerId, (error, result) => {
        return error ? reject(error) : resolve(result);
      });
    });
  }

  send_setImageOwner (userToken, imageBaseId, newOwnerId, callback) {
    const params = {
      userToken: userToken,
      imageBaseId: imageBaseId,
      newOwnerId: newOwnerId
    };
    const args = new SatelliteServer_setImageOwner_args(params);
    try {
      this.output.writeMessageBegin('setImageOwner', Thrift.MessageType.CALL, this.seqid);
      args.write(this.output);
      this.output.writeMessageEnd();
      const self = this;
      this.output.getTransport().flush(true, () => {
        let error = null, result = null;
        try {
          result = self.recv_setImageOwner();
        } catch (e) {
          error = e;
        }
        callback(error, result);
      });
    }
    catch (e) {
      if (typeof this.output.getTransport().reset === 'function') {
        this.output.getTransport().reset();
      }
      throw e;
    }
  }

  recv_setImageOwner () {
    const ret = this.input.readMessageBegin();
    const mtype = ret.mtype;
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(this.input);
      this.input.readMessageEnd();
      throw x;
    }
    const result = new SatelliteServer_setImageOwner_result();
    result.read(this.input);
    this.input.readMessageEnd();

    if (null !== result.authError) {
      throw result.authError;
    }
    if (null !== result.notFound) {
      throw result.notFound;
    }
    if (null !== result.serverError) {
      throw result.serverError;
    }
    return;
  }

  setImageVersionExpiry (userToken, imageBaseId, expireTime) {
    const self = this;
    return new Promise((resolve, reject) => {
      self.send_setImageVersionExpiry(userToken, imageBaseId, expireTime, (error, result) => {
        return error ? reject(error) : resolve(result);
      });
    });
  }

  send_setImageVersionExpiry (userToken, imageBaseId, expireTime, callback) {
    const params = {
      userToken: userToken,
      imageBaseId: imageBaseId,
      expireTime: expireTime
    };
    const args = new SatelliteServer_setImageVersionExpiry_args(params);
    try {
      this.output.writeMessageBegin('setImageVersionExpiry', Thrift.MessageType.CALL, this.seqid);
      args.write(this.output);
      this.output.writeMessageEnd();
      const self = this;
      this.output.getTransport().flush(true, () => {
        let error = null, result = null;
        try {
          result = self.recv_setImageVersionExpiry();
        } catch (e) {
          error = e;
        }
        callback(error, result);
      });
    }
    catch (e) {
      if (typeof this.output.getTransport().reset === 'function') {
        this.output.getTransport().reset();
      }
      throw e;
    }
  }

  recv_setImageVersionExpiry () {
    const ret = this.input.readMessageBegin();
    const mtype = ret.mtype;
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(this.input);
      this.input.readMessageEnd();
      throw x;
    }
    const result = new SatelliteServer_setImageVersionExpiry_result();
    result.read(this.input);
    this.input.readMessageEnd();

    if (null !== result.authError) {
      throw result.authError;
    }
    if (null !== result.notFound) {
      throw result.notFound;
    }
    if (null !== result.serverError) {
      throw result.serverError;
    }
    if (null !== result.dateError) {
      throw result.dateError;
    }
    return;
  }

  getImageVersionVirtConfig (userToken, imageVersionId) {
    const self = this;
    return new Promise((resolve, reject) => {
      self.send_getImageVersionVirtConfig(userToken, imageVersionId, (error, result) => {
        return error ? reject(error) : resolve(result);
      });
    });
  }

  send_getImageVersionVirtConfig (userToken, imageVersionId, callback) {
    const params = {
      userToken: userToken,
      imageVersionId: imageVersionId
    };
    const args = new SatelliteServer_getImageVersionVirtConfig_args(params);
    try {
      this.output.writeMessageBegin('getImageVersionVirtConfig', Thrift.MessageType.CALL, this.seqid);
      args.write(this.output);
      this.output.writeMessageEnd();
      const self = this;
      this.output.getTransport().flush(true, () => {
        let error = null, result = null;
        try {
          result = self.recv_getImageVersionVirtConfig();
        } catch (e) {
          error = e;
        }
        callback(error, result);
      });
    }
    catch (e) {
      if (typeof this.output.getTransport().reset === 'function') {
        this.output.getTransport().reset();
      }
      throw e;
    }
  }

  recv_getImageVersionVirtConfig () {
    const ret = this.input.readMessageBegin();
    const mtype = ret.mtype;
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(this.input);
      this.input.readMessageEnd();
      throw x;
    }
    const result = new SatelliteServer_getImageVersionVirtConfig_result();
    result.read(this.input);
    this.input.readMessageEnd();

    if (null !== result.authError) {
      throw result.authError;
    }
    if (null !== result.notFound) {
      throw result.notFound;
    }
    if (null !== result.serverError) {
      throw result.serverError;
    }
    if (null !== result.success) {
      return result.success;
    }
    throw 'getImageVersionVirtConfig failed: unknown result';
  }

  setImageVersionVirtConfig (userToken, imageVersionId, meta) {
    const self = this;
    return new Promise((resolve, reject) => {
      self.send_setImageVersionVirtConfig(userToken, imageVersionId, meta, (error, result) => {
        return error ? reject(error) : resolve(result);
      });
    });
  }

  send_setImageVersionVirtConfig (userToken, imageVersionId, meta, callback) {
    const params = {
      userToken: userToken,
      imageVersionId: imageVersionId,
      meta: meta
    };
    const args = new SatelliteServer_setImageVersionVirtConfig_args(params);
    try {
      this.output.writeMessageBegin('setImageVersionVirtConfig', Thrift.MessageType.CALL, this.seqid);
      args.write(this.output);
      this.output.writeMessageEnd();
      const self = this;
      this.output.getTransport().flush(true, () => {
        let error = null, result = null;
        try {
          result = self.recv_setImageVersionVirtConfig();
        } catch (e) {
          error = e;
        }
        callback(error, result);
      });
    }
    catch (e) {
      if (typeof this.output.getTransport().reset === 'function') {
        this.output.getTransport().reset();
      }
      throw e;
    }
  }

  recv_setImageVersionVirtConfig () {
    const ret = this.input.readMessageBegin();
    const mtype = ret.mtype;
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(this.input);
      this.input.readMessageEnd();
      throw x;
    }
    const result = new SatelliteServer_setImageVersionVirtConfig_result();
    result.read(this.input);
    this.input.readMessageEnd();

    if (null !== result.authError) {
      throw result.authError;
    }
    if (null !== result.notFound) {
      throw result.notFound;
    }
    if (null !== result.serverError) {
      throw result.serverError;
    }
    return;
  }

  requestImageReplication (userToken, imageVersionId) {
    const self = this;
    return new Promise((resolve, reject) => {
      self.send_requestImageReplication(userToken, imageVersionId, (error, result) => {
        return error ? reject(error) : resolve(result);
      });
    });
  }

  send_requestImageReplication (userToken, imageVersionId, callback) {
    const params = {
      userToken: userToken,
      imageVersionId: imageVersionId
    };
    const args = new SatelliteServer_requestImageReplication_args(params);
    try {
      this.output.writeMessageBegin('requestImageReplication', Thrift.MessageType.CALL, this.seqid);
      args.write(this.output);
      this.output.writeMessageEnd();
      const self = this;
      this.output.getTransport().flush(true, () => {
        let error = null, result = null;
        try {
          result = self.recv_requestImageReplication();
        } catch (e) {
          error = e;
        }
        callback(error, result);
      });
    }
    catch (e) {
      if (typeof this.output.getTransport().reset === 'function') {
        this.output.getTransport().reset();
      }
      throw e;
    }
  }

  recv_requestImageReplication () {
    const ret = this.input.readMessageBegin();
    const mtype = ret.mtype;
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(this.input);
      this.input.readMessageEnd();
      throw x;
    }
    const result = new SatelliteServer_requestImageReplication_result();
    result.read(this.input);
    this.input.readMessageEnd();

    if (null !== result.authError) {
      throw result.authError;
    }
    if (null !== result.notFound) {
      throw result.notFound;
    }
    if (null !== result.serverError) {
      throw result.serverError;
    }
    if (null !== result.success) {
      return result.success;
    }
    throw 'requestImageReplication failed: unknown result';
  }

  publishImageVersion (userToken, imageVersionId) {
    const self = this;
    return new Promise((resolve, reject) => {
      self.send_publishImageVersion(userToken, imageVersionId, (error, result) => {
        return error ? reject(error) : resolve(result);
      });
    });
  }

  send_publishImageVersion (userToken, imageVersionId, callback) {
    const params = {
      userToken: userToken,
      imageVersionId: imageVersionId
    };
    const args = new SatelliteServer_publishImageVersion_args(params);
    try {
      this.output.writeMessageBegin('publishImageVersion', Thrift.MessageType.CALL, this.seqid);
      args.write(this.output);
      this.output.writeMessageEnd();
      const self = this;
      this.output.getTransport().flush(true, () => {
        let error = null, result = null;
        try {
          result = self.recv_publishImageVersion();
        } catch (e) {
          error = e;
        }
        callback(error, result);
      });
    }
    catch (e) {
      if (typeof this.output.getTransport().reset === 'function') {
        this.output.getTransport().reset();
      }
      throw e;
    }
  }

  recv_publishImageVersion () {
    const ret = this.input.readMessageBegin();
    const mtype = ret.mtype;
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(this.input);
      this.input.readMessageEnd();
      throw x;
    }
    const result = new SatelliteServer_publishImageVersion_result();
    result.read(this.input);
    this.input.readMessageEnd();

    if (null !== result.authError) {
      throw result.authError;
    }
    if (null !== result.notFound) {
      throw result.notFound;
    }
    if (null !== result.serverError) {
      throw result.serverError;
    }
    if (null !== result.tre) {
      throw result.tre;
    }
    if (null !== result.success) {
      return result.success;
    }
    throw 'publishImageVersion failed: unknown result';
  }

  createLecture (userToken, lecture) {
    const self = this;
    return new Promise((resolve, reject) => {
      self.send_createLecture(userToken, lecture, (error, result) => {
        return error ? reject(error) : resolve(result);
      });
    });
  }

  send_createLecture (userToken, lecture, callback) {
    const params = {
      userToken: userToken,
      lecture: lecture
    };
    const args = new SatelliteServer_createLecture_args(params);
    try {
      this.output.writeMessageBegin('createLecture', Thrift.MessageType.CALL, this.seqid);
      args.write(this.output);
      this.output.writeMessageEnd();
      const self = this;
      this.output.getTransport().flush(true, () => {
        let error = null, result = null;
        try {
          result = self.recv_createLecture();
        } catch (e) {
          error = e;
        }
        callback(error, result);
      });
    }
    catch (e) {
      if (typeof this.output.getTransport().reset === 'function') {
        this.output.getTransport().reset();
      }
      throw e;
    }
  }

  recv_createLecture () {
    const ret = this.input.readMessageBegin();
    const mtype = ret.mtype;
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(this.input);
      this.input.readMessageEnd();
      throw x;
    }
    const result = new SatelliteServer_createLecture_result();
    result.read(this.input);
    this.input.readMessageEnd();

    if (null !== result.authError) {
      throw result.authError;
    }
    if (null !== result.serverError) {
      throw result.serverError;
    }
    if (null !== result.dateError) {
      throw result.dateError;
    }
    if (null !== result.notFound) {
      throw result.notFound;
    }
    if (null !== result.success) {
      return result.success;
    }
    throw 'createLecture failed: unknown result';
  }

  updateLecture (userToken, lectureId, lecture) {
    const self = this;
    return new Promise((resolve, reject) => {
      self.send_updateLecture(userToken, lectureId, lecture, (error, result) => {
        return error ? reject(error) : resolve(result);
      });
    });
  }

  send_updateLecture (userToken, lectureId, lecture, callback) {
    const params = {
      userToken: userToken,
      lectureId: lectureId,
      lecture: lecture
    };
    const args = new SatelliteServer_updateLecture_args(params);
    try {
      this.output.writeMessageBegin('updateLecture', Thrift.MessageType.CALL, this.seqid);
      args.write(this.output);
      this.output.writeMessageEnd();
      const self = this;
      this.output.getTransport().flush(true, () => {
        let error = null, result = null;
        try {
          result = self.recv_updateLecture();
        } catch (e) {
          error = e;
        }
        callback(error, result);
      });
    }
    catch (e) {
      if (typeof this.output.getTransport().reset === 'function') {
        this.output.getTransport().reset();
      }
      throw e;
    }
  }

  recv_updateLecture () {
    const ret = this.input.readMessageBegin();
    const mtype = ret.mtype;
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(this.input);
      this.input.readMessageEnd();
      throw x;
    }
    const result = new SatelliteServer_updateLecture_result();
    result.read(this.input);
    this.input.readMessageEnd();

    if (null !== result.authError) {
      throw result.authError;
    }
    if (null !== result.notFound) {
      throw result.notFound;
    }
    if (null !== result.serverError) {
      throw result.serverError;
    }
    if (null !== result.dateError) {
      throw result.dateError;
    }
    return;
  }

  getLectureList (userToken, page) {
    const self = this;
    return new Promise((resolve, reject) => {
      self.send_getLectureList(userToken, page, (error, result) => {
        return error ? reject(error) : resolve(result);
      });
    });
  }

  send_getLectureList (userToken, page, callback) {
    const params = {
      userToken: userToken,
      page: page
    };
    const args = new SatelliteServer_getLectureList_args(params);
    try {
      this.output.writeMessageBegin('getLectureList', Thrift.MessageType.CALL, this.seqid);
      args.write(this.output);
      this.output.writeMessageEnd();
      const self = this;
      this.output.getTransport().flush(true, () => {
        let error = null, result = null;
        try {
          result = self.recv_getLectureList();
        } catch (e) {
          error = e;
        }
        callback(error, result);
      });
    }
    catch (e) {
      if (typeof this.output.getTransport().reset === 'function') {
        this.output.getTransport().reset();
      }
      throw e;
    }
  }

  recv_getLectureList () {
    const ret = this.input.readMessageBegin();
    const mtype = ret.mtype;
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(this.input);
      this.input.readMessageEnd();
      throw x;
    }
    const result = new SatelliteServer_getLectureList_result();
    result.read(this.input);
    this.input.readMessageEnd();

    if (null !== result.authError) {
      throw result.authError;
    }
    if (null !== result.serverError) {
      throw result.serverError;
    }
    if (null !== result.success) {
      return result.success;
    }
    throw 'getLectureList failed: unknown result';
  }

  getLectureDetails (userToken, lectureId) {
    const self = this;
    return new Promise((resolve, reject) => {
      self.send_getLectureDetails(userToken, lectureId, (error, result) => {
        return error ? reject(error) : resolve(result);
      });
    });
  }

  send_getLectureDetails (userToken, lectureId, callback) {
    const params = {
      userToken: userToken,
      lectureId: lectureId
    };
    const args = new SatelliteServer_getLectureDetails_args(params);
    try {
      this.output.writeMessageBegin('getLectureDetails', Thrift.MessageType.CALL, this.seqid);
      args.write(this.output);
      this.output.writeMessageEnd();
      const self = this;
      this.output.getTransport().flush(true, () => {
        let error = null, result = null;
        try {
          result = self.recv_getLectureDetails();
        } catch (e) {
          error = e;
        }
        callback(error, result);
      });
    }
    catch (e) {
      if (typeof this.output.getTransport().reset === 'function') {
        this.output.getTransport().reset();
      }
      throw e;
    }
  }

  recv_getLectureDetails () {
    const ret = this.input.readMessageBegin();
    const mtype = ret.mtype;
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(this.input);
      this.input.readMessageEnd();
      throw x;
    }
    const result = new SatelliteServer_getLectureDetails_result();
    result.read(this.input);
    this.input.readMessageEnd();

    if (null !== result.authError) {
      throw result.authError;
    }
    if (null !== result.notFound) {
      throw result.notFound;
    }
    if (null !== result.serverError) {
      throw result.serverError;
    }
    if (null !== result.success) {
      return result.success;
    }
    throw 'getLectureDetails failed: unknown result';
  }

  deleteLecture (userToken, lectureId) {
    const self = this;
    return new Promise((resolve, reject) => {
      self.send_deleteLecture(userToken, lectureId, (error, result) => {
        return error ? reject(error) : resolve(result);
      });
    });
  }

  send_deleteLecture (userToken, lectureId, callback) {
    const params = {
      userToken: userToken,
      lectureId: lectureId
    };
    const args = new SatelliteServer_deleteLecture_args(params);
    try {
      this.output.writeMessageBegin('deleteLecture', Thrift.MessageType.CALL, this.seqid);
      args.write(this.output);
      this.output.writeMessageEnd();
      const self = this;
      this.output.getTransport().flush(true, () => {
        let error = null, result = null;
        try {
          result = self.recv_deleteLecture();
        } catch (e) {
          error = e;
        }
        callback(error, result);
      });
    }
    catch (e) {
      if (typeof this.output.getTransport().reset === 'function') {
        this.output.getTransport().reset();
      }
      throw e;
    }
  }

  recv_deleteLecture () {
    const ret = this.input.readMessageBegin();
    const mtype = ret.mtype;
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(this.input);
      this.input.readMessageEnd();
      throw x;
    }
    const result = new SatelliteServer_deleteLecture_result();
    result.read(this.input);
    this.input.readMessageEnd();

    if (null !== result.authError) {
      throw result.authError;
    }
    if (null !== result.notFound) {
      throw result.notFound;
    }
    if (null !== result.serverError) {
      throw result.serverError;
    }
    return;
  }

  writeLecturePermissions (userToken, lectureId, permissions) {
    const self = this;
    return new Promise((resolve, reject) => {
      self.send_writeLecturePermissions(userToken, lectureId, permissions, (error, result) => {
        return error ? reject(error) : resolve(result);
      });
    });
  }

  send_writeLecturePermissions (userToken, lectureId, permissions, callback) {
    const params = {
      userToken: userToken,
      lectureId: lectureId,
      permissions: permissions
    };
    const args = new SatelliteServer_writeLecturePermissions_args(params);
    try {
      this.output.writeMessageBegin('writeLecturePermissions', Thrift.MessageType.CALL, this.seqid);
      args.write(this.output);
      this.output.writeMessageEnd();
      const self = this;
      this.output.getTransport().flush(true, () => {
        let error = null, result = null;
        try {
          result = self.recv_writeLecturePermissions();
        } catch (e) {
          error = e;
        }
        callback(error, result);
      });
    }
    catch (e) {
      if (typeof this.output.getTransport().reset === 'function') {
        this.output.getTransport().reset();
      }
      throw e;
    }
  }

  recv_writeLecturePermissions () {
    const ret = this.input.readMessageBegin();
    const mtype = ret.mtype;
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(this.input);
      this.input.readMessageEnd();
      throw x;
    }
    const result = new SatelliteServer_writeLecturePermissions_result();
    result.read(this.input);
    this.input.readMessageEnd();

    if (null !== result.authError) {
      throw result.authError;
    }
    if (null !== result.notFound) {
      throw result.notFound;
    }
    if (null !== result.serverError) {
      throw result.serverError;
    }
    return;
  }

  getLecturePermissions (userToken, lectureId) {
    const self = this;
    return new Promise((resolve, reject) => {
      self.send_getLecturePermissions(userToken, lectureId, (error, result) => {
        return error ? reject(error) : resolve(result);
      });
    });
  }

  send_getLecturePermissions (userToken, lectureId, callback) {
    const params = {
      userToken: userToken,
      lectureId: lectureId
    };
    const args = new SatelliteServer_getLecturePermissions_args(params);
    try {
      this.output.writeMessageBegin('getLecturePermissions', Thrift.MessageType.CALL, this.seqid);
      args.write(this.output);
      this.output.writeMessageEnd();
      const self = this;
      this.output.getTransport().flush(true, () => {
        let error = null, result = null;
        try {
          result = self.recv_getLecturePermissions();
        } catch (e) {
          error = e;
        }
        callback(error, result);
      });
    }
    catch (e) {
      if (typeof this.output.getTransport().reset === 'function') {
        this.output.getTransport().reset();
      }
      throw e;
    }
  }

  recv_getLecturePermissions () {
    const ret = this.input.readMessageBegin();
    const mtype = ret.mtype;
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(this.input);
      this.input.readMessageEnd();
      throw x;
    }
    const result = new SatelliteServer_getLecturePermissions_result();
    result.read(this.input);
    this.input.readMessageEnd();

    if (null !== result.authError) {
      throw result.authError;
    }
    if (null !== result.notFound) {
      throw result.notFound;
    }
    if (null !== result.serverError) {
      throw result.serverError;
    }
    if (null !== result.success) {
      return result.success;
    }
    throw 'getLecturePermissions failed: unknown result';
  }

  setLectureOwner (userToken, lectureId, newOwnerId) {
    const self = this;
    return new Promise((resolve, reject) => {
      self.send_setLectureOwner(userToken, lectureId, newOwnerId, (error, result) => {
        return error ? reject(error) : resolve(result);
      });
    });
  }

  send_setLectureOwner (userToken, lectureId, newOwnerId, callback) {
    const params = {
      userToken: userToken,
      lectureId: lectureId,
      newOwnerId: newOwnerId
    };
    const args = new SatelliteServer_setLectureOwner_args(params);
    try {
      this.output.writeMessageBegin('setLectureOwner', Thrift.MessageType.CALL, this.seqid);
      args.write(this.output);
      this.output.writeMessageEnd();
      const self = this;
      this.output.getTransport().flush(true, () => {
        let error = null, result = null;
        try {
          result = self.recv_setLectureOwner();
        } catch (e) {
          error = e;
        }
        callback(error, result);
      });
    }
    catch (e) {
      if (typeof this.output.getTransport().reset === 'function') {
        this.output.getTransport().reset();
      }
      throw e;
    }
  }

  recv_setLectureOwner () {
    const ret = this.input.readMessageBegin();
    const mtype = ret.mtype;
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(this.input);
      this.input.readMessageEnd();
      throw x;
    }
    const result = new SatelliteServer_setLectureOwner_result();
    result.read(this.input);
    this.input.readMessageEnd();

    if (null !== result.authError) {
      throw result.authError;
    }
    if (null !== result.notFound) {
      throw result.notFound;
    }
    if (null !== result.serverError) {
      throw result.serverError;
    }
    return;
  }

  getPredefinedData (userToken) {
    const self = this;
    return new Promise((resolve, reject) => {
      self.send_getPredefinedData(userToken, (error, result) => {
        return error ? reject(error) : resolve(result);
      });
    });
  }

  send_getPredefinedData (userToken, callback) {
    const params = {
      userToken: userToken
    };
    const args = new SatelliteServer_getPredefinedData_args(params);
    try {
      this.output.writeMessageBegin('getPredefinedData', Thrift.MessageType.CALL, this.seqid);
      args.write(this.output);
      this.output.writeMessageEnd();
      const self = this;
      this.output.getTransport().flush(true, () => {
        let error = null, result = null;
        try {
          result = self.recv_getPredefinedData();
        } catch (e) {
          error = e;
        }
        callback(error, result);
      });
    }
    catch (e) {
      if (typeof this.output.getTransport().reset === 'function') {
        this.output.getTransport().reset();
      }
      throw e;
    }
  }

  recv_getPredefinedData () {
    const ret = this.input.readMessageBegin();
    const mtype = ret.mtype;
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(this.input);
      this.input.readMessageEnd();
      throw x;
    }
    const result = new SatelliteServer_getPredefinedData_result();
    result.read(this.input);
    this.input.readMessageEnd();

    if (null !== result.authError) {
      throw result.authError;
    }
    if (null !== result.serverError) {
      throw result.serverError;
    }
    if (null !== result.success) {
      return result.success;
    }
    throw 'getPredefinedData failed: unknown result';
  }
};
