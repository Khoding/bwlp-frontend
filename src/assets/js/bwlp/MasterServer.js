//
// Autogenerated by Thrift Compiler (0.16.0)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
if (typeof Int64 === 'undefined' && typeof require === 'function') {
  const Int64 = require('node-int64');
}


//HELPER FUNCTIONS AND STRUCTURES

MasterServer_ping_args = class {
  constructor(args) {
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      input.skip(ftype);
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('MasterServer_ping_args');
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
MasterServer_ping_result = class {
  constructor(args) {
    this.success = null;
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = args.success;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.BOOL) {
          this.success = input.readBool().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 0:
          input.skip(ftype);
          break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('MasterServer_ping_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
      output.writeBool(this.success);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
MasterServer_authenticate_args = class {
  constructor(args) {
    this.login = null;
    this.password = null;
    if (args) {
      if (args.login !== undefined && args.login !== null) {
        this.login = args.login;
      }
      if (args.password !== undefined && args.password !== null) {
        this.password = args.password;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.login = input.readString().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRING) {
          this.password = input.readString().value;
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('MasterServer_authenticate_args');
    if (this.login !== null && this.login !== undefined) {
      output.writeFieldBegin('login', Thrift.Type.STRING, 1);
      output.writeString(this.login);
      output.writeFieldEnd();
    }
    if (this.password !== null && this.password !== undefined) {
      output.writeFieldBegin('password', Thrift.Type.STRING, 2);
      output.writeString(this.password);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
MasterServer_authenticate_result = class {
  constructor(args) {
    this.success = null;
    this.failure = null;
    this.error = null;
    if (args instanceof TAuthorizationException) {
        this.failure = args;
        return;
    }
    if (args instanceof TInvocationException) {
        this.error = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = new SessionData(args.success);
      }
      if (args.failure !== undefined && args.failure !== null) {
        this.failure = args.failure;
      }
      if (args.error !== undefined && args.error !== null) {
        this.error = args.error;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.STRUCT) {
          this.success = new SessionData();
          this.success.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.failure = new TAuthorizationException();
          this.failure.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.error = new TInvocationException();
          this.error.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('MasterServer_authenticate_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
      this.success.write(output);
      output.writeFieldEnd();
    }
    if (this.failure !== null && this.failure !== undefined) {
      output.writeFieldBegin('failure', Thrift.Type.STRUCT, 1);
      this.failure.write(output);
      output.writeFieldEnd();
    }
    if (this.error !== null && this.error !== undefined) {
      output.writeFieldBegin('error', Thrift.Type.STRUCT, 2);
      this.error.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
MasterServer_localAccountLogin_args = class {
  constructor(args) {
    this.login = null;
    this.password = null;
    if (args) {
      if (args.login !== undefined && args.login !== null) {
        this.login = args.login;
      }
      if (args.password !== undefined && args.password !== null) {
        this.password = args.password;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.login = input.readString().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRING) {
          this.password = input.readString().value;
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('MasterServer_localAccountLogin_args');
    if (this.login !== null && this.login !== undefined) {
      output.writeFieldBegin('login', Thrift.Type.STRING, 1);
      output.writeString(this.login);
      output.writeFieldEnd();
    }
    if (this.password !== null && this.password !== undefined) {
      output.writeFieldBegin('password', Thrift.Type.STRING, 2);
      output.writeString(this.password);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
MasterServer_localAccountLogin_result = class {
  constructor(args) {
    this.success = null;
    this.failure = null;
    this.error = null;
    if (args instanceof TAuthorizationException) {
        this.failure = args;
        return;
    }
    if (args instanceof TInvocationException) {
        this.error = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = new ClientSessionData(args.success);
      }
      if (args.failure !== undefined && args.failure !== null) {
        this.failure = args.failure;
      }
      if (args.error !== undefined && args.error !== null) {
        this.error = args.error;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.STRUCT) {
          this.success = new ClientSessionData();
          this.success.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.failure = new TAuthorizationException();
          this.failure.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.error = new TInvocationException();
          this.error.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('MasterServer_localAccountLogin_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
      this.success.write(output);
      output.writeFieldEnd();
    }
    if (this.failure !== null && this.failure !== undefined) {
      output.writeFieldBegin('failure', Thrift.Type.STRUCT, 1);
      this.failure.write(output);
      output.writeFieldEnd();
    }
    if (this.error !== null && this.error !== undefined) {
      output.writeFieldBegin('error', Thrift.Type.STRUCT, 2);
      this.error.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
MasterServer_setUsedSatellite_args = class {
  constructor(args) {
    this.sessionId = null;
    this.satelliteName = null;
    if (args) {
      if (args.sessionId !== undefined && args.sessionId !== null) {
        this.sessionId = args.sessionId;
      }
      if (args.satelliteName !== undefined && args.satelliteName !== null) {
        this.satelliteName = args.satelliteName;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.sessionId = input.readString().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRING) {
          this.satelliteName = input.readString().value;
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('MasterServer_setUsedSatellite_args');
    if (this.sessionId !== null && this.sessionId !== undefined) {
      output.writeFieldBegin('sessionId', Thrift.Type.STRING, 1);
      output.writeString(this.sessionId);
      output.writeFieldEnd();
    }
    if (this.satelliteName !== null && this.satelliteName !== undefined) {
      output.writeFieldBegin('satelliteName', Thrift.Type.STRING, 2);
      output.writeString(this.satelliteName);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
MasterServer_setUsedSatellite_result = class {
  constructor(args) {
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      input.skip(ftype);
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('MasterServer_setUsedSatellite_result');
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
MasterServer_findUser_args = class {
  constructor(args) {
    this.sessionId = null;
    this.organizationId = null;
    this.searchTerm = null;
    if (args) {
      if (args.sessionId !== undefined && args.sessionId !== null) {
        this.sessionId = args.sessionId;
      }
      if (args.organizationId !== undefined && args.organizationId !== null) {
        this.organizationId = args.organizationId;
      }
      if (args.searchTerm !== undefined && args.searchTerm !== null) {
        this.searchTerm = args.searchTerm;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.sessionId = input.readString().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRING) {
          this.organizationId = input.readString().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRING) {
          this.searchTerm = input.readString().value;
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('MasterServer_findUser_args');
    if (this.sessionId !== null && this.sessionId !== undefined) {
      output.writeFieldBegin('sessionId', Thrift.Type.STRING, 1);
      output.writeString(this.sessionId);
      output.writeFieldEnd();
    }
    if (this.organizationId !== null && this.organizationId !== undefined) {
      output.writeFieldBegin('organizationId', Thrift.Type.STRING, 2);
      output.writeString(this.organizationId);
      output.writeFieldEnd();
    }
    if (this.searchTerm !== null && this.searchTerm !== undefined) {
      output.writeFieldBegin('searchTerm', Thrift.Type.STRING, 3);
      output.writeString(this.searchTerm);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
MasterServer_findUser_result = class {
  constructor(args) {
    this.success = null;
    this.failure = null;
    this.error = null;
    if (args instanceof TAuthorizationException) {
        this.failure = args;
        return;
    }
    if (args instanceof TInvocationException) {
        this.error = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = Thrift.copyList(args.success, [UserInfo]);
      }
      if (args.failure !== undefined && args.failure !== null) {
        this.failure = args.failure;
      }
      if (args.error !== undefined && args.error !== null) {
        this.error = args.error;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.LIST) {
          this.success = [];
          const _rtmp3266 = input.readListBegin();
          const _size265 = _rtmp3266.size || 0;
          for (let _i267 = 0; _i267 < _size265; ++_i267) {
            let elem268 = null;
            elem268 = new UserInfo();
            elem268.read(input);
            this.success.push(elem268);
          }
          input.readListEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.failure = new TAuthorizationException();
          this.failure.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.error = new TInvocationException();
          this.error.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('MasterServer_findUser_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.LIST, 0);
      output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
      for (let iter269 in this.success) {
        if (this.success.hasOwnProperty(iter269)) {
          iter269 = this.success[iter269];
          iter269.write(output);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    if (this.failure !== null && this.failure !== undefined) {
      output.writeFieldBegin('failure', Thrift.Type.STRUCT, 1);
      this.failure.write(output);
      output.writeFieldEnd();
    }
    if (this.error !== null && this.error !== undefined) {
      output.writeFieldBegin('error', Thrift.Type.STRUCT, 2);
      this.error.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
MasterServer_getPublicImages_args = class {
  constructor(args) {
    this.sessionId = null;
    this.page = null;
    if (args) {
      if (args.sessionId !== undefined && args.sessionId !== null) {
        this.sessionId = args.sessionId;
      }
      if (args.page !== undefined && args.page !== null) {
        this.page = args.page;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.sessionId = input.readString().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.I32) {
          this.page = input.readI32().value;
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('MasterServer_getPublicImages_args');
    if (this.sessionId !== null && this.sessionId !== undefined) {
      output.writeFieldBegin('sessionId', Thrift.Type.STRING, 1);
      output.writeString(this.sessionId);
      output.writeFieldEnd();
    }
    if (this.page !== null && this.page !== undefined) {
      output.writeFieldBegin('page', Thrift.Type.I32, 2);
      output.writeI32(this.page);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
MasterServer_getPublicImages_result = class {
  constructor(args) {
    this.success = null;
    this.failure = null;
    this.error = null;
    if (args instanceof TAuthorizationException) {
        this.failure = args;
        return;
    }
    if (args instanceof TInvocationException) {
        this.error = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = Thrift.copyList(args.success, [ImageSummaryRead]);
      }
      if (args.failure !== undefined && args.failure !== null) {
        this.failure = args.failure;
      }
      if (args.error !== undefined && args.error !== null) {
        this.error = args.error;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.LIST) {
          this.success = [];
          const _rtmp3271 = input.readListBegin();
          const _size270 = _rtmp3271.size || 0;
          for (let _i272 = 0; _i272 < _size270; ++_i272) {
            let elem273 = null;
            elem273 = new ImageSummaryRead();
            elem273.read(input);
            this.success.push(elem273);
          }
          input.readListEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.failure = new TAuthorizationException();
          this.failure.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.error = new TInvocationException();
          this.error.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('MasterServer_getPublicImages_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.LIST, 0);
      output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
      for (let iter274 in this.success) {
        if (this.success.hasOwnProperty(iter274)) {
          iter274 = this.success[iter274];
          iter274.write(output);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    if (this.failure !== null && this.failure !== undefined) {
      output.writeFieldBegin('failure', Thrift.Type.STRUCT, 1);
      this.failure.write(output);
      output.writeFieldEnd();
    }
    if (this.error !== null && this.error !== undefined) {
      output.writeFieldBegin('error', Thrift.Type.STRUCT, 2);
      this.error.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
MasterServer_getImageDetails_args = class {
  constructor(args) {
    this.sessionId = null;
    this.imageBaseId = null;
    if (args) {
      if (args.sessionId !== undefined && args.sessionId !== null) {
        this.sessionId = args.sessionId;
      }
      if (args.imageBaseId !== undefined && args.imageBaseId !== null) {
        this.imageBaseId = args.imageBaseId;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.sessionId = input.readString().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRING) {
          this.imageBaseId = input.readString().value;
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('MasterServer_getImageDetails_args');
    if (this.sessionId !== null && this.sessionId !== undefined) {
      output.writeFieldBegin('sessionId', Thrift.Type.STRING, 1);
      output.writeString(this.sessionId);
      output.writeFieldEnd();
    }
    if (this.imageBaseId !== null && this.imageBaseId !== undefined) {
      output.writeFieldBegin('imageBaseId', Thrift.Type.STRING, 2);
      output.writeString(this.imageBaseId);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
MasterServer_getImageDetails_result = class {
  constructor(args) {
    this.success = null;
    this.authError = null;
    this.notFound = null;
    this.serverError = null;
    if (args instanceof TAuthorizationException) {
        this.authError = args;
        return;
    }
    if (args instanceof TNotFoundException) {
        this.notFound = args;
        return;
    }
    if (args instanceof TInvocationException) {
        this.serverError = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = new ImageDetailsRead(args.success);
      }
      if (args.authError !== undefined && args.authError !== null) {
        this.authError = args.authError;
      }
      if (args.notFound !== undefined && args.notFound !== null) {
        this.notFound = args.notFound;
      }
      if (args.serverError !== undefined && args.serverError !== null) {
        this.serverError = args.serverError;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.STRUCT) {
          this.success = new ImageDetailsRead();
          this.success.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.authError = new TAuthorizationException();
          this.authError.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.notFound = new TNotFoundException();
          this.notFound.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.serverError = new TInvocationException();
          this.serverError.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('MasterServer_getImageDetails_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
      this.success.write(output);
      output.writeFieldEnd();
    }
    if (this.authError !== null && this.authError !== undefined) {
      output.writeFieldBegin('authError', Thrift.Type.STRUCT, 1);
      this.authError.write(output);
      output.writeFieldEnd();
    }
    if (this.notFound !== null && this.notFound !== undefined) {
      output.writeFieldBegin('notFound', Thrift.Type.STRUCT, 2);
      this.notFound.write(output);
      output.writeFieldEnd();
    }
    if (this.serverError !== null && this.serverError !== undefined) {
      output.writeFieldBegin('serverError', Thrift.Type.STRUCT, 3);
      this.serverError.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
MasterServer_getUser_args = class {
  constructor(args) {
    this.userToken = null;
    this.userId = null;
    if (args) {
      if (args.userToken !== undefined && args.userToken !== null) {
        this.userToken = args.userToken;
      }
      if (args.userId !== undefined && args.userId !== null) {
        this.userId = args.userId;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.userToken = input.readString().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRING) {
          this.userId = input.readString().value;
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('MasterServer_getUser_args');
    if (this.userToken !== null && this.userToken !== undefined) {
      output.writeFieldBegin('userToken', Thrift.Type.STRING, 1);
      output.writeString(this.userToken);
      output.writeFieldEnd();
    }
    if (this.userId !== null && this.userId !== undefined) {
      output.writeFieldBegin('userId', Thrift.Type.STRING, 2);
      output.writeString(this.userId);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
MasterServer_getUser_result = class {
  constructor(args) {
    this.success = null;
    this.authError = null;
    this.notFound = null;
    this.serverError = null;
    if (args instanceof TAuthorizationException) {
        this.authError = args;
        return;
    }
    if (args instanceof TNotFoundException) {
        this.notFound = args;
        return;
    }
    if (args instanceof TInvocationException) {
        this.serverError = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = new UserInfo(args.success);
      }
      if (args.authError !== undefined && args.authError !== null) {
        this.authError = args.authError;
      }
      if (args.notFound !== undefined && args.notFound !== null) {
        this.notFound = args.notFound;
      }
      if (args.serverError !== undefined && args.serverError !== null) {
        this.serverError = args.serverError;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.STRUCT) {
          this.success = new UserInfo();
          this.success.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.authError = new TAuthorizationException();
          this.authError.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.notFound = new TNotFoundException();
          this.notFound.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.serverError = new TInvocationException();
          this.serverError.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('MasterServer_getUser_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
      this.success.write(output);
      output.writeFieldEnd();
    }
    if (this.authError !== null && this.authError !== undefined) {
      output.writeFieldBegin('authError', Thrift.Type.STRUCT, 1);
      this.authError.write(output);
      output.writeFieldEnd();
    }
    if (this.notFound !== null && this.notFound !== undefined) {
      output.writeFieldBegin('notFound', Thrift.Type.STRUCT, 2);
      this.notFound.write(output);
      output.writeFieldEnd();
    }
    if (this.serverError !== null && this.serverError !== undefined) {
      output.writeFieldBegin('serverError', Thrift.Type.STRUCT, 3);
      this.serverError.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
MasterServer_invalidateSession_args = class {
  constructor(args) {
    this.sessionId = null;
    if (args) {
      if (args.sessionId !== undefined && args.sessionId !== null) {
        this.sessionId = args.sessionId;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.sessionId = input.readString().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 0:
          input.skip(ftype);
          break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('MasterServer_invalidateSession_args');
    if (this.sessionId !== null && this.sessionId !== undefined) {
      output.writeFieldBegin('sessionId', Thrift.Type.STRING, 1);
      output.writeString(this.sessionId);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
MasterServer_invalidateSession_result = class {
  constructor(args) {
    this.ex = null;
    if (args instanceof TInvalidTokenException) {
        this.ex = args;
        return;
    }
    if (args) {
      if (args.ex !== undefined && args.ex !== null) {
        this.ex = args.ex;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new TInvalidTokenException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 0:
          input.skip(ftype);
          break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('MasterServer_invalidateSession_result');
    if (this.ex !== null && this.ex !== undefined) {
      output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
      this.ex.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
MasterServer_getUserFromToken_args = class {
  constructor(args) {
    this.token = null;
    if (args) {
      if (args.token !== undefined && args.token !== null) {
        this.token = args.token;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.token = input.readString().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 0:
          input.skip(ftype);
          break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('MasterServer_getUserFromToken_args');
    if (this.token !== null && this.token !== undefined) {
      output.writeFieldBegin('token', Thrift.Type.STRING, 1);
      output.writeString(this.token);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
MasterServer_getUserFromToken_result = class {
  constructor(args) {
    this.success = null;
    this.failure = null;
    if (args instanceof TInvalidTokenException) {
        this.failure = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = new UserInfo(args.success);
      }
      if (args.failure !== undefined && args.failure !== null) {
        this.failure = args.failure;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.STRUCT) {
          this.success = new UserInfo();
          this.success.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.failure = new TInvalidTokenException();
          this.failure.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('MasterServer_getUserFromToken_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
      this.success.write(output);
      output.writeFieldEnd();
    }
    if (this.failure !== null && this.failure !== undefined) {
      output.writeFieldBegin('failure', Thrift.Type.STRUCT, 1);
      this.failure.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
MasterServer_isServerAuthenticated_args = class {
  constructor(args) {
    this.serverSessionId = null;
    if (args) {
      if (args.serverSessionId !== undefined && args.serverSessionId !== null) {
        this.serverSessionId = args.serverSessionId;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.serverSessionId = input.readString().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 0:
          input.skip(ftype);
          break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('MasterServer_isServerAuthenticated_args');
    if (this.serverSessionId !== null && this.serverSessionId !== undefined) {
      output.writeFieldBegin('serverSessionId', Thrift.Type.STRING, 1);
      output.writeString(this.serverSessionId);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
MasterServer_isServerAuthenticated_result = class {
  constructor(args) {
    this.success = null;
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = args.success;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.BOOL) {
          this.success = input.readBool().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 0:
          input.skip(ftype);
          break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('MasterServer_isServerAuthenticated_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
      output.writeBool(this.success);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
MasterServer_startServerAuthentication_args = class {
  constructor(args) {
    this.satelliteId = null;
    if (args) {
      if (args.satelliteId !== undefined && args.satelliteId !== null) {
        this.satelliteId = args.satelliteId;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.I32) {
          this.satelliteId = input.readI32().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 0:
          input.skip(ftype);
          break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('MasterServer_startServerAuthentication_args');
    if (this.satelliteId !== null && this.satelliteId !== undefined) {
      output.writeFieldBegin('satelliteId', Thrift.Type.I32, 1);
      output.writeI32(this.satelliteId);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
MasterServer_startServerAuthentication_result = class {
  constructor(args) {
    this.success = null;
    this.failure = null;
    this.error = null;
    if (args instanceof TAuthorizationException) {
        this.failure = args;
        return;
    }
    if (args instanceof TInvocationException) {
        this.error = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = args.success;
      }
      if (args.failure !== undefined && args.failure !== null) {
        this.failure = args.failure;
      }
      if (args.error !== undefined && args.error !== null) {
        this.error = args.error;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.STRING) {
          this.success = input.readBinary().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.failure = new TAuthorizationException();
          this.failure.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.error = new TInvocationException();
          this.error.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('MasterServer_startServerAuthentication_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.STRING, 0);
      output.writeBinary(this.success);
      output.writeFieldEnd();
    }
    if (this.failure !== null && this.failure !== undefined) {
      output.writeFieldBegin('failure', Thrift.Type.STRUCT, 1);
      this.failure.write(output);
      output.writeFieldEnd();
    }
    if (this.error !== null && this.error !== undefined) {
      output.writeFieldBegin('error', Thrift.Type.STRUCT, 2);
      this.error.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
MasterServer_serverAuthenticate_args = class {
  constructor(args) {
    this.satelliteId = null;
    this.challengeResponse = null;
    if (args) {
      if (args.satelliteId !== undefined && args.satelliteId !== null) {
        this.satelliteId = args.satelliteId;
      }
      if (args.challengeResponse !== undefined && args.challengeResponse !== null) {
        this.challengeResponse = args.challengeResponse;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.I32) {
          this.satelliteId = input.readI32().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRING) {
          this.challengeResponse = input.readBinary().value;
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('MasterServer_serverAuthenticate_args');
    if (this.satelliteId !== null && this.satelliteId !== undefined) {
      output.writeFieldBegin('satelliteId', Thrift.Type.I32, 1);
      output.writeI32(this.satelliteId);
      output.writeFieldEnd();
    }
    if (this.challengeResponse !== null && this.challengeResponse !== undefined) {
      output.writeFieldBegin('challengeResponse', Thrift.Type.STRING, 2);
      output.writeBinary(this.challengeResponse);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
MasterServer_serverAuthenticate_result = class {
  constructor(args) {
    this.success = null;
    this.failure = null;
    this.errr = null;
    if (args instanceof TAuthorizationException) {
        this.failure = args;
        return;
    }
    if (args instanceof TInvocationException) {
        this.errr = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = new ServerSessionData(args.success);
      }
      if (args.failure !== undefined && args.failure !== null) {
        this.failure = args.failure;
      }
      if (args.errr !== undefined && args.errr !== null) {
        this.errr = args.errr;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.STRUCT) {
          this.success = new ServerSessionData();
          this.success.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.failure = new TAuthorizationException();
          this.failure.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.errr = new TInvocationException();
          this.errr.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('MasterServer_serverAuthenticate_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
      this.success.write(output);
      output.writeFieldEnd();
    }
    if (this.failure !== null && this.failure !== undefined) {
      output.writeFieldBegin('failure', Thrift.Type.STRUCT, 1);
      this.failure.write(output);
      output.writeFieldEnd();
    }
    if (this.errr !== null && this.errr !== undefined) {
      output.writeFieldBegin('errr', Thrift.Type.STRUCT, 2);
      this.errr.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
MasterServer_getImageData_args = class {
  constructor(args) {
    this.serverSessionId = null;
    this.imageVersionId = null;
    if (args) {
      if (args.serverSessionId !== undefined && args.serverSessionId !== null) {
        this.serverSessionId = args.serverSessionId;
      }
      if (args.imageVersionId !== undefined && args.imageVersionId !== null) {
        this.imageVersionId = args.imageVersionId;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.serverSessionId = input.readString().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRING) {
          this.imageVersionId = input.readString().value;
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('MasterServer_getImageData_args');
    if (this.serverSessionId !== null && this.serverSessionId !== undefined) {
      output.writeFieldBegin('serverSessionId', Thrift.Type.STRING, 1);
      output.writeString(this.serverSessionId);
      output.writeFieldEnd();
    }
    if (this.imageVersionId !== null && this.imageVersionId !== undefined) {
      output.writeFieldBegin('imageVersionId', Thrift.Type.STRING, 2);
      output.writeString(this.imageVersionId);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
MasterServer_getImageData_result = class {
  constructor(args) {
    this.success = null;
    this.failure = null;
    this.failure2 = null;
    this.f3 = null;
    if (args instanceof TAuthorizationException) {
        this.failure = args;
        return;
    }
    if (args instanceof TInvocationException) {
        this.failure2 = args;
        return;
    }
    if (args instanceof TNotFoundException) {
        this.f3 = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = new ImagePublishData(args.success);
      }
      if (args.failure !== undefined && args.failure !== null) {
        this.failure = args.failure;
      }
      if (args.failure2 !== undefined && args.failure2 !== null) {
        this.failure2 = args.failure2;
      }
      if (args.f3 !== undefined && args.f3 !== null) {
        this.f3 = args.f3;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.STRUCT) {
          this.success = new ImagePublishData();
          this.success.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.failure = new TAuthorizationException();
          this.failure.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.failure2 = new TInvocationException();
          this.failure2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.f3 = new TNotFoundException();
          this.f3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('MasterServer_getImageData_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
      this.success.write(output);
      output.writeFieldEnd();
    }
    if (this.failure !== null && this.failure !== undefined) {
      output.writeFieldBegin('failure', Thrift.Type.STRUCT, 1);
      this.failure.write(output);
      output.writeFieldEnd();
    }
    if (this.failure2 !== null && this.failure2 !== undefined) {
      output.writeFieldBegin('failure2', Thrift.Type.STRUCT, 2);
      this.failure2.write(output);
      output.writeFieldEnd();
    }
    if (this.f3 !== null && this.f3 !== undefined) {
      output.writeFieldBegin('f3', Thrift.Type.STRUCT, 3);
      this.f3.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
MasterServer_submitImage_args = class {
  constructor(args) {
    this.userToken = null;
    this.imageDescription = null;
    this.blockHashes = null;
    if (args) {
      if (args.userToken !== undefined && args.userToken !== null) {
        this.userToken = args.userToken;
      }
      if (args.imageDescription !== undefined && args.imageDescription !== null) {
        this.imageDescription = new ImagePublishData(args.imageDescription);
      }
      if (args.blockHashes !== undefined && args.blockHashes !== null) {
        this.blockHashes = Thrift.copyList(args.blockHashes, [null]);
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.userToken = input.readString().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.imageDescription = new ImagePublishData();
          this.imageDescription.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.LIST) {
          this.blockHashes = [];
          const _rtmp3276 = input.readListBegin();
          const _size275 = _rtmp3276.size || 0;
          for (let _i277 = 0; _i277 < _size275; ++_i277) {
            let elem278 = null;
            elem278 = input.readBinary().value;
            this.blockHashes.push(elem278);
          }
          input.readListEnd();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('MasterServer_submitImage_args');
    if (this.userToken !== null && this.userToken !== undefined) {
      output.writeFieldBegin('userToken', Thrift.Type.STRING, 1);
      output.writeString(this.userToken);
      output.writeFieldEnd();
    }
    if (this.imageDescription !== null && this.imageDescription !== undefined) {
      output.writeFieldBegin('imageDescription', Thrift.Type.STRUCT, 2);
      this.imageDescription.write(output);
      output.writeFieldEnd();
    }
    if (this.blockHashes !== null && this.blockHashes !== undefined) {
      output.writeFieldBegin('blockHashes', Thrift.Type.LIST, 3);
      output.writeListBegin(Thrift.Type.STRING, this.blockHashes.length);
      for (let iter279 in this.blockHashes) {
        if (this.blockHashes.hasOwnProperty(iter279)) {
          iter279 = this.blockHashes[iter279];
          output.writeBinary(iter279);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
MasterServer_submitImage_result = class {
  constructor(args) {
    this.success = null;
    this.failure = null;
    this.failure2 = null;
    this.failure3 = null;
    if (args instanceof TAuthorizationException) {
        this.failure = args;
        return;
    }
    if (args instanceof TInvocationException) {
        this.failure2 = args;
        return;
    }
    if (args instanceof TTransferRejectedException) {
        this.failure3 = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = new TransferInformation(args.success);
      }
      if (args.failure !== undefined && args.failure !== null) {
        this.failure = args.failure;
      }
      if (args.failure2 !== undefined && args.failure2 !== null) {
        this.failure2 = args.failure2;
      }
      if (args.failure3 !== undefined && args.failure3 !== null) {
        this.failure3 = args.failure3;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.STRUCT) {
          this.success = new TransferInformation();
          this.success.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.failure = new TAuthorizationException();
          this.failure.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.failure2 = new TInvocationException();
          this.failure2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.failure3 = new TTransferRejectedException();
          this.failure3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('MasterServer_submitImage_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
      this.success.write(output);
      output.writeFieldEnd();
    }
    if (this.failure !== null && this.failure !== undefined) {
      output.writeFieldBegin('failure', Thrift.Type.STRUCT, 1);
      this.failure.write(output);
      output.writeFieldEnd();
    }
    if (this.failure2 !== null && this.failure2 !== undefined) {
      output.writeFieldBegin('failure2', Thrift.Type.STRUCT, 2);
      this.failure2.write(output);
      output.writeFieldEnd();
    }
    if (this.failure3 !== null && this.failure3 !== undefined) {
      output.writeFieldBegin('failure3', Thrift.Type.STRUCT, 3);
      this.failure3.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
MasterServer_registerSatellite_args = class {
  constructor(args) {
    this.userToken = null;
    this.displayName = null;
    this.addresses = null;
    this.modulus = null;
    this.exponent = null;
    this.certsha256 = null;
    if (args) {
      if (args.userToken !== undefined && args.userToken !== null) {
        this.userToken = args.userToken;
      }
      if (args.displayName !== undefined && args.displayName !== null) {
        this.displayName = args.displayName;
      }
      if (args.addresses !== undefined && args.addresses !== null) {
        this.addresses = Thrift.copyList(args.addresses, [null]);
      }
      if (args.modulus !== undefined && args.modulus !== null) {
        this.modulus = args.modulus;
      }
      if (args.exponent !== undefined && args.exponent !== null) {
        this.exponent = args.exponent;
      }
      if (args.certsha256 !== undefined && args.certsha256 !== null) {
        this.certsha256 = args.certsha256;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 6:
        if (ftype == Thrift.Type.STRING) {
          this.userToken = input.readString().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 5:
        if (ftype == Thrift.Type.STRING) {
          this.displayName = input.readString().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.LIST) {
          this.addresses = [];
          const _rtmp3281 = input.readListBegin();
          const _size280 = _rtmp3281.size || 0;
          for (let _i282 = 0; _i282 < _size280; ++_i282) {
            let elem283 = null;
            elem283 = input.readString().value;
            this.addresses.push(elem283);
          }
          input.readListEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRING) {
          this.modulus = input.readString().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRING) {
          this.exponent = input.readString().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.certsha256 = input.readBinary().value;
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('MasterServer_registerSatellite_args');
    if (this.userToken !== null && this.userToken !== undefined) {
      output.writeFieldBegin('userToken', Thrift.Type.STRING, 6);
      output.writeString(this.userToken);
      output.writeFieldEnd();
    }
    if (this.displayName !== null && this.displayName !== undefined) {
      output.writeFieldBegin('displayName', Thrift.Type.STRING, 5);
      output.writeString(this.displayName);
      output.writeFieldEnd();
    }
    if (this.addresses !== null && this.addresses !== undefined) {
      output.writeFieldBegin('addresses', Thrift.Type.LIST, 2);
      output.writeListBegin(Thrift.Type.STRING, this.addresses.length);
      for (let iter284 in this.addresses) {
        if (this.addresses.hasOwnProperty(iter284)) {
          iter284 = this.addresses[iter284];
          output.writeString(iter284);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    if (this.modulus !== null && this.modulus !== undefined) {
      output.writeFieldBegin('modulus', Thrift.Type.STRING, 3);
      output.writeString(this.modulus);
      output.writeFieldEnd();
    }
    if (this.exponent !== null && this.exponent !== undefined) {
      output.writeFieldBegin('exponent', Thrift.Type.STRING, 4);
      output.writeString(this.exponent);
      output.writeFieldEnd();
    }
    if (this.certsha256 !== null && this.certsha256 !== undefined) {
      output.writeFieldBegin('certsha256', Thrift.Type.STRING, 1);
      output.writeBinary(this.certsha256);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
MasterServer_registerSatellite_result = class {
  constructor(args) {
    this.success = null;
    this.error = null;
    if (args instanceof TInvocationException) {
        this.error = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = args.success;
      }
      if (args.error !== undefined && args.error !== null) {
        this.error = args.error;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.I32) {
          this.success = input.readI32().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.error = new TInvocationException();
          this.error.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('MasterServer_registerSatellite_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.I32, 0);
      output.writeI32(this.success);
      output.writeFieldEnd();
    }
    if (this.error !== null && this.error !== undefined) {
      output.writeFieldBegin('error', Thrift.Type.STRUCT, 1);
      this.error.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
MasterServer_updateSatellite_args = class {
  constructor(args) {
    this.serverSessionId = null;
    this.displayName = null;
    this.addresses = null;
    if (args) {
      if (args.serverSessionId !== undefined && args.serverSessionId !== null) {
        this.serverSessionId = args.serverSessionId;
      }
      if (args.displayName !== undefined && args.displayName !== null) {
        this.displayName = args.displayName;
      }
      if (args.addresses !== undefined && args.addresses !== null) {
        this.addresses = Thrift.copyList(args.addresses, [null]);
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.serverSessionId = input.readString().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRING) {
          this.displayName = input.readString().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.LIST) {
          this.addresses = [];
          const _rtmp3286 = input.readListBegin();
          const _size285 = _rtmp3286.size || 0;
          for (let _i287 = 0; _i287 < _size285; ++_i287) {
            let elem288 = null;
            elem288 = input.readString().value;
            this.addresses.push(elem288);
          }
          input.readListEnd();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('MasterServer_updateSatellite_args');
    if (this.serverSessionId !== null && this.serverSessionId !== undefined) {
      output.writeFieldBegin('serverSessionId', Thrift.Type.STRING, 1);
      output.writeString(this.serverSessionId);
      output.writeFieldEnd();
    }
    if (this.displayName !== null && this.displayName !== undefined) {
      output.writeFieldBegin('displayName', Thrift.Type.STRING, 2);
      output.writeString(this.displayName);
      output.writeFieldEnd();
    }
    if (this.addresses !== null && this.addresses !== undefined) {
      output.writeFieldBegin('addresses', Thrift.Type.LIST, 3);
      output.writeListBegin(Thrift.Type.STRING, this.addresses.length);
      for (let iter289 in this.addresses) {
        if (this.addresses.hasOwnProperty(iter289)) {
          iter289 = this.addresses[iter289];
          output.writeString(iter289);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
MasterServer_updateSatellite_result = class {
  constructor(args) {
    this.success = null;
    this.failure = null;
    this.error = null;
    if (args instanceof TAuthorizationException) {
        this.failure = args;
        return;
    }
    if (args instanceof TInvocationException) {
        this.error = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = args.success;
      }
      if (args.failure !== undefined && args.failure !== null) {
        this.failure = args.failure;
      }
      if (args.error !== undefined && args.error !== null) {
        this.error = args.error;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.BOOL) {
          this.success = input.readBool().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.failure = new TAuthorizationException();
          this.failure.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.error = new TInvocationException();
          this.error.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('MasterServer_updateSatellite_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
      output.writeBool(this.success);
      output.writeFieldEnd();
    }
    if (this.failure !== null && this.failure !== undefined) {
      output.writeFieldBegin('failure', Thrift.Type.STRUCT, 1);
      this.failure.write(output);
      output.writeFieldEnd();
    }
    if (this.error !== null && this.error !== undefined) {
      output.writeFieldBegin('error', Thrift.Type.STRUCT, 2);
      this.error.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
MasterServer_downloadImage_args = class {
  constructor(args) {
    this.sessionId = null;
    this.imageVersionId = null;
    if (args) {
      if (args.sessionId !== undefined && args.sessionId !== null) {
        this.sessionId = args.sessionId;
      }
      if (args.imageVersionId !== undefined && args.imageVersionId !== null) {
        this.imageVersionId = args.imageVersionId;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 2:
        if (ftype == Thrift.Type.STRING) {
          this.sessionId = input.readString().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.imageVersionId = input.readString().value;
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('MasterServer_downloadImage_args');
    if (this.sessionId !== null && this.sessionId !== undefined) {
      output.writeFieldBegin('sessionId', Thrift.Type.STRING, 2);
      output.writeString(this.sessionId);
      output.writeFieldEnd();
    }
    if (this.imageVersionId !== null && this.imageVersionId !== undefined) {
      output.writeFieldBegin('imageVersionId', Thrift.Type.STRING, 1);
      output.writeString(this.imageVersionId);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
MasterServer_downloadImage_result = class {
  constructor(args) {
    this.success = null;
    this.failure = null;
    this.failure2 = null;
    this.f3 = null;
    if (args instanceof TAuthorizationException) {
        this.failure = args;
        return;
    }
    if (args instanceof TInvocationException) {
        this.failure2 = args;
        return;
    }
    if (args instanceof TNotFoundException) {
        this.f3 = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = new TransferInformation(args.success);
      }
      if (args.failure !== undefined && args.failure !== null) {
        this.failure = args.failure;
      }
      if (args.failure2 !== undefined && args.failure2 !== null) {
        this.failure2 = args.failure2;
      }
      if (args.f3 !== undefined && args.f3 !== null) {
        this.f3 = args.f3;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.STRUCT) {
          this.success = new TransferInformation();
          this.success.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.failure = new TAuthorizationException();
          this.failure.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.failure2 = new TInvocationException();
          this.failure2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.f3 = new TNotFoundException();
          this.f3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('MasterServer_downloadImage_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
      this.success.write(output);
      output.writeFieldEnd();
    }
    if (this.failure !== null && this.failure !== undefined) {
      output.writeFieldBegin('failure', Thrift.Type.STRUCT, 1);
      this.failure.write(output);
      output.writeFieldEnd();
    }
    if (this.failure2 !== null && this.failure2 !== undefined) {
      output.writeFieldBegin('failure2', Thrift.Type.STRUCT, 2);
      this.failure2.write(output);
      output.writeFieldEnd();
    }
    if (this.f3 !== null && this.f3 !== undefined) {
      output.writeFieldBegin('f3', Thrift.Type.STRUCT, 3);
      this.f3.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
MasterServer_getOrganizations_args = class {
  constructor(args) {
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      input.skip(ftype);
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('MasterServer_getOrganizations_args');
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
MasterServer_getOrganizations_result = class {
  constructor(args) {
    this.success = null;
    this.serverError = null;
    if (args instanceof TInvocationException) {
        this.serverError = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = Thrift.copyList(args.success, [Organization]);
      }
      if (args.serverError !== undefined && args.serverError !== null) {
        this.serverError = args.serverError;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.LIST) {
          this.success = [];
          const _rtmp3291 = input.readListBegin();
          const _size290 = _rtmp3291.size || 0;
          for (let _i292 = 0; _i292 < _size290; ++_i292) {
            let elem293 = null;
            elem293 = new Organization();
            elem293.read(input);
            this.success.push(elem293);
          }
          input.readListEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.serverError = new TInvocationException();
          this.serverError.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('MasterServer_getOrganizations_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.LIST, 0);
      output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
      for (let iter294 in this.success) {
        if (this.success.hasOwnProperty(iter294)) {
          iter294 = this.success[iter294];
          iter294.write(output);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    if (this.serverError !== null && this.serverError !== undefined) {
      output.writeFieldBegin('serverError', Thrift.Type.STRUCT, 1);
      this.serverError.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
MasterServer_getOperatingSystems_args = class {
  constructor(args) {
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      input.skip(ftype);
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('MasterServer_getOperatingSystems_args');
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
MasterServer_getOperatingSystems_result = class {
  constructor(args) {
    this.success = null;
    this.serverError = null;
    if (args instanceof TInvocationException) {
        this.serverError = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = Thrift.copyList(args.success, [OperatingSystem]);
      }
      if (args.serverError !== undefined && args.serverError !== null) {
        this.serverError = args.serverError;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.LIST) {
          this.success = [];
          const _rtmp3296 = input.readListBegin();
          const _size295 = _rtmp3296.size || 0;
          for (let _i297 = 0; _i297 < _size295; ++_i297) {
            let elem298 = null;
            elem298 = new OperatingSystem();
            elem298.read(input);
            this.success.push(elem298);
          }
          input.readListEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.serverError = new TInvocationException();
          this.serverError.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('MasterServer_getOperatingSystems_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.LIST, 0);
      output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
      for (let iter299 in this.success) {
        if (this.success.hasOwnProperty(iter299)) {
          iter299 = this.success[iter299];
          iter299.write(output);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    if (this.serverError !== null && this.serverError !== undefined) {
      output.writeFieldBegin('serverError', Thrift.Type.STRUCT, 1);
      this.serverError.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
MasterServer_getVirtualizers_args = class {
  constructor(args) {
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      input.skip(ftype);
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('MasterServer_getVirtualizers_args');
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
MasterServer_getVirtualizers_result = class {
  constructor(args) {
    this.success = null;
    this.serverError = null;
    if (args instanceof TInvocationException) {
        this.serverError = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = Thrift.copyList(args.success, [Virtualizer]);
      }
      if (args.serverError !== undefined && args.serverError !== null) {
        this.serverError = args.serverError;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.LIST) {
          this.success = [];
          const _rtmp3301 = input.readListBegin();
          const _size300 = _rtmp3301.size || 0;
          for (let _i302 = 0; _i302 < _size300; ++_i302) {
            let elem303 = null;
            elem303 = new Virtualizer();
            elem303.read(input);
            this.success.push(elem303);
          }
          input.readListEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.serverError = new TInvocationException();
          this.serverError.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('MasterServer_getVirtualizers_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.LIST, 0);
      output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
      for (let iter304 in this.success) {
        if (this.success.hasOwnProperty(iter304)) {
          iter304 = this.success[iter304];
          iter304.write(output);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    if (this.serverError !== null && this.serverError !== undefined) {
      output.writeFieldBegin('serverError', Thrift.Type.STRUCT, 1);
      this.serverError.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
MasterServer_getTags_args = class {
  constructor(args) {
    this.startDate = null;
    if (args) {
      if (args.startDate !== undefined && args.startDate !== null) {
        this.startDate = args.startDate;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.I64) {
          this.startDate = input.readI64().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 0:
          input.skip(ftype);
          break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('MasterServer_getTags_args');
    if (this.startDate !== null && this.startDate !== undefined) {
      output.writeFieldBegin('startDate', Thrift.Type.I64, 1);
      output.writeI64(this.startDate);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
MasterServer_getTags_result = class {
  constructor(args) {
    this.success = null;
    this.serverError = null;
    if (args instanceof TInvocationException) {
        this.serverError = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = Thrift.copyList(args.success, [MasterTag]);
      }
      if (args.serverError !== undefined && args.serverError !== null) {
        this.serverError = args.serverError;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.LIST) {
          this.success = [];
          const _rtmp3306 = input.readListBegin();
          const _size305 = _rtmp3306.size || 0;
          for (let _i307 = 0; _i307 < _size305; ++_i307) {
            let elem308 = null;
            elem308 = new MasterTag();
            elem308.read(input);
            this.success.push(elem308);
          }
          input.readListEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.serverError = new TInvocationException();
          this.serverError.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('MasterServer_getTags_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.LIST, 0);
      output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
      for (let iter309 in this.success) {
        if (this.success.hasOwnProperty(iter309)) {
          iter309 = this.success[iter309];
          iter309.write(output);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    if (this.serverError !== null && this.serverError !== undefined) {
      output.writeFieldBegin('serverError', Thrift.Type.STRUCT, 1);
      this.serverError.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
MasterServer_getSoftware_args = class {
  constructor(args) {
    this.startDate = null;
    if (args) {
      if (args.startDate !== undefined && args.startDate !== null) {
        this.startDate = args.startDate;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.I64) {
          this.startDate = input.readI64().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 0:
          input.skip(ftype);
          break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('MasterServer_getSoftware_args');
    if (this.startDate !== null && this.startDate !== undefined) {
      output.writeFieldBegin('startDate', Thrift.Type.I64, 1);
      output.writeI64(this.startDate);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
MasterServer_getSoftware_result = class {
  constructor(args) {
    this.success = null;
    this.serverError = null;
    if (args instanceof TInvocationException) {
        this.serverError = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = Thrift.copyList(args.success, [MasterSoftware]);
      }
      if (args.serverError !== undefined && args.serverError !== null) {
        this.serverError = args.serverError;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.LIST) {
          this.success = [];
          const _rtmp3311 = input.readListBegin();
          const _size310 = _rtmp3311.size || 0;
          for (let _i312 = 0; _i312 < _size310; ++_i312) {
            let elem313 = null;
            elem313 = new MasterSoftware();
            elem313.read(input);
            this.success.push(elem313);
          }
          input.readListEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.serverError = new TInvocationException();
          this.serverError.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('MasterServer_getSoftware_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.LIST, 0);
      output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
      for (let iter314 in this.success) {
        if (this.success.hasOwnProperty(iter314)) {
          iter314 = this.success[iter314];
          iter314.write(output);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    if (this.serverError !== null && this.serverError !== undefined) {
      output.writeFieldBegin('serverError', Thrift.Type.STRUCT, 1);
      this.serverError.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
MasterServer_queryUploadStatus_args = class {
  constructor(args) {
    this.uploadToken = null;
    if (args) {
      if (args.uploadToken !== undefined && args.uploadToken !== null) {
        this.uploadToken = args.uploadToken;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.uploadToken = input.readString().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 0:
          input.skip(ftype);
          break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('MasterServer_queryUploadStatus_args');
    if (this.uploadToken !== null && this.uploadToken !== undefined) {
      output.writeFieldBegin('uploadToken', Thrift.Type.STRING, 1);
      output.writeString(this.uploadToken);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
MasterServer_queryUploadStatus_result = class {
  constructor(args) {
    this.success = null;
    this.ex1 = null;
    if (args instanceof TInvalidTokenException) {
        this.ex1 = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = new TransferStatus(args.success);
      }
      if (args.ex1 !== undefined && args.ex1 !== null) {
        this.ex1 = args.ex1;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.STRUCT) {
          this.success = new TransferStatus();
          this.success.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex1 = new TInvalidTokenException();
          this.ex1.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('MasterServer_queryUploadStatus_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
      this.success.write(output);
      output.writeFieldEnd();
    }
    if (this.ex1 !== null && this.ex1 !== undefined) {
      output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
      this.ex1.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
MasterServerClient = class MasterServerClient {
  constructor(input, output) {
    this.input = input;
    this.output = (!output) ? input : output;
    this.seqid = 0;
  }

  ping () {
    const self = this;
    return new Promise((resolve, reject) => {
      self.send_ping((error, result) => {
        return error ? reject(error) : resolve(result);
      });
    });
  }

  send_ping (callback) {
    const args = new MasterServer_ping_args();
    try {
      this.output.writeMessageBegin('ping', Thrift.MessageType.CALL, this.seqid);
      args.write(this.output);
      this.output.writeMessageEnd();
      const self = this;
      this.output.getTransport().flush(true, () => {
        let error = null, result = null;
        try {
          result = self.recv_ping();
        } catch (e) {
          error = e;
        }
        callback(error, result);
      });
    }
    catch (e) {
      if (typeof this.output.getTransport().reset === 'function') {
        this.output.getTransport().reset();
      }
      throw e;
    }
  }

  recv_ping () {
    const ret = this.input.readMessageBegin();
    const mtype = ret.mtype;
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(this.input);
      this.input.readMessageEnd();
      throw x;
    }
    const result = new MasterServer_ping_result();
    result.read(this.input);
    this.input.readMessageEnd();

    if (null !== result.success) {
      return result.success;
    }
    throw 'ping failed: unknown result';
  }

  authenticate (login, password) {
    const self = this;
    return new Promise((resolve, reject) => {
      self.send_authenticate(login, password, (error, result) => {
        return error ? reject(error) : resolve(result);
      });
    });
  }

  send_authenticate (login, password, callback) {
    const params = {
      login: login,
      password: password
    };
    const args = new MasterServer_authenticate_args(params);
    try {
      this.output.writeMessageBegin('authenticate', Thrift.MessageType.CALL, this.seqid);
      args.write(this.output);
      this.output.writeMessageEnd();
      const self = this;
      this.output.getTransport().flush(true, () => {
        let error = null, result = null;
        try {
          result = self.recv_authenticate();
        } catch (e) {
          error = e;
        }
        callback(error, result);
      });
    }
    catch (e) {
      if (typeof this.output.getTransport().reset === 'function') {
        this.output.getTransport().reset();
      }
      throw e;
    }
  }

  recv_authenticate () {
    const ret = this.input.readMessageBegin();
    const mtype = ret.mtype;
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(this.input);
      this.input.readMessageEnd();
      throw x;
    }
    const result = new MasterServer_authenticate_result();
    result.read(this.input);
    this.input.readMessageEnd();

    if (null !== result.failure) {
      throw result.failure;
    }
    if (null !== result.error) {
      throw result.error;
    }
    if (null !== result.success) {
      return result.success;
    }
    throw 'authenticate failed: unknown result';
  }

  localAccountLogin (login, password) {
    const self = this;
    return new Promise((resolve, reject) => {
      self.send_localAccountLogin(login, password, (error, result) => {
        return error ? reject(error) : resolve(result);
      });
    });
  }

  send_localAccountLogin (login, password, callback) {
    const params = {
      login: login,
      password: password
    };
    const args = new MasterServer_localAccountLogin_args(params);
    try {
      this.output.writeMessageBegin('localAccountLogin', Thrift.MessageType.CALL, this.seqid);
      args.write(this.output);
      this.output.writeMessageEnd();
      const self = this;
      this.output.getTransport().flush(true, () => {
        let error = null, result = null;
        try {
          result = self.recv_localAccountLogin();
        } catch (e) {
          error = e;
        }
        callback(error, result);
      });
    }
    catch (e) {
      if (typeof this.output.getTransport().reset === 'function') {
        this.output.getTransport().reset();
      }
      throw e;
    }
  }

  recv_localAccountLogin () {
    const ret = this.input.readMessageBegin();
    const mtype = ret.mtype;
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(this.input);
      this.input.readMessageEnd();
      throw x;
    }
    const result = new MasterServer_localAccountLogin_result();
    result.read(this.input);
    this.input.readMessageEnd();

    if (null !== result.failure) {
      throw result.failure;
    }
    if (null !== result.error) {
      throw result.error;
    }
    if (null !== result.success) {
      return result.success;
    }
    throw 'localAccountLogin failed: unknown result';
  }

  setUsedSatellite (sessionId, satelliteName) {
    const self = this;
    return new Promise((resolve, reject) => {
      self.send_setUsedSatellite(sessionId, satelliteName, (error, result) => {
        return error ? reject(error) : resolve(result);
      });
    });
  }

  send_setUsedSatellite (sessionId, satelliteName, callback) {
    const params = {
      sessionId: sessionId,
      satelliteName: satelliteName
    };
    const args = new MasterServer_setUsedSatellite_args(params);
    try {
      this.output.writeMessageBegin('setUsedSatellite', Thrift.MessageType.CALL, this.seqid);
      args.write(this.output);
      this.output.writeMessageEnd();
      const self = this;
      this.output.getTransport().flush(true, () => {
        let error = null, result = null;
        try {
          result = self.recv_setUsedSatellite();
        } catch (e) {
          error = e;
        }
        callback(error, result);
      });
    }
    catch (e) {
      if (typeof this.output.getTransport().reset === 'function') {
        this.output.getTransport().reset();
      }
      throw e;
    }
  }

  recv_setUsedSatellite () {
    const ret = this.input.readMessageBegin();
    const mtype = ret.mtype;
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(this.input);
      this.input.readMessageEnd();
      throw x;
    }
    const result = new MasterServer_setUsedSatellite_result();
    result.read(this.input);
    this.input.readMessageEnd();

    return;
  }

  findUser (sessionId, organizationId, searchTerm) {
    const self = this;
    return new Promise((resolve, reject) => {
      self.send_findUser(sessionId, organizationId, searchTerm, (error, result) => {
        return error ? reject(error) : resolve(result);
      });
    });
  }

  send_findUser (sessionId, organizationId, searchTerm, callback) {
    const params = {
      sessionId: sessionId,
      organizationId: organizationId,
      searchTerm: searchTerm
    };
    const args = new MasterServer_findUser_args(params);
    try {
      this.output.writeMessageBegin('findUser', Thrift.MessageType.CALL, this.seqid);
      args.write(this.output);
      this.output.writeMessageEnd();
      const self = this;
      this.output.getTransport().flush(true, () => {
        let error = null, result = null;
        try {
          result = self.recv_findUser();
        } catch (e) {
          error = e;
        }
        callback(error, result);
      });
    }
    catch (e) {
      if (typeof this.output.getTransport().reset === 'function') {
        this.output.getTransport().reset();
      }
      throw e;
    }
  }

  recv_findUser () {
    const ret = this.input.readMessageBegin();
    const mtype = ret.mtype;
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(this.input);
      this.input.readMessageEnd();
      throw x;
    }
    const result = new MasterServer_findUser_result();
    result.read(this.input);
    this.input.readMessageEnd();

    if (null !== result.failure) {
      throw result.failure;
    }
    if (null !== result.error) {
      throw result.error;
    }
    if (null !== result.success) {
      return result.success;
    }
    throw 'findUser failed: unknown result';
  }

  getPublicImages (sessionId, page) {
    const self = this;
    return new Promise((resolve, reject) => {
      self.send_getPublicImages(sessionId, page, (error, result) => {
        return error ? reject(error) : resolve(result);
      });
    });
  }

  send_getPublicImages (sessionId, page, callback) {
    const params = {
      sessionId: sessionId,
      page: page
    };
    const args = new MasterServer_getPublicImages_args(params);
    try {
      this.output.writeMessageBegin('getPublicImages', Thrift.MessageType.CALL, this.seqid);
      args.write(this.output);
      this.output.writeMessageEnd();
      const self = this;
      this.output.getTransport().flush(true, () => {
        let error = null, result = null;
        try {
          result = self.recv_getPublicImages();
        } catch (e) {
          error = e;
        }
        callback(error, result);
      });
    }
    catch (e) {
      if (typeof this.output.getTransport().reset === 'function') {
        this.output.getTransport().reset();
      }
      throw e;
    }
  }

  recv_getPublicImages () {
    const ret = this.input.readMessageBegin();
    const mtype = ret.mtype;
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(this.input);
      this.input.readMessageEnd();
      throw x;
    }
    const result = new MasterServer_getPublicImages_result();
    result.read(this.input);
    this.input.readMessageEnd();

    if (null !== result.failure) {
      throw result.failure;
    }
    if (null !== result.error) {
      throw result.error;
    }
    if (null !== result.success) {
      return result.success;
    }
    throw 'getPublicImages failed: unknown result';
  }

  getImageDetails (sessionId, imageBaseId) {
    const self = this;
    return new Promise((resolve, reject) => {
      self.send_getImageDetails(sessionId, imageBaseId, (error, result) => {
        return error ? reject(error) : resolve(result);
      });
    });
  }

  send_getImageDetails (sessionId, imageBaseId, callback) {
    const params = {
      sessionId: sessionId,
      imageBaseId: imageBaseId
    };
    const args = new MasterServer_getImageDetails_args(params);
    try {
      this.output.writeMessageBegin('getImageDetails', Thrift.MessageType.CALL, this.seqid);
      args.write(this.output);
      this.output.writeMessageEnd();
      const self = this;
      this.output.getTransport().flush(true, () => {
        let error = null, result = null;
        try {
          result = self.recv_getImageDetails();
        } catch (e) {
          error = e;
        }
        callback(error, result);
      });
    }
    catch (e) {
      if (typeof this.output.getTransport().reset === 'function') {
        this.output.getTransport().reset();
      }
      throw e;
    }
  }

  recv_getImageDetails () {
    const ret = this.input.readMessageBegin();
    const mtype = ret.mtype;
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(this.input);
      this.input.readMessageEnd();
      throw x;
    }
    const result = new MasterServer_getImageDetails_result();
    result.read(this.input);
    this.input.readMessageEnd();

    if (null !== result.authError) {
      throw result.authError;
    }
    if (null !== result.notFound) {
      throw result.notFound;
    }
    if (null !== result.serverError) {
      throw result.serverError;
    }
    if (null !== result.success) {
      return result.success;
    }
    throw 'getImageDetails failed: unknown result';
  }

  getUser (userToken, userId) {
    const self = this;
    return new Promise((resolve, reject) => {
      self.send_getUser(userToken, userId, (error, result) => {
        return error ? reject(error) : resolve(result);
      });
    });
  }

  send_getUser (userToken, userId, callback) {
    const params = {
      userToken: userToken,
      userId: userId
    };
    const args = new MasterServer_getUser_args(params);
    try {
      this.output.writeMessageBegin('getUser', Thrift.MessageType.CALL, this.seqid);
      args.write(this.output);
      this.output.writeMessageEnd();
      const self = this;
      this.output.getTransport().flush(true, () => {
        let error = null, result = null;
        try {
          result = self.recv_getUser();
        } catch (e) {
          error = e;
        }
        callback(error, result);
      });
    }
    catch (e) {
      if (typeof this.output.getTransport().reset === 'function') {
        this.output.getTransport().reset();
      }
      throw e;
    }
  }

  recv_getUser () {
    const ret = this.input.readMessageBegin();
    const mtype = ret.mtype;
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(this.input);
      this.input.readMessageEnd();
      throw x;
    }
    const result = new MasterServer_getUser_result();
    result.read(this.input);
    this.input.readMessageEnd();

    if (null !== result.authError) {
      throw result.authError;
    }
    if (null !== result.notFound) {
      throw result.notFound;
    }
    if (null !== result.serverError) {
      throw result.serverError;
    }
    if (null !== result.success) {
      return result.success;
    }
    throw 'getUser failed: unknown result';
  }

  invalidateSession (sessionId) {
    const self = this;
    return new Promise((resolve, reject) => {
      self.send_invalidateSession(sessionId, (error, result) => {
        return error ? reject(error) : resolve(result);
      });
    });
  }

  send_invalidateSession (sessionId, callback) {
    const params = {
      sessionId: sessionId
    };
    const args = new MasterServer_invalidateSession_args(params);
    try {
      this.output.writeMessageBegin('invalidateSession', Thrift.MessageType.CALL, this.seqid);
      args.write(this.output);
      this.output.writeMessageEnd();
      const self = this;
      this.output.getTransport().flush(true, () => {
        let error = null, result = null;
        try {
          result = self.recv_invalidateSession();
        } catch (e) {
          error = e;
        }
        callback(error, result);
      });
    }
    catch (e) {
      if (typeof this.output.getTransport().reset === 'function') {
        this.output.getTransport().reset();
      }
      throw e;
    }
  }

  recv_invalidateSession () {
    const ret = this.input.readMessageBegin();
    const mtype = ret.mtype;
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(this.input);
      this.input.readMessageEnd();
      throw x;
    }
    const result = new MasterServer_invalidateSession_result();
    result.read(this.input);
    this.input.readMessageEnd();

    if (null !== result.ex) {
      throw result.ex;
    }
    return;
  }

  getUserFromToken (token) {
    const self = this;
    return new Promise((resolve, reject) => {
      self.send_getUserFromToken(token, (error, result) => {
        return error ? reject(error) : resolve(result);
      });
    });
  }

  send_getUserFromToken (token, callback) {
    const params = {
      token: token
    };
    const args = new MasterServer_getUserFromToken_args(params);
    try {
      this.output.writeMessageBegin('getUserFromToken', Thrift.MessageType.CALL, this.seqid);
      args.write(this.output);
      this.output.writeMessageEnd();
      const self = this;
      this.output.getTransport().flush(true, () => {
        let error = null, result = null;
        try {
          result = self.recv_getUserFromToken();
        } catch (e) {
          error = e;
        }
        callback(error, result);
      });
    }
    catch (e) {
      if (typeof this.output.getTransport().reset === 'function') {
        this.output.getTransport().reset();
      }
      throw e;
    }
  }

  recv_getUserFromToken () {
    const ret = this.input.readMessageBegin();
    const mtype = ret.mtype;
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(this.input);
      this.input.readMessageEnd();
      throw x;
    }
    const result = new MasterServer_getUserFromToken_result();
    result.read(this.input);
    this.input.readMessageEnd();

    if (null !== result.failure) {
      throw result.failure;
    }
    if (null !== result.success) {
      return result.success;
    }
    throw 'getUserFromToken failed: unknown result';
  }

  isServerAuthenticated (serverSessionId) {
    const self = this;
    return new Promise((resolve, reject) => {
      self.send_isServerAuthenticated(serverSessionId, (error, result) => {
        return error ? reject(error) : resolve(result);
      });
    });
  }

  send_isServerAuthenticated (serverSessionId, callback) {
    const params = {
      serverSessionId: serverSessionId
    };
    const args = new MasterServer_isServerAuthenticated_args(params);
    try {
      this.output.writeMessageBegin('isServerAuthenticated', Thrift.MessageType.CALL, this.seqid);
      args.write(this.output);
      this.output.writeMessageEnd();
      const self = this;
      this.output.getTransport().flush(true, () => {
        let error = null, result = null;
        try {
          result = self.recv_isServerAuthenticated();
        } catch (e) {
          error = e;
        }
        callback(error, result);
      });
    }
    catch (e) {
      if (typeof this.output.getTransport().reset === 'function') {
        this.output.getTransport().reset();
      }
      throw e;
    }
  }

  recv_isServerAuthenticated () {
    const ret = this.input.readMessageBegin();
    const mtype = ret.mtype;
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(this.input);
      this.input.readMessageEnd();
      throw x;
    }
    const result = new MasterServer_isServerAuthenticated_result();
    result.read(this.input);
    this.input.readMessageEnd();

    if (null !== result.success) {
      return result.success;
    }
    throw 'isServerAuthenticated failed: unknown result';
  }

  startServerAuthentication (satelliteId) {
    const self = this;
    return new Promise((resolve, reject) => {
      self.send_startServerAuthentication(satelliteId, (error, result) => {
        return error ? reject(error) : resolve(result);
      });
    });
  }

  send_startServerAuthentication (satelliteId, callback) {
    const params = {
      satelliteId: satelliteId
    };
    const args = new MasterServer_startServerAuthentication_args(params);
    try {
      this.output.writeMessageBegin('startServerAuthentication', Thrift.MessageType.CALL, this.seqid);
      args.write(this.output);
      this.output.writeMessageEnd();
      const self = this;
      this.output.getTransport().flush(true, () => {
        let error = null, result = null;
        try {
          result = self.recv_startServerAuthentication();
        } catch (e) {
          error = e;
        }
        callback(error, result);
      });
    }
    catch (e) {
      if (typeof this.output.getTransport().reset === 'function') {
        this.output.getTransport().reset();
      }
      throw e;
    }
  }

  recv_startServerAuthentication () {
    const ret = this.input.readMessageBegin();
    const mtype = ret.mtype;
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(this.input);
      this.input.readMessageEnd();
      throw x;
    }
    const result = new MasterServer_startServerAuthentication_result();
    result.read(this.input);
    this.input.readMessageEnd();

    if (null !== result.failure) {
      throw result.failure;
    }
    if (null !== result.error) {
      throw result.error;
    }
    if (null !== result.success) {
      return result.success;
    }
    throw 'startServerAuthentication failed: unknown result';
  }

  serverAuthenticate (satelliteId, challengeResponse) {
    const self = this;
    return new Promise((resolve, reject) => {
      self.send_serverAuthenticate(satelliteId, challengeResponse, (error, result) => {
        return error ? reject(error) : resolve(result);
      });
    });
  }

  send_serverAuthenticate (satelliteId, challengeResponse, callback) {
    const params = {
      satelliteId: satelliteId,
      challengeResponse: challengeResponse
    };
    const args = new MasterServer_serverAuthenticate_args(params);
    try {
      this.output.writeMessageBegin('serverAuthenticate', Thrift.MessageType.CALL, this.seqid);
      args.write(this.output);
      this.output.writeMessageEnd();
      const self = this;
      this.output.getTransport().flush(true, () => {
        let error = null, result = null;
        try {
          result = self.recv_serverAuthenticate();
        } catch (e) {
          error = e;
        }
        callback(error, result);
      });
    }
    catch (e) {
      if (typeof this.output.getTransport().reset === 'function') {
        this.output.getTransport().reset();
      }
      throw e;
    }
  }

  recv_serverAuthenticate () {
    const ret = this.input.readMessageBegin();
    const mtype = ret.mtype;
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(this.input);
      this.input.readMessageEnd();
      throw x;
    }
    const result = new MasterServer_serverAuthenticate_result();
    result.read(this.input);
    this.input.readMessageEnd();

    if (null !== result.failure) {
      throw result.failure;
    }
    if (null !== result.errr) {
      throw result.errr;
    }
    if (null !== result.success) {
      return result.success;
    }
    throw 'serverAuthenticate failed: unknown result';
  }

  getImageData (serverSessionId, imageVersionId) {
    const self = this;
    return new Promise((resolve, reject) => {
      self.send_getImageData(serverSessionId, imageVersionId, (error, result) => {
        return error ? reject(error) : resolve(result);
      });
    });
  }

  send_getImageData (serverSessionId, imageVersionId, callback) {
    const params = {
      serverSessionId: serverSessionId,
      imageVersionId: imageVersionId
    };
    const args = new MasterServer_getImageData_args(params);
    try {
      this.output.writeMessageBegin('getImageData', Thrift.MessageType.CALL, this.seqid);
      args.write(this.output);
      this.output.writeMessageEnd();
      const self = this;
      this.output.getTransport().flush(true, () => {
        let error = null, result = null;
        try {
          result = self.recv_getImageData();
        } catch (e) {
          error = e;
        }
        callback(error, result);
      });
    }
    catch (e) {
      if (typeof this.output.getTransport().reset === 'function') {
        this.output.getTransport().reset();
      }
      throw e;
    }
  }

  recv_getImageData () {
    const ret = this.input.readMessageBegin();
    const mtype = ret.mtype;
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(this.input);
      this.input.readMessageEnd();
      throw x;
    }
    const result = new MasterServer_getImageData_result();
    result.read(this.input);
    this.input.readMessageEnd();

    if (null !== result.failure) {
      throw result.failure;
    }
    if (null !== result.failure2) {
      throw result.failure2;
    }
    if (null !== result.f3) {
      throw result.f3;
    }
    if (null !== result.success) {
      return result.success;
    }
    throw 'getImageData failed: unknown result';
  }

  submitImage (userToken, imageDescription, blockHashes) {
    const self = this;
    return new Promise((resolve, reject) => {
      self.send_submitImage(userToken, imageDescription, blockHashes, (error, result) => {
        return error ? reject(error) : resolve(result);
      });
    });
  }

  send_submitImage (userToken, imageDescription, blockHashes, callback) {
    const params = {
      userToken: userToken,
      imageDescription: imageDescription,
      blockHashes: blockHashes
    };
    const args = new MasterServer_submitImage_args(params);
    try {
      this.output.writeMessageBegin('submitImage', Thrift.MessageType.CALL, this.seqid);
      args.write(this.output);
      this.output.writeMessageEnd();
      const self = this;
      this.output.getTransport().flush(true, () => {
        let error = null, result = null;
        try {
          result = self.recv_submitImage();
        } catch (e) {
          error = e;
        }
        callback(error, result);
      });
    }
    catch (e) {
      if (typeof this.output.getTransport().reset === 'function') {
        this.output.getTransport().reset();
      }
      throw e;
    }
  }

  recv_submitImage () {
    const ret = this.input.readMessageBegin();
    const mtype = ret.mtype;
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(this.input);
      this.input.readMessageEnd();
      throw x;
    }
    const result = new MasterServer_submitImage_result();
    result.read(this.input);
    this.input.readMessageEnd();

    if (null !== result.failure) {
      throw result.failure;
    }
    if (null !== result.failure2) {
      throw result.failure2;
    }
    if (null !== result.failure3) {
      throw result.failure3;
    }
    if (null !== result.success) {
      return result.success;
    }
    throw 'submitImage failed: unknown result';
  }

  registerSatellite (userToken, displayName, addresses, modulus, exponent, certsha256) {
    const self = this;
    return new Promise((resolve, reject) => {
      self.send_registerSatellite(userToken, displayName, addresses, modulus, exponent, certsha256, (error, result) => {
        return error ? reject(error) : resolve(result);
      });
    });
  }

  send_registerSatellite (userToken, displayName, addresses, modulus, exponent, certsha256, callback) {
    const params = {
      userToken: userToken,
      displayName: displayName,
      addresses: addresses,
      modulus: modulus,
      exponent: exponent,
      certsha256: certsha256
    };
    const args = new MasterServer_registerSatellite_args(params);
    try {
      this.output.writeMessageBegin('registerSatellite', Thrift.MessageType.CALL, this.seqid);
      args.write(this.output);
      this.output.writeMessageEnd();
      const self = this;
      this.output.getTransport().flush(true, () => {
        let error = null, result = null;
        try {
          result = self.recv_registerSatellite();
        } catch (e) {
          error = e;
        }
        callback(error, result);
      });
    }
    catch (e) {
      if (typeof this.output.getTransport().reset === 'function') {
        this.output.getTransport().reset();
      }
      throw e;
    }
  }

  recv_registerSatellite () {
    const ret = this.input.readMessageBegin();
    const mtype = ret.mtype;
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(this.input);
      this.input.readMessageEnd();
      throw x;
    }
    const result = new MasterServer_registerSatellite_result();
    result.read(this.input);
    this.input.readMessageEnd();

    if (null !== result.error) {
      throw result.error;
    }
    if (null !== result.success) {
      return result.success;
    }
    throw 'registerSatellite failed: unknown result';
  }

  updateSatellite (serverSessionId, displayName, addresses) {
    const self = this;
    return new Promise((resolve, reject) => {
      self.send_updateSatellite(serverSessionId, displayName, addresses, (error, result) => {
        return error ? reject(error) : resolve(result);
      });
    });
  }

  send_updateSatellite (serverSessionId, displayName, addresses, callback) {
    const params = {
      serverSessionId: serverSessionId,
      displayName: displayName,
      addresses: addresses
    };
    const args = new MasterServer_updateSatellite_args(params);
    try {
      this.output.writeMessageBegin('updateSatellite', Thrift.MessageType.CALL, this.seqid);
      args.write(this.output);
      this.output.writeMessageEnd();
      const self = this;
      this.output.getTransport().flush(true, () => {
        let error = null, result = null;
        try {
          result = self.recv_updateSatellite();
        } catch (e) {
          error = e;
        }
        callback(error, result);
      });
    }
    catch (e) {
      if (typeof this.output.getTransport().reset === 'function') {
        this.output.getTransport().reset();
      }
      throw e;
    }
  }

  recv_updateSatellite () {
    const ret = this.input.readMessageBegin();
    const mtype = ret.mtype;
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(this.input);
      this.input.readMessageEnd();
      throw x;
    }
    const result = new MasterServer_updateSatellite_result();
    result.read(this.input);
    this.input.readMessageEnd();

    if (null !== result.failure) {
      throw result.failure;
    }
    if (null !== result.error) {
      throw result.error;
    }
    if (null !== result.success) {
      return result.success;
    }
    throw 'updateSatellite failed: unknown result';
  }

  downloadImage (sessionId, imageVersionId) {
    const self = this;
    return new Promise((resolve, reject) => {
      self.send_downloadImage(sessionId, imageVersionId, (error, result) => {
        return error ? reject(error) : resolve(result);
      });
    });
  }

  send_downloadImage (sessionId, imageVersionId, callback) {
    const params = {
      sessionId: sessionId,
      imageVersionId: imageVersionId
    };
    const args = new MasterServer_downloadImage_args(params);
    try {
      this.output.writeMessageBegin('downloadImage', Thrift.MessageType.CALL, this.seqid);
      args.write(this.output);
      this.output.writeMessageEnd();
      const self = this;
      this.output.getTransport().flush(true, () => {
        let error = null, result = null;
        try {
          result = self.recv_downloadImage();
        } catch (e) {
          error = e;
        }
        callback(error, result);
      });
    }
    catch (e) {
      if (typeof this.output.getTransport().reset === 'function') {
        this.output.getTransport().reset();
      }
      throw e;
    }
  }

  recv_downloadImage () {
    const ret = this.input.readMessageBegin();
    const mtype = ret.mtype;
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(this.input);
      this.input.readMessageEnd();
      throw x;
    }
    const result = new MasterServer_downloadImage_result();
    result.read(this.input);
    this.input.readMessageEnd();

    if (null !== result.failure) {
      throw result.failure;
    }
    if (null !== result.failure2) {
      throw result.failure2;
    }
    if (null !== result.f3) {
      throw result.f3;
    }
    if (null !== result.success) {
      return result.success;
    }
    throw 'downloadImage failed: unknown result';
  }

  getOrganizations () {
    const self = this;
    return new Promise((resolve, reject) => {
      self.send_getOrganizations((error, result) => {
        return error ? reject(error) : resolve(result);
      });
    });
  }

  send_getOrganizations (callback) {
    const args = new MasterServer_getOrganizations_args();
    try {
      this.output.writeMessageBegin('getOrganizations', Thrift.MessageType.CALL, this.seqid);
      args.write(this.output);
      this.output.writeMessageEnd();
      const self = this;
      this.output.getTransport().flush(true, () => {
        let error = null, result = null;
        try {
          result = self.recv_getOrganizations();
        } catch (e) {
          error = e;
        }
        callback(error, result);
      });
    }
    catch (e) {
      if (typeof this.output.getTransport().reset === 'function') {
        this.output.getTransport().reset();
      }
      throw e;
    }
  }

  recv_getOrganizations () {
    const ret = this.input.readMessageBegin();
    const mtype = ret.mtype;
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(this.input);
      this.input.readMessageEnd();
      throw x;
    }
    const result = new MasterServer_getOrganizations_result();
    result.read(this.input);
    this.input.readMessageEnd();

    if (null !== result.serverError) {
      throw result.serverError;
    }
    if (null !== result.success) {
      return result.success;
    }
    throw 'getOrganizations failed: unknown result';
  }

  getOperatingSystems () {
    const self = this;
    return new Promise((resolve, reject) => {
      self.send_getOperatingSystems((error, result) => {
        return error ? reject(error) : resolve(result);
      });
    });
  }

  send_getOperatingSystems (callback) {
    const args = new MasterServer_getOperatingSystems_args();
    try {
      this.output.writeMessageBegin('getOperatingSystems', Thrift.MessageType.CALL, this.seqid);
      args.write(this.output);
      this.output.writeMessageEnd();
      const self = this;
      this.output.getTransport().flush(true, () => {
        let error = null, result = null;
        try {
          result = self.recv_getOperatingSystems();
        } catch (e) {
          error = e;
        }
        callback(error, result);
      });
    }
    catch (e) {
      if (typeof this.output.getTransport().reset === 'function') {
        this.output.getTransport().reset();
      }
      throw e;
    }
  }

  recv_getOperatingSystems () {
    const ret = this.input.readMessageBegin();
    const mtype = ret.mtype;
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(this.input);
      this.input.readMessageEnd();
      throw x;
    }
    const result = new MasterServer_getOperatingSystems_result();
    result.read(this.input);
    this.input.readMessageEnd();

    if (null !== result.serverError) {
      throw result.serverError;
    }
    if (null !== result.success) {
      return result.success;
    }
    throw 'getOperatingSystems failed: unknown result';
  }

  getVirtualizers () {
    const self = this;
    return new Promise((resolve, reject) => {
      self.send_getVirtualizers((error, result) => {
        return error ? reject(error) : resolve(result);
      });
    });
  }

  send_getVirtualizers (callback) {
    const args = new MasterServer_getVirtualizers_args();
    try {
      this.output.writeMessageBegin('getVirtualizers', Thrift.MessageType.CALL, this.seqid);
      args.write(this.output);
      this.output.writeMessageEnd();
      const self = this;
      this.output.getTransport().flush(true, () => {
        let error = null, result = null;
        try {
          result = self.recv_getVirtualizers();
        } catch (e) {
          error = e;
        }
        callback(error, result);
      });
    }
    catch (e) {
      if (typeof this.output.getTransport().reset === 'function') {
        this.output.getTransport().reset();
      }
      throw e;
    }
  }

  recv_getVirtualizers () {
    const ret = this.input.readMessageBegin();
    const mtype = ret.mtype;
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(this.input);
      this.input.readMessageEnd();
      throw x;
    }
    const result = new MasterServer_getVirtualizers_result();
    result.read(this.input);
    this.input.readMessageEnd();

    if (null !== result.serverError) {
      throw result.serverError;
    }
    if (null !== result.success) {
      return result.success;
    }
    throw 'getVirtualizers failed: unknown result';
  }

  getTags (startDate) {
    const self = this;
    return new Promise((resolve, reject) => {
      self.send_getTags(startDate, (error, result) => {
        return error ? reject(error) : resolve(result);
      });
    });
  }

  send_getTags (startDate, callback) {
    const params = {
      startDate: startDate
    };
    const args = new MasterServer_getTags_args(params);
    try {
      this.output.writeMessageBegin('getTags', Thrift.MessageType.CALL, this.seqid);
      args.write(this.output);
      this.output.writeMessageEnd();
      const self = this;
      this.output.getTransport().flush(true, () => {
        let error = null, result = null;
        try {
          result = self.recv_getTags();
        } catch (e) {
          error = e;
        }
        callback(error, result);
      });
    }
    catch (e) {
      if (typeof this.output.getTransport().reset === 'function') {
        this.output.getTransport().reset();
      }
      throw e;
    }
  }

  recv_getTags () {
    const ret = this.input.readMessageBegin();
    const mtype = ret.mtype;
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(this.input);
      this.input.readMessageEnd();
      throw x;
    }
    const result = new MasterServer_getTags_result();
    result.read(this.input);
    this.input.readMessageEnd();

    if (null !== result.serverError) {
      throw result.serverError;
    }
    if (null !== result.success) {
      return result.success;
    }
    throw 'getTags failed: unknown result';
  }

  getSoftware (startDate) {
    const self = this;
    return new Promise((resolve, reject) => {
      self.send_getSoftware(startDate, (error, result) => {
        return error ? reject(error) : resolve(result);
      });
    });
  }

  send_getSoftware (startDate, callback) {
    const params = {
      startDate: startDate
    };
    const args = new MasterServer_getSoftware_args(params);
    try {
      this.output.writeMessageBegin('getSoftware', Thrift.MessageType.CALL, this.seqid);
      args.write(this.output);
      this.output.writeMessageEnd();
      const self = this;
      this.output.getTransport().flush(true, () => {
        let error = null, result = null;
        try {
          result = self.recv_getSoftware();
        } catch (e) {
          error = e;
        }
        callback(error, result);
      });
    }
    catch (e) {
      if (typeof this.output.getTransport().reset === 'function') {
        this.output.getTransport().reset();
      }
      throw e;
    }
  }

  recv_getSoftware () {
    const ret = this.input.readMessageBegin();
    const mtype = ret.mtype;
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(this.input);
      this.input.readMessageEnd();
      throw x;
    }
    const result = new MasterServer_getSoftware_result();
    result.read(this.input);
    this.input.readMessageEnd();

    if (null !== result.serverError) {
      throw result.serverError;
    }
    if (null !== result.success) {
      return result.success;
    }
    throw 'getSoftware failed: unknown result';
  }

  queryUploadStatus (uploadToken) {
    const self = this;
    return new Promise((resolve, reject) => {
      self.send_queryUploadStatus(uploadToken, (error, result) => {
        return error ? reject(error) : resolve(result);
      });
    });
  }

  send_queryUploadStatus (uploadToken, callback) {
    const params = {
      uploadToken: uploadToken
    };
    const args = new MasterServer_queryUploadStatus_args(params);
    try {
      this.output.writeMessageBegin('queryUploadStatus', Thrift.MessageType.CALL, this.seqid);
      args.write(this.output);
      this.output.writeMessageEnd();
      const self = this;
      this.output.getTransport().flush(true, () => {
        let error = null, result = null;
        try {
          result = self.recv_queryUploadStatus();
        } catch (e) {
          error = e;
        }
        callback(error, result);
      });
    }
    catch (e) {
      if (typeof this.output.getTransport().reset === 'function') {
        this.output.getTransport().reset();
      }
      throw e;
    }
  }

  recv_queryUploadStatus () {
    const ret = this.input.readMessageBegin();
    const mtype = ret.mtype;
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(this.input);
      this.input.readMessageEnd();
      throw x;
    }
    const result = new MasterServer_queryUploadStatus_result();
    result.read(this.input);
    this.input.readMessageEnd();

    if (null !== result.ex1) {
      throw result.ex1;
    }
    if (null !== result.success) {
      return result.success;
    }
    throw 'queryUploadStatus failed: unknown result';
  }
};
