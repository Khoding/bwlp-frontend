//
// Autogenerated by Thrift Compiler (0.16.0)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//

declare class MasterServerClient {
    input: Thrift.TJSONProtocol;
    output: Thrift.TJSONProtocol;
    seqid: number;

    constructor(input: Thrift.TJSONProtocol, output?: Thrift.TJSONProtocol);

    ping(): Promise<boolean>;

    ping(callback?: (data: boolean)=>void): void;

    authenticate(login: string, password: string): Promise<SessionData>;

    authenticate(login: string, password: string, callback?: (data: SessionData)=>void): void;

    localAccountLogin(login: string, password: string): Promise<ClientSessionData>;

    localAccountLogin(login: string, password: string, callback?: (data: ClientSessionData)=>void): void;

    setUsedSatellite(sessionId: string, satelliteName: string): Promise<void>;

    setUsedSatellite(sessionId: string, satelliteName: string, callback?: (data: void)=>void): void;

    findUser(sessionId: string, organizationId: string, searchTerm: string): Promise<UserInfo[]>;

    findUser(sessionId: string, organizationId: string, searchTerm: string, callback?: (data: UserInfo[])=>void): void;

    getPublicImages(sessionId: string, page: number): Promise<ImageSummaryRead[]>;

    getPublicImages(sessionId: string, page: number, callback?: (data: ImageSummaryRead[])=>void): void;

    getImageDetails(sessionId: string, imageBaseId: string): Promise<ImageDetailsRead>;

    getImageDetails(sessionId: string, imageBaseId: string, callback?: (data: ImageDetailsRead)=>void): void;

    getUser(userToken: string, userId: string): Promise<UserInfo>;

    getUser(userToken: string, userId: string, callback?: (data: UserInfo)=>void): void;

    invalidateSession(sessionId: string): Promise<void>;

    invalidateSession(sessionId: string, callback?: (data: void)=>void): void;

    getUserFromToken(token: string): Promise<UserInfo>;

    getUserFromToken(token: string, callback?: (data: UserInfo)=>void): void;

    isServerAuthenticated(serverSessionId: string): Promise<boolean>;

    isServerAuthenticated(serverSessionId: string, callback?: (data: boolean)=>void): void;

    startServerAuthentication(satelliteId: number): Promise<Buffer>;

    startServerAuthentication(satelliteId: number, callback?: (data: Buffer)=>void): void;

    serverAuthenticate(satelliteId: number, challengeResponse: Buffer): Promise<ServerSessionData>;

    serverAuthenticate(satelliteId: number, challengeResponse: Buffer, callback?: (data: ServerSessionData)=>void): void;

    getImageData(serverSessionId: string, imageVersionId: string): Promise<ImagePublishData>;

    getImageData(serverSessionId: string, imageVersionId: string, callback?: (data: ImagePublishData)=>void): void;

    submitImage(userToken: string, imageDescription: ImagePublishData, blockHashes: Buffer[]): Promise<TransferInformation>;

    submitImage(userToken: string, imageDescription: ImagePublishData, blockHashes: Buffer[], callback?: (data: TransferInformation)=>void): void;

    registerSatellite(userToken: string, displayName: string, addresses: string[], modulus: string, exponent: string, certsha256: Buffer): Promise<number>;

    registerSatellite(userToken: string, displayName: string, addresses: string[], modulus: string, exponent: string, certsha256: Buffer, callback?: (data: number)=>void): void;

    updateSatellite(serverSessionId: string, displayName: string, addresses: string[]): Promise<boolean>;

    updateSatellite(serverSessionId: string, displayName: string, addresses: string[], callback?: (data: boolean)=>void): void;

    downloadImage(sessionId: string, imageVersionId: string): Promise<TransferInformation>;

    downloadImage(sessionId: string, imageVersionId: string, callback?: (data: TransferInformation)=>void): void;

    getOrganizations(): Promise<Organization[]>;

    getOrganizations(callback?: (data: Organization[])=>void): void;

    getOperatingSystems(): Promise<OperatingSystem[]>;

    getOperatingSystems(callback?: (data: OperatingSystem[])=>void): void;

    getVirtualizers(): Promise<Virtualizer[]>;

    getVirtualizers(callback?: (data: Virtualizer[])=>void): void;

    getTags(startDate: Int64): Promise<MasterTag[]>;

    getTags(startDate: Int64, callback?: (data: MasterTag[])=>void): void;

    getSoftware(startDate: Int64): Promise<MasterSoftware[]>;

    getSoftware(startDate: Int64, callback?: (data: MasterSoftware[])=>void): void;

    queryUploadStatus(uploadToken: string): Promise<TransferStatus>;

    queryUploadStatus(uploadToken: string, callback?: (data: TransferStatus)=>void): void;
  }
