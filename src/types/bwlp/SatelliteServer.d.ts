//
// Autogenerated by Thrift Compiler (0.16.0)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//

import Int64 = require('node-int64');

import { bwlp } from "./bwlp_types";


export declare class SatelliteServerClient {
    input: Thrift.TJSONProtocol;
    output: Thrift.TJSONProtocol;
    seqid: number;

    constructor(input: Thrift.TJSONProtocol, output?: Thrift.TJSONProtocol);

    getVersion(clientVersion: Int64): Promise<Int64>;

    getVersion(clientVersion: Int64, callback?: (data: Int64)=>void): void;

    getSupportedFeatures(): Promise<string>;

    getSupportedFeatures(callback?: (data: string)=>void): void;

    getConfiguration(): Promise<SatelliteConfig>;

    getConfiguration(callback?: (data: SatelliteConfig)=>void): void;

    requestImageVersionUpload(userToken: string, imageBaseId: string, fileSize: Int64, blockHashes: Buffer[], machineDescription: Buffer): Promise<TransferInformation>;

    requestImageVersionUpload(userToken: string, imageBaseId: string, fileSize: Int64, blockHashes: Buffer[], machineDescription: Buffer, callback?: (data: TransferInformation)=>void): void;

    updateBlockHashes(uploadToken: string, blockHashes: Buffer[], userToken: string): Promise<void>;

    updateBlockHashes(uploadToken: string, blockHashes: Buffer[], userToken: string, callback?: (data: void)=>void): void;

    setUploadOptions(userToken: string, uploadToken: string, options: UploadOptions): Promise<UploadOptions>;

    setUploadOptions(userToken: string, uploadToken: string, options: UploadOptions, callback?: (data: UploadOptions)=>void): void;

    cancelUpload(uploadToken: string): Promise<void>;

    cancelUpload(uploadToken: string, callback?: (data: void)=>void): void;

    queryUploadStatus(uploadToken: string): Promise<TransferStatus>;

    queryUploadStatus(uploadToken: string, callback?: (data: TransferStatus)=>void): void;

    requestDownload(userToken: string, imageVersionId: string): Promise<TransferInformation>;

    requestDownload(userToken: string, imageVersionId: string, callback?: (data: TransferInformation)=>void): void;

    cancelDownload(downloadToken: string): Promise<void>;

    cancelDownload(downloadToken: string, callback?: (data: void)=>void): void;

    isAuthenticated(userToken: string): Promise<void>;

    isAuthenticated(userToken: string, callback?: (data: void)=>void): void;

    whoami(userToken: string): Promise<WhoamiInfo>;

    whoami(userToken: string, callback?: (data: WhoamiInfo)=>void): void;

    invalidateSession(userToken: string): Promise<void>;

    invalidateSession(userToken: string, callback?: (data: void)=>void): void;

    getUserList(userToken: string, page: number): Promise<UserInfo[]>;

    getUserList(userToken: string, page: number, callback?: (data: UserInfo[])=>void): void;

    getUserConfig(userToken: string): Promise<SatelliteUserConfig>;

    getUserConfig(userToken: string, callback?: (data: SatelliteUserConfig)=>void): void;

    setUserConfig(userToken: string, config: SatelliteUserConfig): Promise<void>;

    setUserConfig(userToken: string, config: SatelliteUserConfig, callback?: (data: void)=>void): void;

    getOperatingSystems(): Promise<OperatingSystem[]>;

    getOperatingSystems(callback?: (data: OperatingSystem[])=>void): void;

    getVirtualizers(): Promise<Virtualizer[]>;

    getVirtualizers(callback?: (data: Virtualizer[])=>void): void;

    getAllOrganizations(): Promise<Organization[]>;

    getAllOrganizations(callback?: (data: Organization[])=>void): void;

    getLocations(): Promise<Location[]>;

    getLocations(callback?: (data: Location[])=>void): void;

    getStatus(): Promise<SatelliteStatus>;

    getStatus(callback?: (data: SatelliteStatus)=>void): void;

    getImageList(userToken: string, tagSearch: string[], page: number): Promise<ImageSummaryRead[]>;

    getImageList(userToken: string, tagSearch: string[], page: number, callback?: (data: ImageSummaryRead[])=>void): void;

    getImageDetails(userToken: string, imageBaseId: string): Promise<ImageDetailsRead>;

    getImageDetails(userToken: string, imageBaseId: string, callback?: (data: ImageDetailsRead)=>void): void;

    createImage(userToken: string, imageName: string): Promise<string>;

    createImage(userToken: string, imageName: string, callback?: (data: string)=>void): void;

    updateImageBase(userToken: string, imageBaseId: string, image: ImageBaseWrite): Promise<void>;

    updateImageBase(userToken: string, imageBaseId: string, image: ImageBaseWrite, callback?: (data: void)=>void): void;

    updateImageVersion(userToken: string, imageVersionId: string, image: ImageVersionWrite): Promise<void>;

    updateImageVersion(userToken: string, imageVersionId: string, image: ImageVersionWrite, callback?: (data: void)=>void): void;

    deleteImageVersion(userToken: string, imageVersionId: string): Promise<void>;

    deleteImageVersion(userToken: string, imageVersionId: string, callback?: (data: void)=>void): void;

    deleteImageBase(userToken: string, imageBaseId: string): Promise<void>;

    deleteImageBase(userToken: string, imageBaseId: string, callback?: (data: void)=>void): void;

    writeImagePermissions(userToken: string, imageBaseId: string, permissions: { [k: string]: ImagePermissions; }): Promise<void>;

    writeImagePermissions(userToken: string, imageBaseId: string, permissions: { [k: string]: ImagePermissions; }, callback?: (data: void)=>void): void;

    getImagePermissions(userToken: string, imageBaseId: string): Promise<{ [k: string]: ImagePermissions; }>;

    getImagePermissions(userToken: string, imageBaseId: string, callback?: (data: { [k: string]: ImagePermissions; })=>void): void;

    setImageOwner(userToken: string, imageBaseId: string, newOwnerId: string): Promise<void>;

    setImageOwner(userToken: string, imageBaseId: string, newOwnerId: string, callback?: (data: void)=>void): void;

    setImageVersionExpiry(userToken: string, imageBaseId: string, expireTime: Int64): Promise<void>;

    setImageVersionExpiry(userToken: string, imageBaseId: string, expireTime: Int64, callback?: (data: void)=>void): void;

    getImageVersionVirtConfig(userToken: string, imageVersionId: string): Promise<Buffer>;

    getImageVersionVirtConfig(userToken: string, imageVersionId: string, callback?: (data: Buffer)=>void): void;

    setImageVersionVirtConfig(userToken: string, imageVersionId: string, meta: Buffer): Promise<void>;

    setImageVersionVirtConfig(userToken: string, imageVersionId: string, meta: Buffer, callback?: (data: void)=>void): void;

    requestImageReplication(userToken: string, imageVersionId: string): Promise<string>;

    requestImageReplication(userToken: string, imageVersionId: string, callback?: (data: string)=>void): void;

    publishImageVersion(userToken: string, imageVersionId: string): Promise<string>;

    publishImageVersion(userToken: string, imageVersionId: string, callback?: (data: string)=>void): void;

    createLecture(userToken: string, lecture: LectureWrite): Promise<string>;

    createLecture(userToken: string, lecture: LectureWrite, callback?: (data: string)=>void): void;

    updateLecture(userToken: string, lectureId: string, lecture: LectureWrite): Promise<void>;

    updateLecture(userToken: string, lectureId: string, lecture: LectureWrite, callback?: (data: void)=>void): void;

    getLectureList(userToken: string, page: number): Promise<LectureSummary[]>;

    getLectureList(userToken: string, page: number, callback?: (data: LectureSummary[])=>void): void;

    getLectureDetails(userToken: string, lectureId: string): Promise<LectureRead>;

    getLectureDetails(userToken: string, lectureId: string, callback?: (data: LectureRead)=>void): void;

    deleteLecture(userToken: string, lectureId: string): Promise<void>;

    deleteLecture(userToken: string, lectureId: string, callback?: (data: void)=>void): void;

    writeLecturePermissions(userToken: string, lectureId: string, permissions: { [k: string]: LecturePermissions; }): Promise<void>;

    writeLecturePermissions(userToken: string, lectureId: string, permissions: { [k: string]: LecturePermissions; }, callback?: (data: void)=>void): void;

    getLecturePermissions(userToken: string, lectureId: string): Promise<{ [k: string]: LecturePermissions; }>;

    getLecturePermissions(userToken: string, lectureId: string, callback?: (data: { [k: string]: LecturePermissions; })=>void): void;

    setLectureOwner(userToken: string, lectureId: string, newOwnerId: string): Promise<void>;

    setLectureOwner(userToken: string, lectureId: string, newOwnerId: string, callback?: (data: void)=>void): void;

    getPredefinedData(userToken: string): Promise<PredefinedData>;

    getPredefinedData(userToken: string, callback?: (data: PredefinedData)=>void): void;
  }
